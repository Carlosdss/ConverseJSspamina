{"version":3,"sources":["../src/converse-bookmarks.js"],"names":["root","factory","define","$","utils","converse","muc","tpl_chatroom_bookmark_form","tpl_chatroom_bookmark_toggle","tpl_bookmark","tpl_bookmarks_list","env","Backbone","Promise","Strophe","$iq","b64_sha1","sizzle","_","plugins","add","overrides","clearSession","__super__","apply","arguments","isUndefined","bookmarks","reset","browserStorage","_clear","window","sessionStorage","removeItem","fetched_flag","ChatRoomView","events","initialize","model","on","onBookmarked","setBookmarkState","generateHeadingHTML","_converse","__","html","allow_bookmarks","div","document","createElement","innerHTML","bookmark_button","assignIn","toJSON","info_toggle_bookmark","bookmarked","get","close_button","querySelector","insertAdjacentHTML","checkForReservedNick","findWhere","join","icon","el","classList","remove","models","where","length","save","renderBookmarkForm","body","each","children","child","form","isNull","parentNode","removeChild","heading","label_name","label_autojoin","label_nick","default_nick","label_submit","label_cancel","addEventListener","onBookmarkFormSubmitted","bind","cancelConfiguration","ev","preventDefault","$form","target","that","createBookmark","find","prop","val","$el","hide","renderAfterTransition","toggleBookmark","stopPropagation","forEach","destroy","___","api","settings","update","hide_open_bookmarks","promises","extend","removeBookmarkViaEvent","name","getAttribute","jid","confirm","invokeMap","Model","prototype","addBookmarkViaEvent","chatroom","openChatRoom","chatboxviews","Bookmark","BookmarksList","defaults","OPENED","Bookmarks","Collection","flow","openBookmarkedRoom","markRoomAsBookmarked","markRoomAsUnbookmarked","sendBookmarkStanza","cache_key","bare_jid","BrowserStorage","storage","bookmark","rooms","open","fetchBookmarks","deferred","getWrappedPromise","records","fetch","onCachedBookmarksFetched","getItem","fetchBookmarksFromServer","resolve","promise","options","create","stanza","connection","c","NS","PUBSUB","t","up","XFORM","sendIQ","onBookmarkError","iq","log","LogLevel","ERROR","alert","onBookmarksReceived","onBookmarksReceivedError","room","chatboxes","textContent","setItem","DEBUG","isNil","reject","BookmarksView","View","tagName","className","renderBookmarkListElement","removeBookmarkListElement","cachekey","list_model","id","render","controlboxview","prependTo","removeBookmark","addBookmark","item","ChatBox","head","list_el","firstChild","appendChild","show","is","childElementCount","toggleBookmarksList","hasClass","slideUp","CLOSED","removeClass","addClass","slideDown","initBookmarks","then","bookmarksview","emit","all","waitUntil","afterReconnection"],"mappings":"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","file":"converse-bookmarks.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n/* This is a Converse.js plugin which add support for bookmarks specified\n * in XEP-0048.\n */\n(function (root, factory) {\n    define([\"jquery.noconflict\",\n            \"utils\",\n            \"converse-core\",\n            \"converse-muc\",\n            \"tpl!chatroom_bookmark_form\",\n            \"tpl!chatroom_bookmark_toggle\",\n            \"tpl!bookmark\",\n            \"tpl!bookmarks_list\"\n        ],\n        factory);\n}(this, function (\n        $,\n        utils,\n        converse,\n        muc,\n        tpl_chatroom_bookmark_form,\n        tpl_chatroom_bookmark_toggle,\n        tpl_bookmark,\n        tpl_bookmarks_list\n    ) {\n\n    const { Backbone, Promise, Strophe, $iq, b64_sha1, sizzle, _ } = converse.env;\n\n    converse.plugins.add('converse-bookmarks', {\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            clearSession () {\n                this.__super__.clearSession.apply(this, arguments);\n                if (!_.isUndefined(this.bookmarks)) {\n                    this.bookmarks.reset();\n                    this.bookmarks.browserStorage._clear();\n                    window.sessionStorage.removeItem(this.bookmarks.fetched_flag);\n                }\n            },\n\n            ChatRoomView: {\n                events: {\n                    'click .toggle-bookmark': 'toggleBookmark'\n                },\n\n                initialize () {\n                    this.__super__.initialize.apply(this, arguments);\n                    this.model.on('change:bookmarked', this.onBookmarked, this);\n                    this.setBookmarkState();\n                },\n\n                generateHeadingHTML () {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse,\n                        html = this.__super__.generateHeadingHTML.apply(this, arguments);\n                    if (_converse.allow_bookmarks) {\n                        const div = document.createElement('div');\n                        div.innerHTML = html;\n                        const bookmark_button = tpl_chatroom_bookmark_toggle(\n                            _.assignIn(\n                                this.model.toJSON(),\n                                {\n                                    info_toggle_bookmark: __('Bookmark this room'),\n                                    bookmarked: this.model.get('bookmarked')\n                                }\n                            ));\n                        const close_button = div.querySelector('.close-chatbox-button');\n                        close_button.insertAdjacentHTML('afterend', bookmark_button);\n                        return div.innerHTML;\n                    }\n                    return html;\n                },\n\n                checkForReservedNick () {\n                    /* Check if the user has a bookmark with a saved nickanme\n                     * for this room, and if so use it.\n                     * Otherwise delegate to the super method.\n                     */\n                    const { _converse } = this.__super__;\n                    if (_.isUndefined(_converse.bookmarks) || !_converse.allow_bookmarks) {\n                        return this.__super__.checkForReservedNick.apply(this, arguments);\n                    }\n                    const model = _converse.bookmarks.findWhere({'jid': this.model.get('jid')});\n                    if (!_.isUndefined(model) && model.get('nick')) {\n                        this.join(model.get('nick'));\n                    } else {\n                        return this.__super__.checkForReservedNick.apply(this, arguments);\n                    }\n                },\n\n                onBookmarked () {\n                    const icon = this.el.querySelector('.icon-pushpin');\n                    if (this.model.get('bookmarked')) {\n                        icon.classList.add('button-on');\n                    } else {\n                        icon.classList.remove('button-on');\n                    }\n                },\n\n                setBookmarkState () {\n                    /* Set whether the room is bookmarked or not.\n                     */\n                    const { _converse } = this.__super__;\n                    if (!_.isUndefined(_converse.bookmarks)) {\n                        const models = _converse.bookmarks.where({'jid': this.model.get('jid')});\n                        if (!models.length) {\n                            this.model.save('bookmarked', false);\n                        } else {\n                            this.model.save('bookmarked', true);\n                        }\n                    }\n                },\n\n                renderBookmarkForm () {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse,\n                        body = this.el.querySelector('.chatroom-body');\n\n                    _.each(body.children, function (child) {\n                        child.classList.add('hidden');\n                    });\n                    // Remove any existing forms\n                    let form = body.querySelector('form.chatroom-form');\n                    if (!_.isNull(form)) {\n                        form.parentNode.removeChild(form);\n                    }\n                    body.insertAdjacentHTML(\n                        'beforeend', \n                        tpl_chatroom_bookmark_form({\n                            heading: __('Bookmark this room'),\n                            label_name: __('The name for this bookmark:'),\n                            label_autojoin: __('Would you like this room to be automatically joined upon startup?'),\n                            label_nick: __('What should your nickname for this room be?'),\n                            default_nick: this.model.get('nick'),\n                            label_submit: __('Save'),\n                            label_cancel: __('Cancel')\n                        })\n                    );\n                    form = body.querySelector('form.chatroom-form');\n                    form.addEventListener(\n                        'submit',\n                        this.onBookmarkFormSubmitted.bind(this)\n                    );\n                    form.querySelector('.button-cancel').addEventListener(\n                        'click',\n                        this.cancelConfiguration.bind(this)\n                    );\n                },\n\n                onBookmarkFormSubmitted (ev) {\n                    ev.preventDefault();\n                    const { _converse } = this.__super__;\n                    const $form = $(ev.target), that = this;\n                    _converse.bookmarks.createBookmark({\n                        'jid': this.model.get('jid'),\n                        'autojoin': $form.find('input[name=\"autojoin\"]').prop('checked'),\n                        'name':  $form.find('input[name=name]').val(),\n                        'nick':  $form.find('input[name=nick]').val()\n                    });\n                    this.$el.find('div.chatroom-form-container').hide(\n                        function () {\n                            $(this).remove();\n                            that.renderAfterTransition();\n                        });\n                },\n\n                toggleBookmark (ev) {\n                    if (ev) {\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                    const { _converse } = this.__super__;\n                    const models = _converse.bookmarks.where({'jid': this.model.get('jid')});\n                    if (!models.length) {\n                        this.renderBookmarkForm();\n                    } else {\n                        _.forEach(models, function (model) {\n                            model.destroy();\n                        });\n                        this.el.querySelector('.icon-pushpin').classList.remove('button-on');\n                    }\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __,\n                ___ } = _converse;\n\n            // Configuration values for this plugin\n            // ====================================\n            // Refer to docs/source/configuration.rst for explanations of these\n            // configuration settings.\n            _converse.api.settings.update({\n                allow_bookmarks: true,\n                hide_open_bookmarks: false\n            });\n            // Promises exposed by this plugin\n            _converse.api.promises.add('bookmarksInitialized');\n\n            // Pure functions on the _converse object\n            _.extend(_converse, {\n                removeBookmarkViaEvent (ev) {\n                    /* Remove a bookmark as determined by the passed in\n                     * event.\n                     */\n                    ev.preventDefault();\n                    const name = ev.target.getAttribute('data-bookmark-name');\n                    const jid = ev.target.getAttribute('data-room-jid');\n                    if (confirm(__(___(\"Are you sure you want to remove the bookmark \\\"%1$s\\\"?\"), name))) {\n                        _.invokeMap(_converse.bookmarks.where({'jid': jid}), Backbone.Model.prototype.destroy);\n                    }\n                },\n\n                addBookmarkViaEvent (ev) {\n                    /* Add a bookmark as determined by the passed in\n                     * event.\n                     */\n                    ev.preventDefault();\n                    const jid = ev.target.getAttribute('data-room-jid');\n                    const chatroom = _converse.openChatRoom({'jid': jid}, true);\n                    _converse.chatboxviews.get(jid).renderBookmarkForm();\n                },\n            });\n\n            _converse.Bookmark = Backbone.Model;\n\n            _converse.BookmarksList = Backbone.Model.extend({\n                defaults: {\n                    \"toggle-state\":  _converse.OPENED\n                }\n            });\n\n            _converse.Bookmarks = Backbone.Collection.extend({\n                model: _converse.Bookmark,\n\n                initialize () {\n                    this.on('add', _.flow(this.openBookmarkedRoom, this.markRoomAsBookmarked));\n                    this.on('remove', this.markRoomAsUnbookmarked, this);\n                    this.on('remove', this.sendBookmarkStanza, this);\n\n                    const cache_key = `converse.room-bookmarks${_converse.bare_jid}`;\n                    this.fetched_flag = b64_sha1(cache_key+'fetched');\n                    this.browserStorage = new Backbone.BrowserStorage[_converse.storage](\n                        b64_sha1(cache_key)\n                    );\n                },\n\n                openBookmarkedRoom (bookmark) {\n                    if (bookmark.get('autojoin')) {\n                        _converse.api.rooms.open(bookmark.get('jid'), bookmark.get('nick'));\n                    }\n                    return bookmark;\n                },\n\n                fetchBookmarks () {\n                    const deferred = utils.getWrappedPromise();\n                    if (this.browserStorage.records.length > 0) {\n                        this.fetch({\n                            'success': _.bind(this.onCachedBookmarksFetched, this, deferred),\n                            'error':  _.bind(this.onCachedBookmarksFetched, this, deferred)\n                        });\n                    } else if (! window.sessionStorage.getItem(this.fetched_flag)) {\n                        // There aren't any cached bookmarks and the\n                        // `fetched_flag` is off, so we query the XMPP server.\n                        // If nothing is returned from the XMPP server, we set\n                        // the `fetched_flag` to avoid calling the server again.\n                        this.fetchBookmarksFromServer(deferred);\n                    } else {\n                        deferred.resolve();\n                    }\n                    return deferred.promise;\n                },\n\n                onCachedBookmarksFetched (deferred) {\n                    return deferred.resolve();\n                },\n\n                createBookmark (options) {\n                    _converse.bookmarks.create(options);\n                    _converse.bookmarks.sendBookmarkStanza();\n                },\n\n                sendBookmarkStanza () {\n                    let stanza = $iq({\n                            'type': 'set',\n                            'from': _converse.connection.jid,\n                        })\n                        .c('pubsub', {'xmlns': Strophe.NS.PUBSUB})\n                            .c('publish', {'node': 'storage:bookmarks'})\n                                .c('item', {'id': 'current'})\n                                    .c('storage', {'xmlns':'storage:bookmarks'});\n                    this.each(function (model) {\n                        stanza = stanza.c('conference', {\n                            'name': model.get('name'),\n                            'autojoin': model.get('autojoin'),\n                            'jid': model.get('jid'),\n                        }).c('nick').t(model.get('nick')).up().up();\n                    });\n                    stanza.up().up().up();\n                    stanza.c('publish-options')\n                        .c('x', {'xmlns': Strophe.NS.XFORM, 'type':'submit'})\n                            .c('field', {'var':'FORM_TYPE', 'type':'hidden'})\n                                .c('value').t('http://jabber.org/protocol/pubsub#publish-options').up().up()\n                            .c('field', {'var':'pubsub#persist_items'})\n                                .c('value').t('true').up().up()\n                            .c('field', {'var':'pubsub#access_model'})\n                                .c('value').t('whitelist');\n                    _converse.connection.sendIQ(stanza, null, this.onBookmarkError.bind(this));\n                },\n\n                onBookmarkError (iq) {\n                    _converse.log(\"Error while trying to add bookmark\", Strophe.LogLevel.ERROR);\n                    _converse.log(iq);\n                    // We remove all locally cached bookmarks and fetch them\n                    // again from the server.\n                    this.reset();\n                    this.fetchBookmarksFromServer(null);\n                    window.alert(__(\"Sorry, something went wrong while trying to save your bookmark.\"));\n                },\n\n                fetchBookmarksFromServer (deferred) {\n                    const stanza = $iq({\n                        'from': _converse.connection.jid,\n                        'type': 'get',\n                    }).c('pubsub', {'xmlns': Strophe.NS.PUBSUB})\n                        .c('items', {'node': 'storage:bookmarks'});\n                    _converse.connection.sendIQ(\n                        stanza,\n                        _.bind(this.onBookmarksReceived, this, deferred),\n                        _.bind(this.onBookmarksReceivedError, this, deferred)\n                    );\n                },\n\n                markRoomAsBookmarked (bookmark) {\n                    const room = _converse.chatboxes.get(bookmark.get('jid'));\n                    if (!_.isUndefined(room)) {\n                        room.save('bookmarked', true);\n                    }\n                },\n\n                markRoomAsUnbookmarked (bookmark) {\n                    const room = _converse.chatboxes.get(bookmark.get('jid'));\n                    if (!_.isUndefined(room)) {\n                        room.save('bookmarked', false);\n                    }\n                },\n\n                onBookmarksReceived (deferred, iq) {\n                    const bookmarks = $(iq).find(\n                        'items[node=\"storage:bookmarks\"] item[id=\"current\"] storage conference'\n                    );\n                    const that = this;\n                    _.forEach(bookmarks, function (bookmark) {\n                        that.create({\n                            'jid': bookmark.getAttribute('jid'),\n                            'name': bookmark.getAttribute('name'),\n                            'autojoin': bookmark.getAttribute('autojoin') === 'true',\n                            'nick': bookmark.querySelector('nick').textContent\n                        });\n                    });\n                    if (!_.isUndefined(deferred)) {\n                        return deferred.resolve();\n                    }\n                },\n\n                onBookmarksReceivedError (deferred, iq) {\n                    window.sessionStorage.setItem(this.fetched_flag, true);\n                    _converse.log('Error while fetching bookmarks', Strophe.LogLevel.ERROR);\n                    _converse.log(iq, Strophe.LogLevel.DEBUG);\n                    if (!_.isNil(deferred)) {\n                        return deferred.reject();\n                    }\n                }\n            });\n\n            _converse.BookmarksView = Backbone.View.extend({\n                tagName: 'div',\n                className: 'bookmarks-list, rooms-list-container',\n                events: {\n                    'click .add-bookmark': 'addBookmark',\n                    'click .bookmarks-toggle': 'toggleBookmarksList',\n                    'click .remove-bookmark': 'removeBookmark'\n                },\n\n                initialize () {\n                    this.model.on('add', this.renderBookmarkListElement, this);\n                    this.model.on('remove', this.removeBookmarkListElement, this);\n                    _converse.chatboxes.on('add', this.renderBookmarkListElement, this);\n                    _converse.chatboxes.on('remove', this.renderBookmarkListElement, this);\n\n                    const cachekey = `converse.room-bookmarks${_converse.bare_jid}-list-model`;\n                    this.list_model = new _converse.BookmarksList();\n                    this.list_model.id = cachekey;\n                    this.list_model.browserStorage = new Backbone.BrowserStorage[_converse.storage](\n                        b64_sha1(cachekey)\n                    );\n                    this.list_model.fetch();\n                    this.render();\n                },\n\n                render () {\n                    this.$el.html(tpl_bookmarks_list({\n                        'toggle_state': this.list_model.get('toggle-state'),\n                        'desc_bookmarks': __('Click to toggle the bookmarks list'),\n                        'label_bookmarks': __('Bookmarks')\n                    })).hide();\n                    if (this.list_model.get('toggle-state') !== _converse.OPENED) {\n                        this.$('.bookmarks').hide();\n                    }\n                    this.model.each(this.renderBookmarkListElement.bind(this));\n                    const controlboxview = _converse.chatboxviews.get('controlbox');\n                    if (!_.isUndefined(controlboxview)) {\n                        this.$el.prependTo(controlboxview.$('#chatrooms'));\n                    }\n                    return this.$el;\n                },\n\n                removeBookmark: _converse.removeBookmarkViaEvent,\n                addBookmark: _converse.addBookmarkViaEvent,\n\n                renderBookmarkListElement (item) {\n                    if (item instanceof _converse.ChatBox) {\n                        item = _.head(this.model.where({'jid': item.get('jid')}));\n                        if (_.isNil(item)) {\n                            // A chat box has been closed, but we don't have a\n                            // bookmark for it, so nothing further to do here.\n                            return;\n                        }\n                    }\n                    if (_converse.hide_open_bookmarks &&\n                            _converse.chatboxes.where({'jid': item.get('jid')}).length) {\n                        // A chat box has been opened, and we don't show\n                        // bookmarks for open chats, so we remove it.\n                        this.removeBookmarkListElement(item);\n                        return;\n                    }\n\n                    const list_el = this.el.querySelector('.bookmarks');\n                    const div = document.createElement('div');\n                    div.innerHTML = tpl_bookmark({\n                        'bookmarked': true,\n                        'info_leave_room': __('Leave this room'),\n                        'info_remove': __('Remove this bookmark'),\n                        'info_remove_bookmark': __('Unbookmark this room'),\n                        'info_title': __('Show more information on this room'),\n                        'jid': item.get('jid'),\n                        'name': item.get('name'),\n                        'open_title': __('Click to open this room')\n                    });\n                    const el = _.head(sizzle(\n                        `.available-chatroom[data-room-jid=\"${item.get('jid')}\"]`,\n                        list_el));\n\n                    if (el) {\n                        el.innerHTML = div.firstChild.innerHTML;\n                    } else {\n                        list_el.appendChild(div.firstChild);\n                    }\n                    this.show();\n                },\n\n                show () {\n                    if (!this.$el.is(':visible')) {\n                        this.$el.show();\n                    }\n                },\n\n                hide () {\n                    this.$el.hide();\n                },\n\n                removeBookmarkListElement (item) {\n                    const list_el = this.el.querySelector('.bookmarks');\n                    const el = _.head(sizzle(`.available-chatroom[data-room-jid=\"${item.get('jid')}\"]`, list_el));\n                    if (el) {\n                        list_el.removeChild(el);\n                    }\n                    if (list_el.childElementCount === 0) {\n                        this.hide();\n                    }\n                },\n\n                toggleBookmarksList (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const $el = $(ev.target);\n                    if ($el.hasClass(\"icon-opened\")) {\n                        this.$('.bookmarks').slideUp('fast');\n                        this.list_model.save({'toggle-state': _converse.CLOSED});\n                        $el.removeClass(\"icon-opened\").addClass(\"icon-closed\");\n                    } else {\n                        $el.removeClass(\"icon-closed\").addClass(\"icon-opened\");\n                        this.$('.bookmarks').slideDown('fast');\n                        this.list_model.save({'toggle-state': _converse.OPENED});\n                    }\n                }\n            });\n\n            const initBookmarks = function () {\n                if (!_converse.allow_bookmarks) {\n                    return;\n                }\n                _converse.bookmarks = new _converse.Bookmarks();\n                _converse.bookmarks.fetchBookmarks().then(function () {\n                    _converse.bookmarksview = new _converse.BookmarksView(\n                        {'model': _converse.bookmarks}\n                    );\n                    _converse.emit('bookmarksInitialized');\n                });\n            };\n\n            Promise.all([\n                _converse.api.waitUntil('chatBoxesFetched'),\n                _converse.api.waitUntil('roomsPanelRendered')\n            ]).then(initBookmarks);\n\n            const afterReconnection = function () {\n                if (!_converse.allow_bookmarks) {\n                    return;\n                }\n                if (_.isUndefined(_converse.bookmarksview)) {\n                    initBookmarks();\n                } else {\n                    _converse.bookmarksview.render();\n                }\n            };\n            _converse.on('reconnected', afterReconnection);\n        }\n    });\n}));\n"]}