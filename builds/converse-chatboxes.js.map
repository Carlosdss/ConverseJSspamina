{"version":3,"sources":["../src/converse-chatboxes.js"],"names":["root","factory","define","converse","env","Backbone","Strophe","b64_sha1","utils","_","plugins","add","overrides","disconnect","_converse","__super__","chatboxviews","closeAllChatBoxes","apply","arguments","logOut","initStatus","onStatusInitialized","chatboxes","onConnected","initialize","api","promises","ChatBoxes","Collection","extend","comparator","model","attrs","options","ChatBox","registerMessageHandler","connection","addHandler","onMessage","bind","onErrorMessage","chatBoxMayBeShown","chatbox","onChatBoxesFetched","collection","each","trigger","emit","browserStorage","BrowserStorage","storage","bare_jid","fetch","success","message","from_jid","getBareJidFromJid","getAttribute","isSameBareJID","getChatBox","createMessage","contact_jid","delay","resource","to_jid","original_stanza","to_resource","getResourceFromJid","is_carbon","isNull","querySelector","NS","CARBONS","filter_by_resource","log","LogLevel","INFO","isHeadlineMessage","forwarded","forwarded_message","forwarded_from","from_bare_jid","from_resource","is_me","msgid","messages","findWhere","isEmpty","incrementUnreadMsgCounter","createChatBox","jid","roster_item","roster","get","roster_info","isUndefined","allow_non_roster_messaging","ERROR","create","assignIn","DEFAULT_IMAGE_TYPE","DEFAULT_IMAGE","toLowerCase","ChatBoxViews","Overview","on","onChatBoxAdded","removeChat","_ensureElement","el","document","createElement","setAttribute","appendChild","innerHTML","setElement","result","item","remove","view","close","response","responseText","showChat","listen","getViewForChatBox","jids","isString","map","push","partial","flow"],"mappings":"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","file":"converse-chatboxes.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n(function (root, factory) {\n    define([\"converse-core\"], factory);\n}(this, function (converse) {\n    \"use strict\";\n    const { Backbone, Strophe, b64_sha1, utils, _ } = converse.env;\n\n    converse.plugins.add('converse-chatboxes', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n\n            disconnect: function () {\n                const { _converse } = this.__super__;\n                _converse.chatboxviews.closeAllChatBoxes();\n                return this.__super__.disconnect.apply(this, arguments);\n            },\n\n            logOut: function () {\n                const { _converse } = this.__super__;\n                _converse.chatboxviews.closeAllChatBoxes();\n                return this.__super__.logOut.apply(this, arguments);\n            },\n\n            initStatus: function () {\n                const { _converse } = this.__super__;\n                _converse.chatboxviews.closeAllChatBoxes();\n                return this.__super__.initStatus.apply(this, arguments);\n            },\n\n            onStatusInitialized: function () {\n                const { _converse } = this.__super__;\n                _converse.chatboxes.onConnected();\n                return this.__super__.onStatusInitialized.apply(this, arguments);\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this;\n\n            _converse.api.promises.add([\n                'chatBoxesFetched',\n                'chatBoxesInitialized'\n            ]);\n\n            _converse.ChatBoxes = Backbone.Collection.extend({\n                comparator: 'time_opened',\n\n                model (attrs, options) {\n                    return new _converse.ChatBox(attrs, options);\n                },\n\n                registerMessageHandler () {\n                    _converse.connection.addHandler(\n                        this.onMessage.bind(this), null, 'message', 'chat'\n                    );\n                    _converse.connection.addHandler(\n                        this.onErrorMessage.bind(this), null, 'message', 'error'\n                    );\n                },\n\n                chatBoxMayBeShown (chatbox) {\n                    return true;\n                },\n\n                onChatBoxesFetched (collection) {\n                    /* Show chat boxes upon receiving them from sessionStorage\n                    *\n                    * This method gets overridden entirely in src/converse-controlbox.js\n                    * if the controlbox plugin is active.\n                    */\n                    collection.each((chatbox) => {\n                        if (this.chatBoxMayBeShown(chatbox)) {\n                            chatbox.trigger('show');\n                        }\n                    });\n                    _converse.emit('chatBoxesFetched');\n                },\n\n                onConnected () {\n                    this.browserStorage = new Backbone.BrowserStorage[_converse.storage](\n                        b64_sha1(`converse.chatboxes-${_converse.bare_jid}`));\n                    this.registerMessageHandler();\n                    this.fetch({\n                        add: true,\n                        success: this.onChatBoxesFetched.bind(this)\n                    });\n                },\n\n                onErrorMessage (message) {\n                    /* Handler method for all incoming error message stanzas\n                    */\n                    // TODO: we can likely just reuse \"onMessage\" below\n                    const from_jid =  Strophe.getBareJidFromJid(message.getAttribute('from'));\n                    if (utils.isSameBareJID(from_jid, _converse.bare_jid)) {\n                        return true;\n                    }\n                    // Get chat box, but only create a new one when the message has a body.\n                    const chatbox = this.getChatBox(from_jid);\n                    if (!chatbox) {\n                        return true;\n                    }\n                    chatbox.createMessage(message, null, message);\n                    return true;\n                },\n\n                onMessage (message) {\n                    /* Handler method for all incoming single-user chat \"message\"\n                    * stanzas.\n                    */\n                    let contact_jid, delay, resource,\n                        from_jid = message.getAttribute('from'),\n                        to_jid = message.getAttribute('to');\n\n                    const original_stanza = message,\n                        to_resource = Strophe.getResourceFromJid(to_jid),\n                        is_carbon = !_.isNull(message.querySelector(`received[xmlns=\"${Strophe.NS.CARBONS}\"]`));\n\n                    if (_converse.filter_by_resource && (to_resource && to_resource !== _converse.resource)) {\n                        _converse.log(\n                            `onMessage: Ignoring incoming message intended for a different resource: ${to_jid}`,\n                            Strophe.LogLevel.INFO\n                        );\n                        return true;\n                    } else if (utils.isHeadlineMessage(message)) {\n                        // XXX: Ideally we wouldn't have to check for headline\n                        // messages, but Prosody sends headline messages with the\n                        // wrong type ('chat'), so we need to filter them out here.\n                        _converse.log(\n                            `onMessage: Ignoring incoming headline message sent with type 'chat' from JID: ${from_jid}`,\n                            Strophe.LogLevel.INFO\n                        );\n                        return true;\n                    }\n                    const forwarded = message.querySelector('forwarded');\n                    if (!_.isNull(forwarded)) {\n                        const forwarded_message = forwarded.querySelector('message');\n                        const forwarded_from = forwarded_message.getAttribute('from');\n                        if (is_carbon && Strophe.getBareJidFromJid(forwarded_from) !== from_jid) {\n                            // Prevent message forging via carbons\n                            //\n                            // https://xmpp.org/extensions/xep-0280.html#security\n                            return true;\n                        }\n                        message = forwarded_message;\n                        delay = forwarded.querySelector('delay');\n                        from_jid = message.getAttribute('from');\n                        to_jid = message.getAttribute('to');\n                    }\n\n                    const from_bare_jid = Strophe.getBareJidFromJid(from_jid),\n                        from_resource = Strophe.getResourceFromJid(from_jid),\n                        is_me = from_bare_jid === _converse.bare_jid;\n\n                    if (is_me) {\n                        // I am the sender, so this must be a forwarded message...\n                        contact_jid = Strophe.getBareJidFromJid(to_jid);\n                        resource = Strophe.getResourceFromJid(to_jid);\n                    } else {\n                        contact_jid = from_bare_jid;\n                        resource = from_resource;\n                    }\n                    // Get chat box, but only create a new one when the message has a body.\n                    const chatbox = this.getChatBox(contact_jid, !_.isNull(message.querySelector('body'))),\n                        msgid = message.getAttribute('id');\n\n                    if (chatbox) {\n                        const messages = msgid && chatbox.messages.findWhere({msgid}) || [];\n                        if (_.isEmpty(messages)) {\n                            // Only create the message when we're sure it's not a\n                            // duplicate\n                            chatbox.incrementUnreadMsgCounter(original_stanza);\n                            chatbox.createMessage(message, delay, original_stanza);\n                        }\n                    }\n                    _converse.emit('message', {'stanza': original_stanza, 'chatbox': chatbox});\n                    return true;\n                },\n\n                createChatBox (jid, attrs) {\n                    /* Creates a chat box\n                    *\n                    * Parameters:\n                    *    (String) jid - The JID of the user for whom a chat box\n                    *      gets created.\n                    *    (Object) attrs - Optional chat box atributes.\n                    */\n                    const bare_jid = Strophe.getBareJidFromJid(jid),\n                        roster_item = _converse.roster.get(bare_jid);\n                    let roster_info = {};\n\n                    if (! _.isUndefined(roster_item)) {\n                        roster_info = {\n                            'fullname': _.isEmpty(roster_item.get('fullname'))? jid: roster_item.get('fullname'),\n                            'image_type': roster_item.get('image_type'),\n                            'image': roster_item.get('image'),\n                            'url': roster_item.get('url'),\n                        };\n                    } else if (!_converse.allow_non_roster_messaging) {\n                        _converse.log(`Could not get roster item for JID ${bare_jid}`+\n                            ' and allow_non_roster_messaging is set to false',\n                            Strophe.LogLevel.ERROR);\n                        return;\n                    }\n                    return this.create(_.assignIn({\n                            'id': bare_jid,\n                            'jid': bare_jid,\n                            'fullname': jid,\n                            'image_type': _converse.DEFAULT_IMAGE_TYPE,\n                            'image': _converse.DEFAULT_IMAGE,\n                            'url': '',\n                        }, roster_info, attrs || {}));\n                },\n\n                getChatBox (jid, create, attrs) {\n                    /* Returns a chat box or optionally return a newly\n                    * created one if one doesn't exist.\n                    *\n                    * Parameters:\n                    *    (String) jid - The JID of the user whose chat box we want\n                    *    (Boolean) create - Should a new chat box be created if none exists?\n                    *    (Object) attrs - Optional chat box atributes.\n                    */\n                    jid = jid.toLowerCase();\n                    let  chatbox = this.get(Strophe.getBareJidFromJid(jid));\n                    if (!chatbox && create) {\n                        chatbox = this.createChatBox(jid, attrs);\n                    }\n                    return chatbox;\n                }\n            });\n\n            _converse.ChatBoxViews = Backbone.Overview.extend({\n\n                initialize () {\n                    this.model.on(\"add\", this.onChatBoxAdded, this);\n                    this.model.on(\"destroy\", this.removeChat, this);\n                },\n\n                _ensureElement () {\n                    /* Override method from backbone.js\n                    * If the #conversejs element doesn't exist, create it.\n                    */\n                    if (!this.el) {\n                        let el = document.querySelector('#conversejs');\n                        if (_.isNull(el)) {\n                            el = document.createElement('div');\n                            el.setAttribute('id', 'conversejs');\n                            // Converse.js expects a <body> tag to be present.\n                            document.querySelector('body').appendChild(el);\n                        }\n                        el.innerHTML = '';\n                        this.setElement(el, false);\n                    } else {\n                        this.setElement(_.result(this, 'el'), false);\n                    }\n                },\n\n                onChatBoxAdded (item) {\n                    // Views aren't created here, since the core code doesn't\n                    // contain any views. Instead, they're created in overrides in\n                    // plugins, such as in converse-chatview.js and converse-muc.js\n                    return this.get(item.get('id'));\n                },\n\n                removeChat (item) {\n                    this.remove(item.get('id'));\n                },\n\n                closeAllChatBoxes () {\n                    /* This method gets overridden in src/converse-controlbox.js if\n                    * the controlbox plugin is active.\n                    */\n                    this.each(function (view) { view.close(); });\n                    return this;\n                },\n\n                chatBoxMayBeShown (chatbox) {\n                    return this.model.chatBoxMayBeShown(chatbox);\n                },\n\n                getChatBox (attrs, create) {\n                    let chatbox  = this.model.get(attrs.jid);\n                    if (!chatbox && create) {\n                        chatbox = this.model.create(attrs, {\n                            'error' (model, response) {\n                                _converse.log(response.responseText);\n                            }\n                        });\n                    }\n                    return chatbox;\n                },\n\n                showChat (attrs) {\n                    /* Find the chat box and show it (if it may be shown).\n                    * If it doesn't exist, create it.\n                    */\n                    const chatbox = this.getChatBox(attrs, true);\n                    if (this.chatBoxMayBeShown(chatbox)) {\n                        chatbox.trigger('show', true);\n                    }\n                    return chatbox;\n                }\n            });\n\n            // BEGIN: Event handlers\n            _converse.api.listen.on('pluginsInitialized', () => {\n                _converse.chatboxes = new _converse.ChatBoxes();\n                _converse.chatboxviews = new _converse.ChatBoxViews({\n                    'model': _converse.chatboxes\n                });\n                _converse.emit('chatBoxesInitialized');\n            });\n\n            _converse.api.listen.on('beforeTearDown', () => {\n                _converse.chatboxes.remove(); // Don't call off(), events won't get re-registered upon reconnect.\n                delete _converse.chatboxes.browserStorage;\n            });\n            // END: Event handlers\n\n            _converse.getViewForChatBox = function (chatbox) {\n                if (!chatbox) { return; }\n                return _converse.chatboxviews.get(chatbox.get('id'));\n            };\n\n            /* We extend the default converse.js API */\n            _.extend(_converse.api, {\n                'chats': {\n                    'open' (jids, attrs) {\n                        if (_.isUndefined(jids)) {\n                            _converse.log(\"chats.open: You need to provide at least one JID\", Strophe.LogLevel.ERROR);\n                            return null;\n                        } else if (_.isString(jids)) {\n                            return _converse.getViewForChatBox(\n                                _converse.chatboxes.getChatBox(jids, true, attrs).trigger('show')\n                            );\n                        }\n                        return _.map(jids, (jid) =>\n                            _converse.getViewForChatBox(\n                                _converse.chatboxes.getChatBox(jid, true, attrs).trigger('show')\n                            )\n                        );\n                    },\n                    'get' (jids) {\n                        if (_.isUndefined(jids)) {\n                            const result = [];\n                            _converse.chatboxes.each(function (chatbox) {\n                                // FIXME: Leaky abstraction from MUC. We need to add a\n                                // base type for chat boxes, and check for that.\n                                if (chatbox.get('type') !== 'chatroom') {\n                                    result.push(_converse.getViewForChatBox(chatbox));\n                                }\n                            });\n                            return result;\n                        } else if (_.isString(jids)) {\n                            return _converse.getViewForChatBox(_converse.chatboxes.getChatBox(jids));\n                        }\n                        return _.map(jids,\n                            _.partial(\n                                _.flow(\n                                    _converse.chatboxes.getChatBox.bind(_converse.chatboxes),\n                                    _converse.getViewForChatBox.bind(_converse)\n                                ), _, true\n                            )\n                        );\n                    }\n                }\n            });\n        }\n    });\n    return converse;\n}));\n"]}