{"version":3,"sources":["../src/converse-chatview.js"],"names":["root","factory","define","$","converse","dummy","emojione","xss","tpl_chatbox","tpl_new_day","tpl_action","tpl_emojis","tpl_message","tpl_help_message","tpl_toolbar","tpl_avatar","tpl_spinner","env","$msg","Backbone","Strophe","_","b64_sha1","moment","utils","KEY","ENTER","FORWARD_SLASH","plugins","add","overrides","registerGlobalEventHandlers","__super__","document","addEventListener","ev","includes","target","classList","slideInAllElements","querySelectorAll","ChatBoxViews","onChatBoxAdded","item","_converse","view","get","ChatBoxView","model","apply","arguments","initialize","__","api","settings","update","imagePathPNG","emojione_image_path","ascii","onWindowStateChanged","data","chatboxviews","each","chatboxview","state","listen","on","EmojiPicker","Model","extend","defaults","id","bare_jid","browserStorage","BrowserStorage","storage","EmojiPickerView","View","className","events","render","setScrollPosition","debounce","emojis_html","toJSON","use_emojione","shortnameToImage","shortnameToUnicode","getEmojisByCategory","getTonedEmojis","shouldBeHidden","el","innerHTML","forEach","bind","restoreScrollPosition","shortname","current_skintone","toned_emojis","current_picker","difference","length","scrollTop","save","chooseSkinTone","preventDefault","stopPropagation","nodeName","parentElement","skintone","getAttribute","trim","chooseCategory","category","tagName","is_chatroom","markScrolled","createEmojiPicker","messages","onMessageAdded","show","hide","sendChatState","onChatStatusChanged","renderAvatar","onStatusChanged","showHelpMessages","sendMessage","fetchMessages","emit","$el","attr","html","show_toolbar","show_textarea","show_send_button","title","unread_msgs","info_close","label_personal_message","label_send","$content","find","renderToolbar","refreshWebkit","showStatusMessage","isUndefined","emojipicker","fetch","emoji_picker_view","afterMessagesFetched","insertIntoDOM","scrollDown","container","querySelector","parentNode","insertBefore","firstChild","clearStatusNotification","remove","showStatusNotification","message","keep_old","permanent","text","addClass","append","addSpinner","isNull","prepend","clearSpinner","children","is","insertDayIndicator","date","day_date","startOf","insert","call","isodate","format","datestring","insertMessage","attrs","flow","renderMessage","showMessage","current_msg_date","time","$first_msg","first_msg_date","last_msg_date","isAfter","isSame","isBefore","msg_dates","map","push","sort","idx","indexOf","$latest_message","insertAfter","getExtraMessageTemplateAttributes","getExtraMessageClasses","delayed","fullname","template","username","match","replace","sender","xmppstatus","isNil","substring","msg_time","msgid","time_format","msg_content","addEmoji","addHyperlinks","filterXSS","renderImageURLs","msgs","type","spinner","msg","handleChatStateMessage","COMPOSING","clear_status_timeout","window","setTimeout","PAUSED","INACTIVE","ACTIVE","GONE","shouldShowOnTextMessage","handleTextMessage","clone","attributes","isNewMessage","set","removeClass","handleErrorMessage","$message","after","clearTimeout","createMessageStanza","from","connection","jid","to","c","t","up","NS","CHATSTATES","messageStanza","send","forward_messages","xmlns","xmns","stamp","Date","getTime","cnode","tree","onMessageSubmitted","authenticated","clearMessages","isEmpty","create","HINTS","setChatState","no_save","chat_state_timeout","TIMEOUTS","onFormSubmitted","textarea","value","focus","keyPressed","keyCode","result","confirm","empty","reset","_clear","insertIntoTextArea","$textbox","existing","val","insertEmoji","toggleEmojiMenu","contains","elements","then","partial","slideToggleElement","toggleCall","chat_status","isString","close","connected","destroy","e","log","LogLevel","ERROR","getToolbarOptions","options","visible_toolbar_buttons","clear","emoji","toolbar","assign","toggle","appendChild","width","chatview_avatar_width","height","chatview_avatar_height","img_src","canvas","getContext","ctx","img","Image","onload","ratio","drawImage","src","before","afterShown","isPersistableModel","_show","css","fadeIn","debouncedShow","hideNewMessagesIndicator","new_msgs_indicator","scrolled","is_at_bottom","innerHeight","scrollHeight","onScrolledDown","safeSave","viewUnreadMessages","_scrollDown","windowState","clearUnreadMsgCounter","debouncedScrollDown","newMessageWillBeHidden"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEC,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACtBC,WAAO,CACC,mBADD,EAEC,eAFD,EAGC,oBAHD,EAIC,UAJD,EAKC,KALD,EAMC,aAND,EAOC,aAPD,EAQC,YARD,EASC,YATD,EAUC,aAVD,EAWC,kBAXD,EAYC,aAZD,EAaC,YAbD,EAcC,aAdD,CAAP,EAeGD,OAfH;AAgBH,CAjBA,aAiBO,UACIE,CADJ,EAEIC,QAFJ,EAGIC,KAHJ,EAIIC,QAJJ,EAKIC,GALJ,EAMIC,WANJ,EAOIC,WAPJ,EAQIC,UARJ,EASIC,UATJ,EAUIC,WAVJ,EAWIC,gBAXJ,EAYIC,WAZJ,EAaIC,UAbJ,EAcIC,WAdJ,EAeF;AACF;;AADE,wBAE8DZ,SAASa,GAFvE;AAAA,QAEMC,IAFN,iBAEMA,IAFN;AAAA,QAEYC,QAFZ,iBAEYA,QAFZ;AAAA,QAEsBC,OAFtB,iBAEsBA,OAFtB;AAAA,QAE+BC,CAF/B,iBAE+BA,CAF/B;AAAA,QAEkCC,QAFlC,iBAEkCA,QAFlC;AAAA,QAE4CC,MAF5C,iBAE4CA,MAF5C;AAAA,QAEoDC,KAFpD,iBAEoDA,KAFpD;;;AAIF,QAAMC,MAAM;AACRC,eAAO,EADC;AAERC,uBAAe;AAFP,KAAZ;;AAKAvB,aAASwB,OAAT,CAAiBC,GAAjB,CAAqB,mBAArB,EAA0C;;AAEtCC,mBAAW;AACP;AACA;AACA;AACA;AACA;AACA;AACAC,yCAA6B,uCAAY;AACrC,qBAAKC,SAAL,CAAeD,2BAAf;AACAE,yBAASC,gBAAT,CACI,OADJ,EACa,UAAUC,EAAV,EAAc;AACnB,wBAAId,EAAEe,QAAF,CAAWD,GAAGE,MAAH,CAAUC,SAArB,EAAgC,qBAAhC,KACAjB,EAAEe,QAAF,CAAWD,GAAGE,MAAH,CAAUC,SAArB,EAAgC,cAAhC,CADJ,EACqD;AACjD;AACH;AACDd,0BAAMe,kBAAN,CACIN,SAASO,gBAAT,CAA0B,eAA1B,CADJ;AAGH,iBATL;AAWH,aApBM;;AAsBPC,0BAAc;AACVC,8BADU,0BACMC,IADN,EACY;AAAA,wBACVC,SADU,GACI,KAAKZ,SADT,CACVY,SADU;;AAElB,wBAAIC,OAAO,KAAKC,GAAL,CAASH,KAAKG,GAAL,CAAS,IAAT,CAAT,CAAX;AACA,wBAAI,CAACD,IAAL,EAAW;AACPA,+BAAO,IAAID,UAAUG,WAAd,CAA0B,EAACC,OAAOL,IAAR,EAA1B,CAAP;AACA,6BAAKd,GAAL,CAASc,KAAKG,GAAL,CAAS,IAAT,CAAT,EAAyBD,IAAzB;AACA,+BAAOA,IAAP;AACH,qBAJD,MAIO;AACH,+BAAO,KAAKb,SAAL,CAAeU,cAAf,CAA8BO,KAA9B,CAAoC,IAApC,EAA0CC,SAA1C,CAAP;AACH;AACJ;AAXS;AAtBP,SAF2B;;AAuCtCC,kBAvCsC,wBAuCxB;AACV;;;AAGM,gBAAEP,SAAF,GAAgB,IAAhB,CAAEA,SAAF;AAAA,gBACAQ,EADA,GACOR,SADP,CACAQ,EADA;;;AAGNR,sBAAUS,GAAV,CAAcC,QAAd,CAAuBC,MAAvB,CAA8B;AAC1B,gCAAgB,IADU;AAE1B,uCAAuBjD,SAASkD,YAFN;AAG1B,0CAA0B,EAHA;AAI1B,yCAAyB,EAJC;AAK1B,gCAAgB,IALU;AAM1B,+BAAe,OANW;AAO1B,2CAA2B;AACvB,6BAAS,IADc;AAEvB,4BAAQ,KAFe;AAGvB,6BAAS;AAHc;AAPD,aAA9B;AAaAlD,qBAASkD,YAAT,GAAwBZ,UAAUa,mBAAlC;AACAnD,qBAASoD,KAAT,GAAiB,IAAjB;;AAEA,qBAASC,oBAAT,CAA+BC,IAA/B,EAAqC;AACjChB,0BAAUiB,YAAV,CAAuBC,IAAvB,CAA4B,UAAUC,WAAV,EAAuB;AAC/CA,gCAAYJ,oBAAZ,CAAiCC,KAAKI,KAAtC;AACH,iBAFD;AAGH;AACDpB,sBAAUS,GAAV,CAAcY,MAAd,CAAqBC,EAArB,CAAwB,oBAAxB,EAA8CP,oBAA9C;;AAEAf,sBAAUuB,WAAV,GAAwBhD,SAASiD,KAAT,CAAeC,MAAf,CAAsB;AAC1CC,0BAAU;AACN,wCAAoB,QADd;AAEN,wCAAoB,EAFd;AAGN,uCAAmB;AAHb,iBADgC;AAM1CnB,0BAN0C,wBAM5B;AACV,wBAAMoB,yBAAuB3B,UAAU4B,QAAvC;AACA,yBAAKD,EAAL,GAAUA,EAAV;AACA,yBAAKE,cAAL,GAAsB,IAAItD,SAASuD,cAAT,CAAwB9B,UAAU+B,OAAlC,CAAJ,CAA+CJ,EAA/C,CAAtB;AACH;AAVyC,aAAtB,CAAxB;;AAaA3B,sBAAUgC,eAAV,GAA4BzD,SAAS0D,IAAT,CAAcR,MAAd,CAAqB;AAC7CS,2BAAW,+CADkC;AAE7CC,wBAAQ;AACJ,sEAAkD,gBAD9C;AAEJ,sEAAkD;AAF9C,iBAFqC;;AAO7C5B,0BAP6C,wBAO/B;AACV,yBAAKH,KAAL,CAAWkB,EAAX,CAAc,yBAAd,EAAyC,KAAKc,MAA9C,EAAsD,IAAtD;AACA,yBAAKhC,KAAL,CAAWkB,EAAX,CAAc,yBAAd,EAAyC,KAAKc,MAA9C,EAAsD,IAAtD;AACA,yBAAKC,iBAAL,GAAyB5D,EAAE6D,QAAF,CAAW,KAAKD,iBAAhB,EAAmC,EAAnC,CAAzB;AACH,iBAX4C;AAa7CD,sBAb6C,oBAanC;AAAA;;AACN,wBAAIG,cAAcxE,WACdU,EAAEgD,MAAF,CACI,KAAKrB,KAAL,CAAWoC,MAAX,EADJ,EACyB;AACjB,qCAAaxC,UAAUyC,YAAV,GAAyB/E,SAASgF,gBAAlC,GAAqDhF,SAASiF,kBAD1D;AAEjB,8CAAsB/D,MAAMgE,mBAAN,CAA0B5C,SAA1B,EAAqCtC,QAArC,CAFL;AAGjB,wCAAgBkB,MAAMiE,cAAN,CAAqB7C,SAArB,CAHC;AAIjB,qCAAa,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,CAJI;AAKjB,0CAAkB,KAAK8C;AALN,qBADzB,CADc,CAAlB;AAUA,yBAAKC,EAAL,CAAQC,SAAR,GAAoBT,WAApB;AACA9D,sBAAEwE,OAAF,CAAU,KAAKF,EAAL,CAAQnD,gBAAR,CAAyB,eAAzB,CAAV,EAAqD,UAACmD,EAAD,EAAQ;AACzDA,2BAAGzD,gBAAH,CAAoB,QAApB,EAA8B,MAAK+C,iBAAL,CAAuBa,IAAvB,OAA9B;AACH,qBAFD;AAGA,yBAAKC,qBAAL;AACA,2BAAO,IAAP;AACH,iBA9B4C;AAgC7CL,8BAhC6C,0BAgC7BM,SAhC6B,EAgClBC,gBAhCkB,EAgCAC,YAhCA,EAgCc;AACvD;;;;AAIA,wBAAI7E,EAAEe,QAAF,CAAW4D,SAAX,EAAsB,OAAtB,CAAJ,EAAoC;AAChC,4BAAI,CAACC,gBAAD,IAAqB,CAAC5E,EAAEe,QAAF,CAAW4D,SAAX,EAAsBC,gBAAtB,CAA1B,EAAmE;AAC/D,mCAAO,IAAP;AACH;AACJ,qBAJD,MAIO;AACH,4BAAIA,oBAAoB5E,EAAEe,QAAF,CAAW8D,YAAX,EAAyBF,SAAzB,CAAxB,EAA6D;AACzD,mCAAO,IAAP;AACH;AACJ;AACD,2BAAO,KAAP;AACH,iBA/C4C;AAiD7CD,qCAjD6C,mCAiDpB;AACrB,wBAAMI,iBAAiB9E,EAAE+E,UAAF,CACnB,KAAKT,EAAL,CAAQnD,gBAAR,CAAyB,eAAzB,CADmB,EAEnB,KAAKmD,EAAL,CAAQnD,gBAAR,CAAyB,sBAAzB,CAFmB,CAAvB;AAIA,wBAAI2D,eAAeE,MAAf,KAA0B,CAA1B,IAA+B,KAAKrD,KAAL,CAAWF,GAAX,CAAe,iBAAf,CAAnC,EAAsE;AAClEqD,uCAAe,CAAf,EAAkBG,SAAlB,GAA8B,KAAKtD,KAAL,CAAWF,GAAX,CAAe,iBAAf,CAA9B;AACH;AACJ,iBAzD4C;AA2D7CmC,iCA3D6C,6BA2D1B9C,EA3D0B,EA2DtB;AACnB,yBAAKa,KAAL,CAAWuD,IAAX,CAAgB,iBAAhB,EAAmCpE,GAAGE,MAAH,CAAUiE,SAA7C;AACH,iBA7D4C;AA+D7CE,8BA/D6C,0BA+D7BrE,EA/D6B,EA+DzB;AAChBA,uBAAGsE,cAAH;AACAtE,uBAAGuE,eAAH;AACA,wBAAMrE,SAASF,GAAGE,MAAH,CAAUsE,QAAV,KAAuB,KAAvB,GACXxE,GAAGE,MAAH,CAAUuE,aADC,GACezE,GAAGE,MADjC;AAEA,wBAAMwE,WAAWxE,OAAOyE,YAAP,CAAoB,eAApB,EAAqCC,IAArC,EAAjB;AACA,wBAAI,KAAK/D,KAAL,CAAWF,GAAX,CAAe,kBAAf,MAAuC+D,QAA3C,EAAqD;AACjD,6BAAK7D,KAAL,CAAWuD,IAAX,CAAgB,EAAC,oBAAoB,EAArB,EAAhB;AACH,qBAFD,MAEO;AACH,6BAAKvD,KAAL,CAAWuD,IAAX,CAAgB,EAAC,oBAAoBM,QAArB,EAAhB;AACH;AACJ,iBA1E4C;AA4E7CG,8BA5E6C,0BA4E7B7E,EA5E6B,EA4EzB;AAChBA,uBAAGsE,cAAH;AACAtE,uBAAGuE,eAAH;AACA,wBAAMrE,SAASF,GAAGE,MAAH,CAAUsE,QAAV,KAAuB,KAAvB,GACXxE,GAAGE,MAAH,CAAUuE,aADC,GACezE,GAAGE,MADjC;AAEA,wBAAM4E,WAAW5E,OAAOyE,YAAP,CAAoB,eAApB,EAAqCC,IAArC,EAAjB;AACA,yBAAK/D,KAAL,CAAWuD,IAAX,CAAgB;AACZ,4CAAoBU,QADR;AAEZ,2CAAmB;AAFP,qBAAhB;AAIH;AAtF4C,aAArB,CAA5B;;AAyFArE,sBAAUG,WAAV,GAAwB5B,SAAS0D,IAAT,CAAcR,MAAd,CAAqB;AACzCgC,wBAAQ,GADiC;AAEzCa,yBAAS,KAFgC;AAGzCpC,2BAAW,gBAH8B;AAIzCqC,6BAAa,KAJ4B,EAIpB;;AAErBpC,wBAAQ;AACJ,mDAA+B,OAD3B;AAEJ,+CAA2B,YAFvB;AAGJ,0CAAsB,iBAHlB;AAIJ,4CAAwB,iBAJpB;AAKJ,+DAA2C,aALvC;AAMJ,2CAAuB,eANnB;AAOJ,0CAAsB,YAPlB;AAQJ,iDAA6B;AARzB,iBANiC;;AAiBzC5B,0BAjByC,wBAiB3B;AACV,yBAAKiE,YAAL,GAAoB/F,EAAE6D,QAAF,CAAW,KAAKkC,YAAhB,EAA8B,GAA9B,CAApB;;AAEA,yBAAKC,iBAAL;AACA,yBAAKrE,KAAL,CAAWsE,QAAX,CAAoBpD,EAApB,CAAuB,KAAvB,EAA8B,KAAKqD,cAAnC,EAAmD,IAAnD;AACA,yBAAKvE,KAAL,CAAWkB,EAAX,CAAc,MAAd,EAAsB,KAAKsD,IAA3B,EAAiC,IAAjC;AACA,yBAAKxE,KAAL,CAAWkB,EAAX,CAAc,SAAd,EAAyB,KAAKuD,IAA9B,EAAoC,IAApC;AACA;AACA,yBAAKzE,KAAL,CAAWkB,EAAX,CAAc,mBAAd,EAAmC,KAAKwD,aAAxC,EAAuD,IAAvD;AACA,yBAAK1E,KAAL,CAAWkB,EAAX,CAAc,oBAAd,EAAoC,KAAKyD,mBAAzC,EAA8D,IAA9D;AACA,yBAAK3E,KAAL,CAAWkB,EAAX,CAAc,cAAd,EAA8B,KAAK0D,YAAnC,EAAiD,IAAjD;AACA,yBAAK5E,KAAL,CAAWkB,EAAX,CAAc,eAAd,EAA+B,KAAK2D,eAApC,EAAqD,IAArD;AACA,yBAAK7E,KAAL,CAAWkB,EAAX,CAAc,kBAAd,EAAkC,KAAK4D,gBAAvC,EAAyD,IAAzD;AACA,yBAAK9E,KAAL,CAAWkB,EAAX,CAAc,aAAd,EAA6B,KAAK6D,WAAlC,EAA+C,IAA/C;AACA,yBAAK/C,MAAL,GAAcgD,aAAd;AACApF,8BAAUqF,IAAV,CAAe,oBAAf,EAAqC,IAArC;AACH,iBAjCwC;AAmCzCjD,sBAnCyC,oBAmC/B;AACN,yBAAKkD,GAAL,CAASC,IAAT,CAAc,IAAd,EAAoB,KAAKnF,KAAL,CAAWF,GAAX,CAAe,QAAf,CAApB,EACKsF,IADL,CACU5H,YACEa,EAAEgD,MAAF,CAAS,KAAKrB,KAAL,CAAWoC,MAAX,EAAT,EAA8B;AACtBiD,sCAAczF,UAAUyF,YADF;AAEtBC,uCAAe,IAFO;AAGtBC,0CAAkB3F,UAAU2F,gBAHN;AAItBC,+BAAO,KAAKxF,KAAL,CAAWF,GAAX,CAAe,UAAf,CAJe;AAKtB2F,qCAAarF,GAAG,0BAAH,CALS;AAMtBsF,oCAAYtF,GAAG,qBAAH,CANU;AAOtBuF,gDAAwBvF,GAAG,kBAAH,CAPF;AAQtBwF,oCAAYxF,GAAG,MAAH;AARU,qBAA9B,CADF,CADV;AAeA,yBAAKyF,QAAL,GAAgB,KAAKX,GAAL,CAASY,IAAT,CAAc,eAAd,CAAhB;AACA,yBAAKC,aAAL,GAAqBnB,YAArB;AACAhF,8BAAUqF,IAAV,CAAe,eAAf,EAAgC,IAAhC;AACAzG,0BAAMwH,aAAN;AACA,2BAAO,KAAKC,iBAAL,EAAP;AACH,iBAxDwC;AA0DzC5B,iCA1DyC,+BA0DpB;AACjB,wBAAIhG,EAAE6H,WAAF,CAActG,UAAUuG,WAAxB,CAAJ,EAA0C;AACtCvG,kCAAUuG,WAAV,GAAwB,IAAIvG,UAAUuB,WAAd,EAAxB;AACAvB,kCAAUuG,WAAV,CAAsBC,KAAtB;AACH;AACD,yBAAKC,iBAAL,GAAyB,IAAIzG,UAAUgC,eAAd,CAA8B;AACnD,iCAAShC,UAAUuG;AADgC,qBAA9B,CAAzB;AAGH,iBAlEwC;AAoEzCG,oCApEyC,kCAoEjB;AACpB,yBAAKC,aAAL;AACA,yBAAKC,UAAL;AACA;AACA;AACA,yBAAKX,QAAL,CAAc3E,EAAd,CAAiB,QAAjB,EAA2B,KAAKkD,YAAL,CAAkBtB,IAAlB,CAAuB,IAAvB,CAA3B;AACAlD,8BAAUqF,IAAV,CAAe,sBAAf,EAAuC,IAAvC;AACH,iBA3EwC;AA6EzCD,6BA7EyC,2BA6ExB;AACb,yBAAKhF,KAAL,CAAWsE,QAAX,CAAoB8B,KAApB,CAA0B;AACtB,+BAAO,IADe;AAEtB,mCAAW,KAAKE,oBAAL,CAA0BxD,IAA1B,CAA+B,IAA/B,CAFW;AAGtB,iCAAS,KAAKwD,oBAAL,CAA0BxD,IAA1B,CAA+B,IAA/B;AAHa,qBAA1B;AAKA,2BAAO,IAAP;AACH,iBApFwC;AAsFzCyD,6BAtFyC,2BAsFxB;AACb;;;;AAIA,wBAAME,YAAYxH,SAASyH,aAAT,CAAuB,aAAvB,CAAlB;AACA,wBAAI,KAAK/D,EAAL,CAAQgE,UAAR,KAAuBF,SAA3B,EAAsC;AAClCA,kCAAUG,YAAV,CAAuB,KAAKjE,EAA5B,EAAgC8D,UAAUI,UAA1C;AACH;AACD,2BAAO,IAAP;AACH,iBAhGwC;AAkGzCC,uCAlGyC,qCAkGd;AACvB,yBAAKjB,QAAL,CAAcC,IAAd,CAAmB,gBAAnB,EAAqCiB,MAArC;AACH,iBApGwC;AAsGzCC,sCAtGyC,kCAsGjBC,OAtGiB,EAsGRC,QAtGQ,EAsGEC,SAtGF,EAsGa;AAClD,wBAAI,CAACD,QAAL,EAAe;AACX,6BAAKJ,uBAAL;AACH;AACD,wBAAM5B,MAAM/H,EAAE,+BAAF,EAAmCiK,IAAnC,CAAwCH,OAAxC,CAAZ;AACA,wBAAI,CAACE,SAAL,EAAgB;AACZjC,4BAAImC,QAAJ,CAAa,YAAb;AACH;AACD,yBAAKxB,QAAL,CAAcyB,MAAd,CAAqBpC,GAArB;AACA,yBAAKsB,UAAL;AACH,iBAhHwC;AAkHzCe,0BAlHyC,wBAkH3B;AACV,wBAAIlJ,EAAEmJ,MAAF,CAAS,KAAK7E,EAAL,CAAQ+D,aAAR,CAAsB,UAAtB,CAAT,CAAJ,EAAiD;AAC7C,6BAAKb,QAAL,CAAc4B,OAAd,CAAsBzJ,WAAtB;AACH;AACJ,iBAtHwC;AAwHzC0J,4BAxHyC,0BAwHzB;AACZ,wBAAI,KAAK7B,QAAL,CAAc8B,QAAd,CAAuB,QAAvB,EAAiCC,EAAjC,CAAoC,cAApC,CAAJ,EAAyD;AACrD,6BAAK/B,QAAL,CAAc8B,QAAd,CAAuB,QAAvB,EAAiCZ,MAAjC;AACH;AACJ,iBA5HwC;AA8HzCc,kCA9HyC,8BA8HrBC,IA9HqB,EA8HfL,OA9He,EA8HN;AAC/B;;;;;;;AAOA,wBAAMM,WAAWxJ,OAAOuJ,IAAP,EAAaE,OAAb,CAAqB,KAArB,CAAjB;AACA,wBAAMC,SAASR,UAAU,KAAK5B,QAAL,CAAc4B,OAAxB,GAAiC,KAAK5B,QAAL,CAAcyB,MAA9D;AACAW,2BAAOC,IAAP,CAAY,KAAKrC,QAAjB,EAA2BpI,YAAY;AACnC0K,iCAASJ,SAASK,MAAT,EAD0B;AAEnCC,oCAAYN,SAASK,MAAT,CAAgB,kBAAhB;AAFuB,qBAAZ,CAA3B;AAIH,iBA5IwC;AA8IzCE,6BA9IyC,yBA8I1BC,KA9I0B,EA8InBd,OA9ImB,EA8IV;AAAA;;AAC3B;;;;;;;AAOA,wBAAMQ,SAASR,UAAU,KAAK5B,QAAL,CAAc4B,OAAxB,GAAkC,KAAK5B,QAAL,CAAcyB,MAA/D;AACAjJ,sBAAEmK,IAAF,CAAO,UAACtD,GAAD,EAAS;AACR+C,+BAAOC,IAAP,CAAY,OAAKrC,QAAjB,EAA2BX,GAA3B;AACA,+BAAOA,GAAP;AACH,qBAHL,EAII,KAAKsB,UAAL,CAAgB1D,IAAhB,CAAqB,IAArB,CAJJ,EAKE,KAAK2F,aAAL,CAAmBF,KAAnB,CALF;AAMH,iBA7JwC;AA+JzCG,2BA/JyC,uBA+J5BH,KA/J4B,EA+JrB;AAChB;;;;;;;;;;;AAWA,wBAAII,mBAAmBpK,OAAOgK,MAAMK,IAAb,KAAsBrK,MAA7C;AACA,wBAAMsK,aAAa,KAAKhD,QAAL,CAAcC,IAAd,CAAmB,qBAAnB,CAAnB;AAAA,wBACMgD,iBAAiBD,WAAWjI,IAAX,CAAgB,SAAhB,CADvB;;AAGA,wBAAI,CAACkI,cAAL,EAAqB;AACjB;AACA;AACA,6BAAKjB,kBAAL,CAAwBc,gBAAxB;AACA,6BAAKL,aAAL,CAAmBC,KAAnB;AACA;AACH;;AAED,wBAAMQ,gBAAgB,KAAKlD,QAAL,CAAcC,IAAd,CAAmB,oBAAnB,EAAyClF,IAAzC,CAA8C,SAA9C,CAAtB;AACA,wBAAI+H,iBAAiBK,OAAjB,CAAyBD,aAAzB,KACIJ,iBAAiBM,MAAjB,CAAwBF,aAAxB,CADR,EACgD;AAC5C;AACA,4BAAIJ,iBAAiBK,OAAjB,CAAyBD,aAAzB,EAAwC,KAAxC,CAAJ,EAAoD;AAChD;AACA,iCAAKlB,kBAAL,CAAwBc,gBAAxB;AACH;AACD,6BAAKL,aAAL,CAAmBC,KAAnB;AACA;AACH;AACD,wBAAII,iBAAiBO,QAAjB,CAA0BJ,cAA1B,KACIH,iBAAiBM,MAAjB,CAAwBH,cAAxB,CADR,EACiD;AAC7C;AACA;AACA;AACA;AACA,6BAAKR,aAAL,CAAmBC,KAAnB,EAA0B,SAA1B;AACA,4BAAII,iBAAiBO,QAAjB,CAA0BJ,cAA1B,EAA0C,KAA1C,CAAJ,EAAsD;AAClD;AACA;AACA,iCAAKjB,kBAAL,CAAwBc,gBAAxB,EAA0C,SAA1C;AACH;AACD;AACH;AACD;AACAA,uCAAmBA,iBAAiBP,MAAjB,EAAnB;AACA,wBAAMe,YAAY9K,EAAE+K,GAAF,CACd,KAAKvD,QAAL,CAAcC,IAAd,CAAmB,eAAnB,CADc,EAEd,UAACnD,EAAD;AAAA,+BAAQxF,EAAEwF,EAAF,EAAM/B,IAAN,CAAW,SAAX,CAAR;AAAA,qBAFc,CAAlB;AAIAuI,8BAAUE,IAAV,CAAeV,gBAAf;AACAQ,8BAAUG,IAAV;;AAEA,wBAAMC,MAAMJ,UAAUK,OAAV,CAAkBb,gBAAlB,IAAoC,CAAhD;AACA,wBAAMc,kBAAkB,KAAK5D,QAAL,CAAcC,IAAd,mCAAkDqD,UAAUI,GAAV,CAAlD,cAAxB;AACAlL,sBAAEmK,IAAF,CAAO,UAACtD,GAAD,EAAS;AACRA,4BAAIwE,WAAJ,CAAgBD,eAAhB;AACA,+BAAOvE,GAAP;AACH,qBAHL,EAII,KAAKsB,UAAL,CAAgB1D,IAAhB,CAAqB,IAArB,CAJJ,EAKE,KAAK2F,aAAL,CAAmBF,KAAnB,CALF;AAMH,iBAjOwC;AAmOzCoB,iDAnOyC,+CAmOJ;AACjC;;;;;;AAMA,2BAAO,EAAP;AACH,iBA3OwC;AA6OzCC,sCA7OyC,kCA6OjBrB,KA7OiB,EA6OV;AAC3B,2BAAOA,MAAMsB,OAAN,IAAiB,SAAjB,IAA8B,EAArC;AACH,iBA/OwC;AAiPzCpB,6BAjPyC,yBAiP1BF,KAjP0B,EAiPnB;AAClB;;;;;;;;AAQA,wBAAInB,OAAOmB,MAAMtB,OAAjB;AAAA,wBACI6C,WAAW,KAAK9J,KAAL,CAAWF,GAAX,CAAe,UAAf,KAA8ByI,MAAMuB,QADnD;AAAA,wBAEIC,iBAFJ;AAAA,wBAEcC,iBAFd;;AAIA,wBAAMC,QAAQ7C,KAAK6C,KAAL,CAAW,qBAAX,CAAd;AACA,wBAAKA,KAAD,IAAYA,MAAM,CAAN,MAAa,IAA7B,EAAoC;AAChC7C,+BAAOA,KAAK8C,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAP;AACAH,mCAAWrM,UAAX;AACA,4BAAI6K,MAAM4B,MAAN,KAAiB,IAArB,EAA2B;AACvBL,uCAAWlK,UAAUwK,UAAV,CAAqBtK,GAArB,CAAyB,UAAzB,KAAwCyI,MAAMuB,QAAzD;AACAE,uCAAW3L,EAAEgM,KAAF,CAAQP,QAAR,IAAmBlK,UAAU4B,QAA7B,GAAuCsI,QAAlD;AACH,yBAHD,MAGO;AACHE,uCAAWzB,MAAMuB,QAAjB;AACH;AACJ,qBATD,MASQ;AACJC,mCAAWnM,WAAX;AACAoM,mCAAWzB,MAAM4B,MAAN,KAAiB,IAAjB,IAAyB/J,GAAG,IAAH,CAAzB,IAAqC0J,QAAhD;AACH;AACD,yBAAKjE,QAAL,CAAcC,IAAd,CAAmB,gBAAnB,EAAqCiB,MAArC;;AAEA,wBAAIK,KAAK/D,MAAL,GAAc,IAAlB,EAAwB;AACpB+D,+BAAOA,KAAKkD,SAAL,CAAe,CAAf,EAAkB,EAAlB,IAAwB,KAA/B;AACA,6BAAKtD,sBAAL,CACI5G,GAAG,4CACA,uEADA,GAEA,4BAFH,CADJ,EAII,IAJJ,EAIU,IAJV;AAKH;AACD,wBAAMmK,WAAWhM,OAAOgK,MAAMK,IAAb,KAAsBrK,MAAvC;AACA,wBAAML,OAAOf,EAAE4M,SACX1L,EAAEgD,MAAF,CAAS,KAAKsI,iCAAL,CAAuCpB,KAAvC,CAAT,EAAwD;AACpD,iCAASA,MAAMiC,KADqC;AAEpD,kCAAUjC,MAAM4B,MAFoC;AAGpD,gCAAQI,SAASnC,MAAT,CAAgBxI,UAAU6K,WAA1B,CAH4C;AAIpD,mCAAWF,SAASnC,MAAT,EAJyC;AAKpD,oCAAY4B,QALwC;AAMpD,yCAAiB,KAAKJ,sBAAL,CAA4BrB,KAA5B;AANmC,qBAAxD,CADW,CAAF,CAAb;AAUA,wBAAMmC,cAAcxM,KAAK,CAAL,EAAQwI,aAAR,CAAsB,mBAAtB,CAApB;AACAgE,gCAAY9H,SAAZ,GAAwBpE,MAAMmM,QAAN,CACpB/K,SADoB,EACTtC,QADS,EACCkB,MAAMoM,aAAN,CAAoBrN,IAAIsN,SAAJ,CAAczD,IAAd,EAAoB,EAAC,aAAa,EAAd,EAApB,CAApB,CADD,CAAxB;AAGA5I,0BAAMsM,eAAN,CAAsBJ,WAAtB;AACA,2BAAOxM,IAAP;AACH,iBAvSwC;AAySzC4G,gCAzSyC,4BAySvBiG,IAzSuB,EAySjBC,IAzSiB,EAySXC,OAzSW,EAySF;AAAA;;AACnC5M,sBAAEyC,IAAF,CAAOiK,IAAP,EAAa,UAACG,GAAD,EAAS;AAClB,+BAAKrF,QAAL,CAAcyB,MAAd,CAAqBnK,EAAEU,iBAAiB;AACpC,oCAAQmN,QAAM,MADsB;AAEpC,uCAAWD;AAFyB,yBAAjB,CAAF,CAArB;AAIH,qBALD;AAMA,wBAAIE,YAAY,IAAhB,EAAsB;AAClB,6BAAKpF,QAAL,CAAcyB,MAAd,CAAqBtJ,WAArB;AACH,qBAFD,MAEO,IAAIiN,YAAY,KAAhB,EAAuB;AAC1B,6BAAKpF,QAAL,CAAcC,IAAd,CAAmB,cAAnB,EAAmCiB,MAAnC;AACH;AACD,2BAAO,KAAKP,UAAL,EAAP;AACH,iBAtTwC;AAwTzC2E,sCAxTyC,kCAwTjBlE,OAxTiB,EAwTR;AAC7B,wBAAIA,QAAQnH,GAAR,CAAY,YAAZ,MAA8BF,UAAUwL,SAA5C,EAAuD;AACnD,4BAAInE,QAAQnH,GAAR,CAAY,QAAZ,MAA0B,IAA9B,EAAoC;AAChC,iCAAKkH,sBAAL,CAA4B5G,GAAG,4BAAH,CAA5B;AACH,yBAFD,MAEO;AACH,iCAAK4G,sBAAL,CAA4BC,QAAQnH,GAAR,CAAY,UAAZ,IAAwB,GAAxB,GAA4BM,GAAG,WAAH,CAAxD;AACH;AACD,6BAAKiL,oBAAL,GAA4BC,OAAOC,UAAP,CAAkB,KAAKzE,uBAAL,CAA6BhE,IAA7B,CAAkC,IAAlC,CAAlB,EAA2D,KAA3D,CAA5B;AACH,qBAPD,MAOO,IAAImE,QAAQnH,GAAR,CAAY,YAAZ,MAA8BF,UAAU4L,MAA5C,EAAoD;AACvD,4BAAIvE,QAAQnH,GAAR,CAAY,QAAZ,MAA0B,IAA9B,EAAoC;AAChC,iCAAKkH,sBAAL,CAA4B5G,GAAG,oCAAH,CAA5B;AACH,yBAFD,MAEO;AACH,iCAAK4G,sBAAL,CAA4BC,QAAQnH,GAAR,CAAY,UAAZ,IAAwB,GAAxB,GAA4BM,GAAG,oBAAH,CAAxD;AACH;AACJ,qBANM,MAMA,IAAI/B,EAAEe,QAAF,CAAW,CAACQ,UAAU6L,QAAX,EAAqB7L,UAAU8L,MAA/B,CAAX,EAAmDzE,QAAQnH,GAAR,CAAY,YAAZ,CAAnD,CAAJ,EAAmF;AACtF,6BAAK+F,QAAL,CAAcC,IAAd,CAAmB,gBAAnB,EAAqCiB,MAArC;AACH,qBAFM,MAEA,IAAIE,QAAQnH,GAAR,CAAY,YAAZ,MAA8BF,UAAU+L,IAA5C,EAAkD;AACrD,6BAAK3E,sBAAL,CAA4BC,QAAQnH,GAAR,CAAY,UAAZ,IAAwB,GAAxB,GAA4BM,GAAG,eAAH,CAAxD;AACH;AACJ,iBA3UwC;AA6UzCwL,uCA7UyC,qCA6Ud;AACvB,2BAAO,CAAC,KAAK1G,GAAL,CAAS0C,EAAT,CAAY,UAAZ,CAAR;AACH,iBA/UwC;AAiVzCiE,iCAjVyC,6BAiVtB5E,OAjVsB,EAiVb;AACxB,yBAAKyB,WAAL,CAAiBrK,EAAEyN,KAAF,CAAQ7E,QAAQ8E,UAAhB,CAAjB;AACA,wBAAIvN,MAAMwN,YAAN,CAAmB/E,OAAnB,KAA+BA,QAAQnH,GAAR,CAAY,QAAZ,MAA0B,IAA7D,EAAmE;AAC/D;AACA;AACA;AACA;AACA,6BAAKE,KAAL,CAAWiM,GAAX,CAAe,UAAf,EAA2B,KAA3B;AACH,qBAND,MAMO;AACH,4BAAIzN,MAAMwN,YAAN,CAAmB/E,OAAnB,KAA+B,KAAKjH,KAAL,CAAWF,GAAX,CAAe,UAAf,EAA2B,IAA3B,CAAnC,EAAqE;AACjE,iCAAKoF,GAAL,CAASY,IAAT,CAAc,qBAAd,EAAqCoG,WAArC,CAAiD,QAAjD;AACH;AACJ;AACD,wBAAI,KAAKN,uBAAL,EAAJ,EAAoC;AAChC,6BAAKpH,IAAL;AACH,qBAFD,MAEO;AACH,6BAAKgC,UAAL;AACH;AACJ,iBAnWwC;AAqWzC2F,kCArWyC,8BAqWrBlF,OArWqB,EAqWZ;AACzB,wBAAMmF,WAAWjP,mBAAiB8J,QAAQnH,GAAR,CAAY,OAAZ,CAAjB,OAAjB;AACA,wBAAIsM,SAAS/I,MAAb,EAAqB;AACjB+I,iCAASC,KAAT,CAAelP,EAAE,0CAAF,EAA8CiK,IAA9C,CAAmDH,QAAQnH,GAAR,CAAY,SAAZ,CAAnD,CAAf;AACA,6BAAK0G,UAAL;AACH;AACJ,iBA3WwC;AA6WzCjC,8BA7WyC,0BA6WzB0C,OA7WyB,EA6WhB;AACrB;;;;;AAKA,wBAAI,CAAC5I,EAAE6H,WAAF,CAAc,KAAKmF,oBAAnB,CAAL,EAA+C;AAC3CC,+BAAOgB,YAAP,CAAoB,KAAKjB,oBAAzB;AACA,+BAAO,KAAKA,oBAAZ;AACH;AACD,wBAAIpE,QAAQnH,GAAR,CAAY,MAAZ,MAAwB,OAA5B,EAAqC;AACjC,6BAAKqM,kBAAL,CAAwBlF,OAAxB;AACH,qBAFD,MAEO,IAAI,CAACA,QAAQnH,GAAR,CAAY,SAAZ,CAAL,EAA6B;AAChC,6BAAKqL,sBAAL,CAA4BlE,OAA5B;AACH,qBAFM,MAEA;AACH,6BAAK4E,iBAAL,CAAuB5E,OAAvB;AACH;AACDrH,8BAAUqF,IAAV,CAAe,cAAf,EAA+B;AAC3B,mCAAWgC,OADgB;AAE3B,mCAAW,KAAKjH;AAFW,qBAA/B;AAIH,iBAlYwC;AAoYzCuM,mCApYyC,+BAoYpBtF,OApYoB,EAoYX;AAC1B,2BAAO/I,KAAK;AACAsO,8BAAM5M,UAAU6M,UAAV,CAAqBC,GAD3B;AAEAC,4BAAI,KAAK3M,KAAL,CAAWF,GAAX,CAAe,KAAf,CAFJ;AAGAkL,8BAAM,MAHN;AAIAzJ,4BAAI0F,QAAQnH,GAAR,CAAY,OAAZ;AAJJ,qBAAL,EAKA8M,CALA,CAKE,MALF,EAKUC,CALV,CAKY5F,QAAQnH,GAAR,CAAY,SAAZ,CALZ,EAKoCgN,EALpC,GAMEF,CANF,CAMIhN,UAAU8L,MANd,EAMsB,EAAC,SAAStN,QAAQ2O,EAAR,CAAWC,UAArB,EANtB,EAMwDF,EANxD,EAAP;AAOH,iBA5YwC;AA8YzC/H,2BA9YyC,uBA8Y5BkC,OA9Y4B,EA8YnB;AAClB;;;;;AAKA;AACA;AACA,wBAAMgG,gBAAgB,KAAKV,mBAAL,CAAyBtF,OAAzB,CAAtB;AACArH,8BAAU6M,UAAV,CAAqBS,IAArB,CAA0BD,aAA1B;AACA,wBAAIrN,UAAUuN,gBAAd,EAAgC;AAC5B;AACAvN,kCAAU6M,UAAV,CAAqBS,IAArB,CACIhP,KAAK,EAAEyO,IAAI/M,UAAU4B,QAAhB,EAA0BwJ,MAAM,MAAhC,EAAwCzJ,IAAI0F,QAAQnH,GAAR,CAAY,OAAZ,CAA5C,EAAL,EACC8M,CADD,CACG,WADH,EACgB,EAACQ,OAAM,oBAAP,EADhB,EAECR,CAFD,CAEG,OAFH,EAEY,EAACS,MAAK,gBAAN,EAAuBC,OAAO,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAA7B,EAFZ,EAEkEV,EAFlE,GAGCW,KAHD,CAGOR,cAAcS,IAAd,EAHP,CADJ;AAMH;AACJ,iBAjawC;AAmazCC,kCAnayC,8BAmarBvG,IAnaqB,EAmaf;AACtB;;;;;;AAMA,wBAAI,CAACxH,UAAU6M,UAAV,CAAqBmB,aAA1B,EAAyC;AACrC,+BAAO,KAAK9I,gBAAL,CACH,CAAC,0CACG,oCADJ,CADG,EAGH,OAHG,CAAP;AAKH;AACD,wBAAMmF,QAAQ7C,KAAK8C,OAAL,CAAa,MAAb,EAAqB,EAArB,EAAyBD,KAAzB,CAA+B,aAA/B,CAAd;AACA,wBAAIA,KAAJ,EAAW;AACP,4BAAIA,MAAM,CAAN,MAAa,OAAjB,EAA0B;AACtB,mCAAO,KAAK4D,aAAL,EAAP;AACH,yBAFD,MAGK,IAAI5D,MAAM,CAAN,MAAa,MAAjB,EAAyB;AAC1B,gCAAMc,OAAO,6BACiB3K,GAAG,gBAAH,CADjB,4BAEeA,GAAG,2BAAH,CAFf,+BAGkBA,GAAG,iBAAH,CAHlB,CAAb;AAKA,iCAAK0E,gBAAL,CAAsBiG,IAAtB;AACA;AACH;AACJ;AACD,wBAAIjB,WAAWlK,UAAUwK,UAAV,CAAqBtK,GAArB,CAAyB,UAAzB,CAAf;AACAgK,+BAAWzL,EAAEyP,OAAF,CAAUhE,QAAV,IAAqBlK,UAAU4B,QAA/B,GAAyCsI,QAApD;;AAEA,wBAAM7C,UAAU,KAAKjH,KAAL,CAAWsE,QAAX,CAAoByJ,MAApB,CAA2B;AACvCjE,0CADuC;AAEvCK,gCAAQ,IAF+B;AAGvCvB,8BAAMrK,SAAS6J,MAAT,EAHiC;AAIvCnB,iCAASG;AAJ8B,qBAA3B,CAAhB;AAMA,yBAAKrC,WAAL,CAAiBkC,OAAjB;AACH,iBA1cwC;AA4czCvC,6BA5cyC,2BA4cxB;AACb;;;;AAIA9E,8BAAU6M,UAAV,CAAqBS,IAArB,CACIhP,KAAK,EAAC,MAAK,KAAK8B,KAAL,CAAWF,GAAX,CAAe,KAAf,CAAN,EAA6B,QAAQ,MAArC,EAAL,EACK8M,CADL,CACO,KAAK5M,KAAL,CAAWF,GAAX,CAAe,YAAf,CADP,EACqC,EAAC,SAAS1B,QAAQ2O,EAAR,CAAWC,UAArB,EADrC,EACuEF,EADvE,GAEKF,CAFL,CAEO,UAFP,EAEmB,EAAC,SAASxO,QAAQ2O,EAAR,CAAWiB,KAArB,EAFnB,EAEgDlB,EAFhD,GAGKF,CAHL,CAGO,oBAHP,EAG6B,EAAC,SAASxO,QAAQ2O,EAAR,CAAWiB,KAArB,EAH7B,CADJ;AAMH,iBAvdwC;AAydzCC,4BAzdyC,wBAyd3BjN,KAzd2B,EAydpBkN,OAzdoB,EAydX;AAC1B;;;;;;;;;;;AAWA,wBAAI,CAAC7P,EAAE6H,WAAF,CAAc,KAAKiI,kBAAnB,CAAL,EAA6C;AACzC7C,+BAAOgB,YAAP,CAAoB,KAAK6B,kBAAzB;AACA,+BAAO,KAAKA,kBAAZ;AACH;AACD,wBAAInN,UAAUpB,UAAUwL,SAAxB,EAAmC;AAC/B,6BAAK+C,kBAAL,GAA0B7C,OAAOC,UAAP,CACtB,KAAK0C,YAAL,CAAkBnL,IAAlB,CAAuB,IAAvB,CADsB,EACQlD,UAAUwO,QAAV,CAAmB5C,MAD3B,EACmC5L,UAAU4L,MAD7C,CAA1B;AAEH,qBAHD,MAGO,IAAIxK,UAAUpB,UAAU4L,MAAxB,EAAgC;AACnC,6BAAK2C,kBAAL,GAA0B7C,OAAOC,UAAP,CACtB,KAAK0C,YAAL,CAAkBnL,IAAlB,CAAuB,IAAvB,CADsB,EACQlD,UAAUwO,QAAV,CAAmB3C,QAD3B,EACqC7L,UAAU6L,QAD/C,CAA1B;AAEH;AACD,wBAAI,CAACyC,OAAD,IAAY,KAAKlO,KAAL,CAAWF,GAAX,CAAe,YAAf,MAAiCkB,KAAjD,EAAwD;AACpD,6BAAKhB,KAAL,CAAWiM,GAAX,CAAe,YAAf,EAA6BjL,KAA7B;AACH;AACD,2BAAO,IAAP;AACH,iBApfwC;AAsfzCqN,+BAtfyC,2BAsfxBlP,EAtfwB,EAsfpB;AACjBA,uBAAGsE,cAAH;AACA,wBAAM6K,WAAW,KAAK3L,EAAL,CAAQ+D,aAAR,CAAsB,gBAAtB,CAAjB;AAAA,wBACMO,UAAUqH,SAASC,KADzB;AAEAD,6BAASC,KAAT,GAAiB,EAAjB;AACAD,6BAASE,KAAT;AACA,wBAAIvH,YAAY,EAAhB,EAAoB;AAChB,6BAAK0G,kBAAL,CAAwB1G,OAAxB;AACArH,kCAAUqF,IAAV,CAAe,aAAf,EAA8BgC,OAA9B;AACH;AACD,yBAAKgH,YAAL,CAAkBrO,UAAU8L,MAA5B;AACH,iBAjgBwC;AAmgBzC+C,0BAngByC,sBAmgB7BtP,EAngB6B,EAmgBzB;AACZ;;AAEA,wBAAIA,GAAGuP,OAAH,KAAejQ,IAAIC,KAAvB,EAA8B;AAC1B,6BAAK2P,eAAL,CAAqBlP,EAArB;AACH,qBAFD,MAEO;AACH;AACA;AACA,6BAAK8O,YAAL,CAAkBrO,UAAUwL,SAA5B,EAAuCjM,GAAGuP,OAAH,KAAejQ,IAAIE,aAA1D;AACH;AACJ,iBA7gBwC;AA+gBzCkP,6BA/gByC,yBA+gB1B1O,EA/gB0B,EA+gBtB;AACf,wBAAIA,MAAMA,GAAGsE,cAAb,EAA6B;AAAEtE,2BAAGsE,cAAH;AAAsB;AACrD,wBAAMkL,SAASC,QAAQxO,GAAG,iEAAH,CAAR,CAAf;AACA,wBAAIuO,WAAW,IAAf,EAAqB;AACjB,6BAAK9I,QAAL,CAAcgJ,KAAd;AACA,6BAAK7O,KAAL,CAAWsE,QAAX,CAAoBwK,KAApB;AACA,6BAAK9O,KAAL,CAAWsE,QAAX,CAAoB7C,cAApB,CAAmCsN,MAAnC;AACH;AACD,2BAAO,IAAP;AACH,iBAxhBwC;AA0hBzCC,kCA1hByC,8BA0hBrBT,KA1hBqB,EA0hBd;AACvB,wBAAMU,WAAW,KAAK/J,GAAL,CAASY,IAAT,CAAc,wBAAd,CAAjB;AACA,wBAAIoJ,WAAWD,SAASE,GAAT,EAAf;AACA,wBAAID,YAAaA,SAASA,SAAS7L,MAAT,GAAgB,CAAzB,MAAgC,GAAjD,EAAuD;AACnD6L,mCAAWA,WAAW,GAAtB;AACH;AACDD,6BAAST,KAAT,GAAiBW,GAAjB,CAAqBD,WAASX,KAAT,GAAe,GAApC;AACH,iBAjiBwC;AAmiBzCa,2BAniByC,uBAmiB5BjQ,EAniB4B,EAmiBxB;AACbA,uBAAGuE,eAAH;AACA,yBAAK2L,eAAL;AACA,wBAAMhQ,SAASF,GAAGE,MAAH,CAAUsE,QAAV,KAAuB,KAAvB,GAA+BxE,GAAGE,MAAH,CAAUuE,aAAzC,GAAyDzE,GAAGE,MAA3E;AACA,yBAAK2P,kBAAL,CAAwB3P,OAAOyE,YAAP,CAAoB,YAApB,CAAxB;AACH,iBAxiBwC;AA0iBzCuL,+BA1iByC,2BA0iBxBlQ,EA1iBwB,EA0iBpB;AACjB,wBAAI,CAACd,EAAE6H,WAAF,CAAc/G,EAAd,CAAL,EAAwB;AACpBA,2BAAGuE,eAAH;AACA,4BAAIvE,GAAGE,MAAH,CAAUC,SAAV,CAAoBgQ,QAApB,CAA6B,uBAA7B,KACAnQ,GAAGE,MAAH,CAAUC,SAAV,CAAoBgQ,QAApB,CAA6B,uBAA7B,CADA,IAEInQ,GAAGE,MAAH,CAAUC,SAAV,CAAoBgQ,QAApB,CAA6B,gBAA7B,CAFR,EAEwD;AACpD;AACH;AACJ;AACD,wBAAMC,WAAWlR,EAAE+E,UAAF,CACbnE,SAASO,gBAAT,CAA0B,eAA1B,CADa,EAEb,CAAC,KAAK6G,iBAAL,CAAuB1D,EAAxB,CAFa,CAAjB;AAIAnE,0BAAMe,kBAAN,CAAyBgQ,QAAzB,EAAmCC,IAAnC,CACInR,EAAEoR,OAAF,CACIjR,MAAMkR,kBADV,EAEI,KAAKrJ,iBAAL,CAAuB1D,EAF3B,CADJ;AAMH,iBA7jBwC;AA+jBzCgN,0BA/jByC,sBA+jB7BxQ,EA/jB6B,EA+jBzB;AACZA,uBAAGuE,eAAH;AACA9D,8BAAUqF,IAAV,CAAe,mBAAf,EAAoC;AAChCwH,oCAAY7M,UAAU6M,UADU;AAEhCzM,+BAAO,KAAKA;AAFoB,qBAApC;AAIH,iBArkBwC;AAukBzC2E,mCAvkByC,+BAukBpBhF,IAvkBoB,EAukBd;AACvB,wBAAMiQ,cAAcjQ,KAAKG,GAAL,CAAS,aAAT,CAApB;AACA,wBAAIgK,WAAWnK,KAAKG,GAAL,CAAS,UAAT,CAAf;AACAgK,+BAAWzL,EAAEyP,OAAF,CAAUhE,QAAV,IAAqBnK,KAAKG,GAAL,CAAS,KAAT,CAArB,GAAsCgK,QAAjD;AACA,wBAAI,KAAK5E,GAAL,CAAS0C,EAAT,CAAY,UAAZ,CAAJ,EAA6B;AACzB,4BAAIgI,gBAAgB,SAApB,EAA+B;AAC3B,iCAAK5I,sBAAL,CAA4B8C,WAAS,GAAT,GAAa1J,GAAG,kBAAH,CAAzC;AACH,yBAFD,MAEO,IAAIwP,gBAAgB,MAApB,EAA4B;AAC/B,iCAAK5I,sBAAL,CAA4B8C,WAAS,GAAT,GAAa1J,GAAG,eAAH,CAAzC;AACH,yBAFM,MAEA,IAAKwP,gBAAgB,KAArB,EAA6B;AAChC,iCAAK5I,sBAAL,CAA4B8C,WAAS,GAAT,GAAa1J,GAAG,SAAH,CAAzC;AACH,yBAFM,MAEA,IAAIwP,gBAAgB,QAApB,EAA8B;AACjC,iCAAK1K,GAAL,CAASY,IAAT,CAAc,gBAAd,EAAgCiB,MAAhC;AACH;AACJ;AACJ,iBAtlBwC;AAwlBzClC,+BAxlByC,2BAwlBxBlF,IAxlBwB,EAwlBlB;AACnB,yBAAKsG,iBAAL;AACArG,8BAAUqF,IAAV,CAAe,6BAAf,EAA8C;AAC1C,mCAAWtF,KAAKoM,UAD0B;AAE1C,mCAAWpM,KAAKG,GAAL,CAAS,QAAT;AAF+B,qBAA9C;AAIH,iBA9lBwC;AAgmBzCmG,iCAhmByC,6BAgmBtBiF,GAhmBsB,EAgmBjB;AACpBA,0BAAMA,OAAO,KAAKlL,KAAL,CAAWF,GAAX,CAAe,QAAf,CAAb;AACA,wBAAIzB,EAAEwR,QAAF,CAAW3E,GAAX,CAAJ,EAAqB;AACjB,6BAAKhG,GAAL,CAASY,IAAT,CAAc,uBAAd,EAAuCsB,IAAvC,CAA4C8D,GAA5C,EAAiD/F,IAAjD,CAAsD,OAAtD,EAA+D+F,GAA/D;AACH;AACD,2BAAO,IAAP;AACH,iBAtmBwC;AAwmBzC4E,qBAxmByC,iBAwmBlC3Q,EAxmBkC,EAwmB9B;AACP,wBAAIA,MAAMA,GAAGsE,cAAb,EAA6B;AAAEtE,2BAAGsE,cAAH;AAAsB;AACrD,wBAAI7D,UAAU6M,UAAV,CAAqBsD,SAAzB,EAAoC;AAChC;AACA;AACA,6BAAK/P,KAAL,CAAWiM,GAAX,CAAe,YAAf,EAA6BrM,UAAU6L,QAAvC;AACA,6BAAK/G,aAAL;AACH;AACD,wBAAI;AACA,6BAAK1E,KAAL,CAAWgQ,OAAX;AACH,qBAFD,CAEE,OAAOC,CAAP,EAAU;AACRrQ,kCAAUsQ,GAAV,CAAcD,CAAd,EAAiB7R,QAAQ+R,QAAR,CAAiBC,KAAlC;AACH;AACD,yBAAKrJ,MAAL;AACAnH,8BAAUqF,IAAV,CAAe,eAAf,EAAgC,IAAhC;AACA,2BAAO,IAAP;AACH,iBAxnBwC;AA0nBzCoL,iCA1nByC,6BA0nBtBC,OA1nBsB,EA0nBb;AACxB,2BAAOjS,EAAEgD,MAAF,CAASiP,WAAW,EAApB,EAAwB;AAC3B,uCAAelQ,GAAG,oBAAH,CADY;AAE3B,+CAAuBA,GAAG,iBAAH,CAFI;AAG3B,4CAAoBA,GAAG,cAAH,CAHO;AAI3B,4CAAoBR,UAAU2Q,uBAAV,CAAkCrI,IAJ3B;AAK3B,6CAAqBtI,UAAU2Q,uBAAV,CAAkCC,KAL5B;AAM3B,qCAAa5Q,UAAU2Q,uBAAV,CAAkCE;AANpB,qBAAxB,CAAP;AAQH,iBAnoBwC;AAqoBzC1K,6BAroByC,yBAqoB1B2K,OAroB0B,EAqoBjBJ,OAroBiB,EAqoBR;AAC7B,wBAAI,CAAC1Q,UAAUyF,YAAf,EAA6B;AAAE;AAAS;AACxCqL,8BAAUA,WAAW5S,WAArB;AACAwS,8BAAUjS,EAAEsS,MAAF,CACN,KAAK3Q,KAAL,CAAWoC,MAAX,EADM,EAEN,KAAKiO,iBAAL,CAAuBC,WAAW,EAAlC,CAFM,CAAV;AAIA,yBAAK3N,EAAL,CAAQ+D,aAAR,CAAsB,eAAtB,EAAuC9D,SAAvC,GAAmD8N,QAAQJ,OAAR,CAAnD;;AAEA,wBAAIM,SAAS,KAAKjO,EAAL,CAAQ+D,aAAR,CAAsB,gBAAtB,CAAb;AACAkK,2BAAOhO,SAAP,GAAmB,EAAnB;AACAgO,2BAAOC,WAAP,CAAmB,KAAKxK,iBAAL,CAAuBrE,MAAvB,GAAgCW,EAAnD;AACA,2BAAO,IAAP;AACH,iBAlpBwC;AAopBzCiC,4BAppByC,0BAopBzB;AACZ,wBAAI,CAAC,KAAK5E,KAAL,CAAWF,GAAX,CAAe,OAAf,CAAL,EAA8B;AAC1B;AACH;AACD,wBAAMgR,QAAQlR,UAAUmR,qBAAxB;AACA,wBAAMC,SAASpR,UAAUqR,sBAAzB;AACA,wBAAMC,oBAAkB,KAAKlR,KAAL,CAAWF,GAAX,CAAe,YAAf,CAAlB,gBAAyD,KAAKE,KAAL,CAAWF,GAAX,CAAe,OAAf,CAA/D;AAAA,wBACIqR,SAAShU,EAAEY,WAAW;AAClB,iCAAS+S,KADS;AAElB,kCAAUE;AAFQ,qBAAX,CAAF,EAGLlR,GAHK,CAGD,CAHC,CADb;;AAMA,wBAAI,EAAEqR,OAAOC,UAAP,IAAqBD,OAAOC,UAAP,CAAkB,IAAlB,CAAvB,CAAJ,EAAqD;AACjD,+BAAO,IAAP;AACH;AACD,wBAAMC,MAAMF,OAAOC,UAAP,CAAkB,IAAlB,CAAZ;AACA,wBAAME,MAAM,IAAIC,KAAJ,EAAZ,CAhBY,CAgBe;AAC3BD,wBAAIE,MAAJ,GAAa,YAAY;AACrB,4BAAMC,QAAQH,IAAIR,KAAJ,GAAUQ,IAAIN,MAA5B;AACA,4BAAIS,QAAQ,CAAZ,EAAe;AACXJ,gCAAIK,SAAJ,CAAcJ,GAAd,EAAmB,CAAnB,EAAqB,CAArB,EAAwBR,KAAxB,EAA+BE,UAAQ,IAAES,KAAV,CAA/B;AACH,yBAFD,MAEO;AACHJ,gCAAIK,SAAJ,CAAcJ,GAAd,EAAmB,CAAnB,EAAqB,CAArB,EAAwBR,KAAxB,EAA+BE,SAAOS,KAAtC;AACH;AAEJ,qBARD;AASAH,wBAAIK,GAAJ,GAAUT,OAAV;AACA,yBAAKhM,GAAL,CAASY,IAAT,CAAc,aAAd,EAA6B8L,MAA7B,CAAoCT,MAApC;AACA,2BAAO,IAAP;AACH,iBAjrBwC;AAmrBzC3C,qBAnrByC,mBAmrBhC;AACL,yBAAKtJ,GAAL,CAASY,IAAT,CAAc,gBAAd,EAAgC0I,KAAhC;AACA5O,8BAAUqF,IAAV,CAAe,gBAAf,EAAiC,IAAjC;AACA,2BAAO,IAAP;AACH,iBAvrBwC;AAyrBzCR,oBAzrByC,kBAyrBjC;AACJ,yBAAK9B,EAAL,CAAQrD,SAAR,CAAkBT,GAAlB,CAAsB,QAAtB;AACAL,0BAAMwH,aAAN;AACA,2BAAO,IAAP;AACH,iBA7rBwC;AA+rBzC6L,0BA/rByC,sBA+rB7BrD,KA/rB6B,EA+rBtB;AACf,wBAAIhQ,MAAMsT,kBAAN,CAAyB,KAAK9R,KAA9B,CAAJ,EAA0C;AACtC,6BAAKA,KAAL,CAAWuD,IAAX;AACH;AACD,yBAAK0K,YAAL,CAAkBrO,UAAU8L,MAA5B;AACA,yBAAKlF,UAAL;AACA,wBAAIgI,KAAJ,EAAW;AACP,6BAAKA,KAAL;AACH;AACJ,iBAxsBwC;AA0sBzCuD,qBA1sByC,iBA0sBlCvD,KA1sBkC,EA0sB3B;AACV;AACA,wBAAI,KAAKtJ,GAAL,CAAS0C,EAAT,CAAY,UAAZ,KAA2B,KAAK1C,GAAL,CAAS8M,GAAT,CAAa,SAAb,MAA4B,GAA3D,EAAgE;AAC5D,4BAAIxD,KAAJ,EAAW;AAAE,iCAAKA,KAAL;AAAe;AAC5B;AACH;AACDhQ,0BAAMyT,MAAN,CAAa,KAAKtP,EAAlB,EAAsBtE,EAAEyE,IAAF,CAAO,KAAK+O,UAAZ,EAAwB,IAAxB,EAA8BrD,KAA9B,CAAtB;AACH,iBAjtBwC;AAmtBzChK,oBAntByC,gBAmtBnCgK,KAntBmC,EAmtB5B;AACT,wBAAInQ,EAAE6H,WAAF,CAAc,KAAKgM,aAAnB,CAAJ,EAAuC;AACnC;;;;AAIA,6BAAKA,aAAL,GAAqB7T,EAAE6D,QAAF,CAAW,KAAK6P,KAAhB,EAAuB,GAAvB,EAA4B,EAAC,WAAW,IAAZ,EAA5B,CAArB;AACH;AACD,yBAAKG,aAAL,CAAmBjS,KAAnB,CAAyB,IAAzB,EAA+BC,SAA/B;AACA,2BAAO,IAAP;AACH,iBA7tBwC;AA+tBzCiS,wCA/tByC,sCA+tBb;AACxB,wBAAMC,qBAAqB,KAAKzP,EAAL,CAAQ+D,aAAR,CAAsB,qBAAtB,CAA3B;AACA,wBAAI,CAACrI,EAAEmJ,MAAF,CAAS4K,kBAAT,CAAL,EAAmC;AAC/BA,2CAAmB9S,SAAnB,CAA6BT,GAA7B,CAAiC,QAAjC;AACH;AACJ,iBApuBwC;;;AAsuBzCuF,8BAAc,sBAAUjF,EAAV,EAAc;AACxB;;;;;;AAMA,wBAAIA,MAAMA,GAAGsE,cAAb,EAA6B;AAAEtE,2BAAGsE,cAAH;AAAsB;AACrD,wBAAI,KAAKzD,KAAL,CAAWF,GAAX,CAAe,eAAf,CAAJ,EAAqC;AACjC,6BAAKE,KAAL,CAAWiM,GAAX,CAAe;AACX,wCAAY,KADD;AAEX,6CAAiB;AAFN,yBAAf;AAIA;AACH;AACD,wBAAIoG,WAAW,IAAf;AACA,wBAAMC,eACD,KAAKzM,QAAL,CAAcvC,SAAd,KAA4B,KAAKuC,QAAL,CAAc0M,WAAd,EAA7B,IACI,KAAK1M,QAAL,CAAc,CAAd,EAAiB2M,YAAjB,GAA8B,EAFtC;;AAIA,wBAAIF,YAAJ,EAAkB;AACdD,mCAAW,KAAX;AACA,6BAAKI,cAAL;AACH;AACDjU,0BAAMkU,QAAN,CAAe,KAAK1S,KAApB,EAA2B,EAAC,YAAYqS,QAAb,EAA3B;AACH,iBA/vBwC;;AAiwBzCM,kCAjwByC,gCAiwBnB;AAClB,yBAAK3S,KAAL,CAAWuD,IAAX,CAAgB,UAAhB,EAA4B,KAA5B;AACA,yBAAKiD,UAAL;AACH,iBApwBwC;AAswBzCoM,2BAtwByC,yBAswB1B;AACX;AACA,wBAAI,KAAK/M,QAAL,CAAc+B,EAAd,CAAiB,UAAjB,KAAgC,CAAC,KAAK5H,KAAL,CAAWF,GAAX,CAAe,UAAf,CAArC,EAAiE;AAC7D,6BAAK+F,QAAL,CAAcvC,SAAd,CAAwB,KAAKuC,QAAL,CAAc,CAAd,EAAiB2M,YAAzC;AACA,6BAAKC,cAAL;AACA,6BAAKzS,KAAL,CAAWuD,IAAX,CAAgB,EAAC,iBAAiB,IAAlB,EAAhB;AACH;AACJ,iBA7wBwC;AA+wBzCkP,8BA/wByC,4BA+wBxB;AACb,yBAAKN,wBAAL;AACA,wBAAIvS,UAAUiT,WAAV,KAA0B,QAA9B,EAAwC;AACpC,6BAAK7S,KAAL,CAAW8S,qBAAX;AACH;AACDlT,8BAAUqF,IAAV,CAAe,qBAAf,EAAsC,EAAC,WAAW,KAAKjF,KAAjB,EAAtC;AACH,iBArxBwC;AAuxBzCwG,0BAvxByC,wBAuxB3B;AACV,wBAAInI,EAAE6H,WAAF,CAAc,KAAK6M,mBAAnB,CAAJ,EAA6C;AACzC;;;;AAIA,6BAAKA,mBAAL,GAA2B1U,EAAE6D,QAAF,CAAW,KAAK0Q,WAAhB,EAA6B,GAA7B,CAA3B;AACH;AACD,yBAAKG,mBAAL,CAAyB9S,KAAzB,CAA+B,IAA/B,EAAqCC,SAArC;AACA,2BAAO,IAAP;AACH,iBAjyBwC;AAmyBzCS,oCAnyByC,gCAmyBnBK,KAnyBmB,EAmyBZ;AACzB,wBAAI,KAAKhB,KAAL,CAAWF,GAAX,CAAe,YAAf,EAA6B,CAA7B,KAAmC,CAAC,KAAKE,KAAL,CAAWgT,sBAAX,EAAxC,EAA6E;AACzE,6BAAKhT,KAAL,CAAW8S,qBAAX;AACH;AACJ;AAvyBwC,aAArB,CAAxB;AAyyBH;AAp9BqC,KAA1C;;AAu9BA,WAAO1V,QAAP;AACH,CAjgCA,CAAD","file":"converse-chatview.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n(function (root, factory) {\n    define([\n            \"jquery.noconflict\",\n            \"converse-core\",\n            \"converse-chatboxes\",\n            \"emojione\",\n            \"xss\",\n            \"tpl!chatbox\",\n            \"tpl!new_day\",\n            \"tpl!action\",\n            \"tpl!emojis\",\n            \"tpl!message\",\n            \"tpl!help_message\",\n            \"tpl!toolbar\",\n            \"tpl!avatar\",\n            \"tpl!spinner\"\n    ], factory);\n}(this, function (\n            $,\n            converse,\n            dummy,\n            emojione,\n            xss,\n            tpl_chatbox,\n            tpl_new_day,\n            tpl_action,\n            tpl_emojis,\n            tpl_message,\n            tpl_help_message,\n            tpl_toolbar,\n            tpl_avatar,\n            tpl_spinner\n    ) {\n    \"use strict\";\n    const { $msg, Backbone, Strophe, _, b64_sha1, moment, utils } = converse.env;\n\n    const KEY = {\n        ENTER: 13,\n        FORWARD_SLASH: 47\n    };\n\n    converse.plugins.add('converse-chatview', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n            //\n            registerGlobalEventHandlers: function () {\n                this.__super__.registerGlobalEventHandlers();\n                document.addEventListener(\n                    'click', function (ev) {\n                        if (_.includes(ev.target.classList, 'toggle-toolbar-menu') ||\n                            _.includes(ev.target.classList, 'insert-emoji')) {\n                            return;\n                        }\n                        utils.slideInAllElements(\n                            document.querySelectorAll('.toolbar-menu')\n                        )\n                    }\n                );\n            },\n\n            ChatBoxViews: {\n                onChatBoxAdded (item) {\n                    const { _converse } = this.__super__;\n                    let view = this.get(item.get('id'));\n                    if (!view) {\n                        view = new _converse.ChatBoxView({model: item});\n                        this.add(item.get('id'), view);\n                        return view;\n                    } else {\n                        return this.__super__.onChatBoxAdded.apply(this, arguments);\n                    }\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __ } = _converse;\n\n            _converse.api.settings.update({\n                'use_emojione': true,\n                'emojione_image_path': emojione.imagePathPNG,\n                'chatview_avatar_height': 32,\n                'chatview_avatar_width': 32,\n                'show_toolbar': true,\n                'time_format': 'HH:mm',\n                'visible_toolbar_buttons': {\n                    'emoji': true,\n                    'call': false,\n                    'clear': true\n                },\n            });\n            emojione.imagePathPNG = _converse.emojione_image_path;\n            emojione.ascii = true;\n\n            function onWindowStateChanged (data) {\n                _converse.chatboxviews.each(function (chatboxview) {\n                    chatboxview.onWindowStateChanged(data.state);\n                });\n            }\n            _converse.api.listen.on('windowStateChanged', onWindowStateChanged);\n\n            _converse.EmojiPicker = Backbone.Model.extend({ \n                defaults: {\n                    'current_category': 'people',\n                    'current_skintone': '',\n                    'scroll_position': 0\n                },\n                initialize () {\n                    const id = `converse.emoji-${_converse.bare_jid}`;\n                    this.id = id;\n                    this.browserStorage = new Backbone.BrowserStorage[_converse.storage](id);\n                }\n            });\n\n            _converse.EmojiPickerView = Backbone.View.extend({\n                className: 'emoji-picker-container toolbar-menu collapsed',\n                events: {\n                    'click .emoji-category-picker li.emoji-category': 'chooseCategory',\n                    'click .emoji-skintone-picker li.emoji-skintone': 'chooseSkinTone'\n                },\n\n                initialize () {\n                    this.model.on('change:current_skintone', this.render, this);\n                    this.model.on('change:current_category', this.render, this);\n                    this.setScrollPosition = _.debounce(this.setScrollPosition, 50);\n                },\n\n                render () {\n                    var emojis_html = tpl_emojis(\n                        _.extend(\n                            this.model.toJSON(), {\n                                'transform': _converse.use_emojione ? emojione.shortnameToImage : emojione.shortnameToUnicode,\n                                'emojis_by_category': utils.getEmojisByCategory(_converse, emojione),\n                                'toned_emojis': utils.getTonedEmojis(_converse),\n                                'skintones': ['tone1', 'tone2', 'tone3', 'tone4', 'tone5'],\n                                'shouldBeHidden': this.shouldBeHidden\n                            }\n                        ));\n                    this.el.innerHTML = emojis_html;\n                    _.forEach(this.el.querySelectorAll('.emoji-picker'), (el) => {\n                        el.addEventListener('scroll', this.setScrollPosition.bind(this));\n                    });\n                    this.restoreScrollPosition();\n                    return this;\n                },\n\n                shouldBeHidden (shortname, current_skintone, toned_emojis) {\n                    /* Helper method for the template which decides whether an\n                     * emoji should be hidden, based on which skin tone is\n                     * currently being applied.\n                     */\n                    if (_.includes(shortname, '_tone')) {\n                        if (!current_skintone || !_.includes(shortname, current_skintone)) {\n                            return true;\n                        }\n                    } else {\n                        if (current_skintone && _.includes(toned_emojis, shortname)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                },\n\n                restoreScrollPosition () {\n                    const current_picker = _.difference(\n                        this.el.querySelectorAll('.emoji-picker'),\n                        this.el.querySelectorAll('.emoji-picker.hidden')\n                    );\n                    if (current_picker.length === 1 && this.model.get('scroll_position')) {\n                        current_picker[0].scrollTop = this.model.get('scroll_position');\n                    }\n                },\n\n                setScrollPosition (ev) {\n                    this.model.save('scroll_position', ev.target.scrollTop);\n                },\n\n                chooseSkinTone (ev) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    const target = ev.target.nodeName === 'IMG' ?\n                        ev.target.parentElement : ev.target;\n                    const skintone = target.getAttribute(\"data-skintone\").trim();\n                    if (this.model.get('current_skintone') === skintone) {\n                        this.model.save({'current_skintone': ''});\n                    } else {\n                        this.model.save({'current_skintone': skintone});\n                    }\n                },\n\n                chooseCategory (ev) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    const target = ev.target.nodeName === 'IMG' ?\n                        ev.target.parentElement : ev.target;\n                    const category = target.getAttribute(\"data-category\").trim();\n                    this.model.save({\n                        'current_category': category,\n                        'scroll_position': 0\n                    });\n                }\n            });\n\n            _converse.ChatBoxView = Backbone.View.extend({\n                length: 200,\n                tagName: 'div',\n                className: 'chatbox hidden',\n                is_chatroom: false,  // Leaky abstraction from MUC\n\n                events: {\n                    'click .close-chatbox-button': 'close',\n                    'keypress .chat-textarea': 'keyPressed',\n                    'click .send-button': 'onFormSubmitted',\n                    'click .toggle-smiley': 'toggleEmojiMenu',\n                    'click .toggle-smiley ul.emoji-picker li': 'insertEmoji',\n                    'click .toggle-clear': 'clearMessages',\n                    'click .toggle-call': 'toggleCall',\n                    'click .new-msgs-indicator': 'viewUnreadMessages'\n                },\n\n                initialize () {\n                    this.markScrolled = _.debounce(this.markScrolled, 100);\n\n                    this.createEmojiPicker();\n                    this.model.messages.on('add', this.onMessageAdded, this);\n                    this.model.on('show', this.show, this);\n                    this.model.on('destroy', this.hide, this);\n                    // TODO check for changed fullname as well\n                    this.model.on('change:chat_state', this.sendChatState, this);\n                    this.model.on('change:chat_status', this.onChatStatusChanged, this);\n                    this.model.on('change:image', this.renderAvatar, this);\n                    this.model.on('change:status', this.onStatusChanged, this);\n                    this.model.on('showHelpMessages', this.showHelpMessages, this);\n                    this.model.on('sendMessage', this.sendMessage, this);\n                    this.render().fetchMessages();\n                    _converse.emit('chatBoxInitialized', this);\n                },\n\n                render () {\n                    this.$el.attr('id', this.model.get('box_id'))\n                        .html(tpl_chatbox(\n                                _.extend(this.model.toJSON(), {\n                                        show_toolbar: _converse.show_toolbar,\n                                        show_textarea: true,\n                                        show_send_button: _converse.show_send_button,\n                                        title: this.model.get('fullname'),\n                                        unread_msgs: __('You have unread messages'),\n                                        info_close: __('Close this chat box'),\n                                        label_personal_message: __('Personal message'),\n                                        label_send: __('Send')\n                                    }\n                                )\n                            )\n                        );\n                    this.$content = this.$el.find('.chat-content');\n                    this.renderToolbar().renderAvatar();\n                    _converse.emit('chatBoxOpened', this);\n                    utils.refreshWebkit();\n                    return this.showStatusMessage();\n                },\n\n                createEmojiPicker () {\n                    if (_.isUndefined(_converse.emojipicker)) {\n                        _converse.emojipicker = new _converse.EmojiPicker();\n                        _converse.emojipicker.fetch();\n                    }\n                    this.emoji_picker_view = new _converse.EmojiPickerView({\n                        'model': _converse.emojipicker\n                    });\n                },\n\n                afterMessagesFetched () {\n                    this.insertIntoDOM();\n                    this.scrollDown();\n                    // We only start listening for the scroll event after\n                    // cached messages have been fetched\n                    this.$content.on('scroll', this.markScrolled.bind(this));\n                    _converse.emit('afterMessagesFetched', this);\n                },\n\n                fetchMessages () {\n                    this.model.messages.fetch({\n                        'add': true,\n                        'success': this.afterMessagesFetched.bind(this),\n                        'error': this.afterMessagesFetched.bind(this),\n                    });\n                    return this;\n                },\n\n                insertIntoDOM () {\n                    /* This method gets overridden in src/converse-controlbox.js\n                     * as well as src/converse-muc.js (if those plugins are\n                     * enabled).\n                     */\n                    const container = document.querySelector('#conversejs');\n                    if (this.el.parentNode !== container) {\n                        container.insertBefore(this.el, container.firstChild);\n                    }\n                    return this;\n                },\n\n                clearStatusNotification () {\n                    this.$content.find('div.chat-event').remove();\n                },\n\n                showStatusNotification (message, keep_old, permanent) {\n                    if (!keep_old) {\n                        this.clearStatusNotification();\n                    }\n                    const $el = $('<div class=\"chat-info\"></div>').text(message);\n                    if (!permanent) {\n                        $el.addClass('chat-event');\n                    }\n                    this.$content.append($el);\n                    this.scrollDown();\n                },\n\n                addSpinner () {\n                    if (_.isNull(this.el.querySelector('.spinner'))) {\n                        this.$content.prepend(tpl_spinner);\n                    }\n                },\n\n                clearSpinner () {\n                    if (this.$content.children(':first').is('span.spinner')) {\n                        this.$content.children(':first').remove();\n                    }\n                },\n\n                insertDayIndicator (date, prepend) {\n                    /* Appends (or prepends if \"prepend\" is truthy) an indicator\n                     * into the chat area, showing the day as given by the\n                     * passed in date.\n                     *\n                     * Parameters:\n                     *  (String) date - An ISO8601 date string.\n                     */\n                    const day_date = moment(date).startOf('day');\n                    const insert = prepend ? this.$content.prepend: this.$content.append;\n                    insert.call(this.$content, tpl_new_day({\n                        isodate: day_date.format(),\n                        datestring: day_date.format(\"dddd MMM Do YYYY\")\n                    }));\n                },\n\n                insertMessage (attrs, prepend) {\n                    /* Helper method which appends a message (or prepends if the\n                     * 2nd parameter is set to true) to the end of the chat box's\n                     * content area.\n                     *\n                     * Parameters:\n                     *  (Object) attrs: An object containing the message attributes.\n                     */\n                    const insert = prepend ? this.$content.prepend : this.$content.append;\n                    _.flow(($el) => {\n                            insert.call(this.$content, $el);\n                            return $el;\n                        },\n                        this.scrollDown.bind(this)\n                    )(this.renderMessage(attrs));\n                },\n\n                showMessage (attrs) {\n                    /* Inserts a chat message into the content area of the chat box.\n                     * Will also insert a new day indicator if the message is on a\n                     * different day.\n                     *\n                     * The message to show may either be newer than the newest\n                     * message, or older than the oldest message.\n                     *\n                     * Parameters:\n                     *  (Object) attrs: An object containing the message\n                     *      attributes.\n                     */\n                    let current_msg_date = moment(attrs.time) || moment;\n                    const $first_msg = this.$content.find('.chat-message:first'),\n                          first_msg_date = $first_msg.data('isodate');\n\n                    if (!first_msg_date) {\n                        // This is the first received message, so we insert a\n                        // date indicator before it.\n                        this.insertDayIndicator(current_msg_date);\n                        this.insertMessage(attrs);\n                        return;\n                    }\n\n                    const last_msg_date = this.$content.find('.chat-message:last').data('isodate');\n                    if (current_msg_date.isAfter(last_msg_date) ||\n                            current_msg_date.isSame(last_msg_date)) {\n                        // The new message is after the last message\n                        if (current_msg_date.isAfter(last_msg_date, 'day')) {\n                            // Append a new day indicator\n                            this.insertDayIndicator(current_msg_date);\n                        }\n                        this.insertMessage(attrs);\n                        return;\n                    }\n                    if (current_msg_date.isBefore(first_msg_date) ||\n                            current_msg_date.isSame(first_msg_date)) {\n                        // The message is before the first, but on the same day.\n                        // We need to prepend the message immediately before the\n                        // first message (so that it'll still be after the day\n                        // indicator).\n                        this.insertMessage(attrs, 'prepend');\n                        if (current_msg_date.isBefore(first_msg_date, 'day')) {\n                            // This message is also on a different day, so\n                            // we prepend a day indicator.\n                            this.insertDayIndicator(current_msg_date, 'prepend');\n                        }\n                        return;\n                    }\n                    // Find the correct place to position the message\n                    current_msg_date = current_msg_date.format();\n                    const msg_dates = _.map(\n                        this.$content.find('.chat-message'),\n                        (el) => $(el).data('isodate')\n                    );\n                    msg_dates.push(current_msg_date);\n                    msg_dates.sort();\n\n                    const idx = msg_dates.indexOf(current_msg_date)-1;\n                    const $latest_message = this.$content.find(`.chat-message[data-isodate=\"${msg_dates[idx]}\"]:last`);\n                    _.flow(($el) => {\n                            $el.insertAfter($latest_message);\n                            return $el;\n                        },\n                        this.scrollDown.bind(this)\n                    )(this.renderMessage(attrs));\n                },\n\n                getExtraMessageTemplateAttributes () {\n                    /* Provides a hook for sending more attributes to the\n                     * message template.\n                     *\n                     * Parameters:\n                     *  (Object) attrs: An object containing message attributes.\n                     */\n                    return {};\n                },\n\n                getExtraMessageClasses (attrs) {\n                    return attrs.delayed && 'delayed' || '';\n                },\n\n                renderMessage (attrs) {\n                    /* Renders a chat message based on the passed in attributes.\n                     *\n                     * Parameters:\n                     *  (Object) attrs: An object containing the message attributes.\n                     *\n                     *  Returns:\n                     *      The DOM element representing the message.\n                     */\n                    let text = attrs.message,\n                        fullname = this.model.get('fullname') || attrs.fullname,\n                        template, username;\n\n                    const match = text.match(/^\\/(.*?)(?: (.*))?$/);\n                    if ((match) && (match[1] === 'me')) {\n                        text = text.replace(/^\\/me/, '');\n                        template = tpl_action;\n                        if (attrs.sender === 'me') {\n                            fullname = _converse.xmppstatus.get('fullname') || attrs.fullname;\n                            username = _.isNil(fullname)? _converse.bare_jid: fullname;\n                        } else {\n                            username = attrs.fullname;\n                        }\n                    } else  {\n                        template = tpl_message;\n                        username = attrs.sender === 'me' && __('me') || fullname;\n                    }\n                    this.$content.find('div.chat-event').remove();\n\n                    if (text.length > 8000) {\n                        text = text.substring(0, 10) + '...';\n                        this.showStatusNotification(\n                            __(\"A very large message has been received.\"+\n                               \"This might be due to an attack meant to degrade the chat performance.\"+\n                               \"Output has been shortened.\"),\n                            true, true);\n                    }\n                    const msg_time = moment(attrs.time) || moment;\n                    const $msg = $(template(\n                        _.extend(this.getExtraMessageTemplateAttributes(attrs), {\n                            'msgid': attrs.msgid,\n                            'sender': attrs.sender,\n                            'time': msg_time.format(_converse.time_format),\n                            'isodate': msg_time.format(),\n                            'username': username,\n                            'extra_classes': this.getExtraMessageClasses(attrs)\n                        })\n                    ));\n                    const msg_content = $msg[0].querySelector('.chat-msg-content');\n                    msg_content.innerHTML = utils.addEmoji(\n                        _converse, emojione, utils.addHyperlinks(xss.filterXSS(text, {'whiteList': {}}))\n                    );\n                    utils.renderImageURLs(msg_content);\n                    return $msg;\n                },\n\n                showHelpMessages (msgs, type, spinner) {\n                    _.each(msgs, (msg) => {\n                        this.$content.append($(tpl_help_message({\n                            'type': type||'info',\n                            'message': msgs\n                        })));\n                    });\n                    if (spinner === true) {\n                        this.$content.append(tpl_spinner);\n                    } else if (spinner === false) {\n                        this.$content.find('span.spinner').remove();\n                    }\n                    return this.scrollDown();\n                },\n\n                handleChatStateMessage (message) {\n                    if (message.get('chat_state') === _converse.COMPOSING) {\n                        if (message.get('sender') === 'me') {\n                            this.showStatusNotification(__('Typing from another device'));\n                        } else {\n                            this.showStatusNotification(message.get('fullname')+' '+__('is typing'));\n                        }\n                        this.clear_status_timeout = window.setTimeout(this.clearStatusNotification.bind(this), 30000);\n                    } else if (message.get('chat_state') === _converse.PAUSED) {\n                        if (message.get('sender') === 'me') {\n                            this.showStatusNotification(__('Stopped typing on the other device'));\n                        } else {\n                            this.showStatusNotification(message.get('fullname')+' '+__('has stopped typing'));\n                        }\n                    } else if (_.includes([_converse.INACTIVE, _converse.ACTIVE], message.get('chat_state'))) {\n                        this.$content.find('div.chat-event').remove();\n                    } else if (message.get('chat_state') === _converse.GONE) {\n                        this.showStatusNotification(message.get('fullname')+' '+__('has gone away'));\n                    }\n                },\n\n                shouldShowOnTextMessage () {\n                    return !this.$el.is(':visible');\n                },\n\n                handleTextMessage (message) {\n                    this.showMessage(_.clone(message.attributes));\n                    if (utils.isNewMessage(message) && message.get('sender') === 'me') {\n                        // We remove the \"scrolled\" flag so that the chat area\n                        // gets scrolled down. We always want to scroll down\n                        // when the user writes a message as opposed to when a\n                        // message is received.\n                        this.model.set('scrolled', false);\n                    } else {\n                        if (utils.isNewMessage(message) && this.model.get('scrolled', true)) {\n                            this.$el.find('.new-msgs-indicator').removeClass('hidden');\n                        }\n                    }\n                    if (this.shouldShowOnTextMessage()) {\n                        this.show();\n                    } else {\n                        this.scrollDown();\n                    }\n                },\n\n                handleErrorMessage (message) {\n                    const $message = $(`[data-msgid=${message.get('msgid')}]`);\n                    if ($message.length) {\n                        $message.after($('<div class=\"chat-info chat-error\"></div>').text(message.get('message')));\n                        this.scrollDown();\n                    }\n                },\n\n                onMessageAdded (message) {\n                    /* Handler that gets called when a new message object is created.\n                     *\n                     * Parameters:\n                     *    (Object) message - The message Backbone object that was added.\n                     */\n                    if (!_.isUndefined(this.clear_status_timeout)) {\n                        window.clearTimeout(this.clear_status_timeout);\n                        delete this.clear_status_timeout;\n                    }\n                    if (message.get('type') === 'error') {\n                        this.handleErrorMessage(message);\n                    } else if (!message.get('message')) {\n                        this.handleChatStateMessage(message);\n                    } else {\n                        this.handleTextMessage(message);\n                    }\n                    _converse.emit('messageAdded', {\n                        'message': message,\n                        'chatbox': this.model\n                    });\n                },\n\n                createMessageStanza (message) {\n                    return $msg({\n                                from: _converse.connection.jid,\n                                to: this.model.get('jid'),\n                                type: 'chat',\n                                id: message.get('msgid')\n                        }).c('body').t(message.get('message')).up()\n                            .c(_converse.ACTIVE, {'xmlns': Strophe.NS.CHATSTATES}).up();\n                },\n\n                sendMessage (message) {\n                    /* Responsible for sending off a text message.\n                     *\n                     *  Parameters:\n                     *    (Message) message - The chat message\n                     */\n                    // TODO: We might want to send to specfic resources.\n                    // Especially in the OTR case.\n                    const messageStanza = this.createMessageStanza(message);\n                    _converse.connection.send(messageStanza);\n                    if (_converse.forward_messages) {\n                        // Forward the message, so that other connected resources are also aware of it.\n                        _converse.connection.send(\n                            $msg({ to: _converse.bare_jid, type: 'chat', id: message.get('msgid') })\n                            .c('forwarded', {xmlns:'urn:xmpp:forward:0'})\n                            .c('delay', {xmns:'urn:xmpp:delay',stamp:(new Date()).getTime()}).up()\n                            .cnode(messageStanza.tree())\n                        );\n                    }\n                },\n\n                onMessageSubmitted (text) {\n                    /* This method gets called once the user has typed a message\n                     * and then pressed enter in a chat box.\n                     *\n                     *  Parameters:\n                     *    (string) text - The chat message text.\n                     */\n                    if (!_converse.connection.authenticated) {\n                        return this.showHelpMessages(\n                            ['Sorry, the connection has been lost, '+\n                                'and your message could not be sent'],\n                            'error'\n                        );\n                    }\n                    const match = text.replace(/^\\s*/, \"\").match(/^\\/(.*)\\s*$/);\n                    if (match) {\n                        if (match[1] === \"clear\") {\n                            return this.clearMessages();\n                        }\n                        else if (match[1] === \"help\") {\n                            const msgs = [\n                                `<strong>/help</strong>:${__('Show this menu')}`,\n                                `<strong>/me</strong>:${__('Write in the third person')}`,\n                                `<strong>/clear</strong>:${__('Remove messages')}`\n                                ];\n                            this.showHelpMessages(msgs);\n                            return;\n                        }\n                    }\n                    let fullname = _converse.xmppstatus.get('fullname');\n                    fullname = _.isEmpty(fullname)? _converse.bare_jid: fullname;\n\n                    const message = this.model.messages.create({\n                        fullname,\n                        sender: 'me',\n                        time: moment().format(),\n                        message: text\n                    });\n                    this.sendMessage(message);\n                },\n\n                sendChatState () {\n                    /* Sends a message with the status of the user in this chat session\n                     * as taken from the 'chat_state' attribute of the chat box.\n                     * See XEP-0085 Chat State Notifications.\n                     */\n                    _converse.connection.send(\n                        $msg({'to':this.model.get('jid'), 'type': 'chat'})\n                            .c(this.model.get('chat_state'), {'xmlns': Strophe.NS.CHATSTATES}).up()\n                            .c('no-store', {'xmlns': Strophe.NS.HINTS}).up()\n                            .c('no-permanent-store', {'xmlns': Strophe.NS.HINTS})\n                    );\n                },\n\n                setChatState (state, no_save) {\n                    /* Mutator for setting the chat state of this chat session.\n                     * Handles clearing of any chat state notification timeouts and\n                     * setting new ones if necessary.\n                     * Timeouts are set when the  state being set is COMPOSING or PAUSED.\n                     * After the timeout, COMPOSING will become PAUSED and PAUSED will become INACTIVE.\n                     * See XEP-0085 Chat State Notifications.\n                     *\n                     *  Parameters:\n                     *    (string) state - The chat state (consts ACTIVE, COMPOSING, PAUSED, INACTIVE, GONE)\n                     *    (Boolean) no_save - Just do the cleanup or setup but don't actually save the state.\n                     */\n                    if (!_.isUndefined(this.chat_state_timeout)) {\n                        window.clearTimeout(this.chat_state_timeout);\n                        delete this.chat_state_timeout;\n                    }\n                    if (state === _converse.COMPOSING) {\n                        this.chat_state_timeout = window.setTimeout(\n                            this.setChatState.bind(this), _converse.TIMEOUTS.PAUSED, _converse.PAUSED);\n                    } else if (state === _converse.PAUSED) {\n                        this.chat_state_timeout = window.setTimeout(\n                            this.setChatState.bind(this), _converse.TIMEOUTS.INACTIVE, _converse.INACTIVE);\n                    }\n                    if (!no_save && this.model.get('chat_state') !== state) {\n                        this.model.set('chat_state', state);\n                    }\n                    return this;\n                },\n\n                onFormSubmitted (ev) {\n                    ev.preventDefault();\n                    const textarea = this.el.querySelector('.chat-textarea'),\n                          message = textarea.value;\n                    textarea.value = '';\n                    textarea.focus();\n                    if (message !== '') {\n                        this.onMessageSubmitted(message);\n                        _converse.emit('messageSend', message);\n                    }\n                    this.setChatState(_converse.ACTIVE);\n                },\n\n                keyPressed (ev) {\n                    /* Event handler for when a key is pressed in a chat box textarea.\n                     */\n                    if (ev.keyCode === KEY.ENTER) {\n                        this.onFormSubmitted(ev);\n                    } else {\n                        // Set chat state to composing if keyCode is not a forward-slash\n                        // (which would imply an internal command and not a message).\n                        this.setChatState(_converse.COMPOSING, ev.keyCode === KEY.FORWARD_SLASH);\n                    }\n                },\n\n                clearMessages (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const result = confirm(__(\"Are you sure you want to clear the messages from this chat box?\"));\n                    if (result === true) {\n                        this.$content.empty();\n                        this.model.messages.reset();\n                        this.model.messages.browserStorage._clear();\n                    }\n                    return this;\n                },\n\n                insertIntoTextArea (value) {\n                    const $textbox = this.$el.find('textarea.chat-textarea');\n                    let existing = $textbox.val();\n                    if (existing && (existing[existing.length-1] !== ' ')) {\n                        existing = existing + ' ';\n                    }\n                    $textbox.focus().val(existing+value+' ');\n                },\n\n                insertEmoji (ev) {\n                    ev.stopPropagation();\n                    this.toggleEmojiMenu();\n                    const target = ev.target.nodeName === 'IMG' ? ev.target.parentElement : ev.target;\n                    this.insertIntoTextArea(target.getAttribute('data-emoji'));\n                },\n\n                toggleEmojiMenu (ev) {\n                    if (!_.isUndefined(ev)) {\n                        ev.stopPropagation();\n                        if (ev.target.classList.contains('emoji-category-picker') ||\n                            ev.target.classList.contains('emoji-skintone-picker') ||\n                                ev.target.classList.contains('emoji-category')) {\n                            return;\n                        }\n                    }\n                    const elements = _.difference(\n                        document.querySelectorAll('.toolbar-menu'),\n                        [this.emoji_picker_view.el]\n                    );\n                    utils.slideInAllElements(elements).then(\n                        _.partial(\n                            utils.slideToggleElement,\n                            this.emoji_picker_view.el\n                        )\n                    );\n                },\n\n                toggleCall (ev) {\n                    ev.stopPropagation();\n                    _converse.emit('callButtonClicked', {\n                        connection: _converse.connection,\n                        model: this.model\n                    });\n                },\n\n                onChatStatusChanged (item) {\n                    const chat_status = item.get('chat_status');\n                    let fullname = item.get('fullname');\n                    fullname = _.isEmpty(fullname)? item.get('jid'): fullname;\n                    if (this.$el.is(':visible')) {\n                        if (chat_status === 'offline') {\n                            this.showStatusNotification(fullname+' '+__('has gone offline'));\n                        } else if (chat_status === 'away') {\n                            this.showStatusNotification(fullname+' '+__('has gone away'));\n                        } else if ((chat_status === 'dnd')) {\n                            this.showStatusNotification(fullname+' '+__('is busy'));\n                        } else if (chat_status === 'online') {\n                            this.$el.find('div.chat-event').remove();\n                        }\n                    }\n                },\n\n                onStatusChanged (item) {\n                    this.showStatusMessage();\n                    _converse.emit('contactStatusMessageChanged', {\n                        'contact': item.attributes,\n                        'message': item.get('status')\n                    });\n                },\n\n                showStatusMessage (msg) {\n                    msg = msg || this.model.get('status');\n                    if (_.isString(msg)) {\n                        this.$el.find('p.user-custom-message').text(msg).attr('title', msg);\n                    }\n                    return this;\n                },\n\n                close (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_converse.connection.connected) {\n                        // Immediately sending the chat state, because the\n                        // model is going to be destroyed afterwards.\n                        this.model.set('chat_state', _converse.INACTIVE);\n                        this.sendChatState();\n                    }\n                    try {\n                        this.model.destroy();\n                    } catch (e) {\n                        _converse.log(e, Strophe.LogLevel.ERROR);\n                    }\n                    this.remove();\n                    _converse.emit('chatBoxClosed', this);\n                    return this;\n                },\n\n                getToolbarOptions (options) {\n                    return _.extend(options || {}, {\n                        'label_clear': __('Clear all messages'),\n                        'label_insert_smiley': __('Insert a smiley'),\n                        'label_start_call': __('Start a call'),\n                        'show_call_button': _converse.visible_toolbar_buttons.call,\n                        'show_clear_button': _converse.visible_toolbar_buttons.clear,\n                        'use_emoji': _converse.visible_toolbar_buttons.emoji,\n                    });\n                },\n\n                renderToolbar (toolbar, options) {\n                    if (!_converse.show_toolbar) { return; }\n                    toolbar = toolbar || tpl_toolbar;\n                    options = _.assign(\n                        this.model.toJSON(),\n                        this.getToolbarOptions(options || {})\n                    );\n                    this.el.querySelector('.chat-toolbar').innerHTML = toolbar(options);\n\n                    var toggle = this.el.querySelector('.toggle-smiley');\n                    toggle.innerHTML = '';\n                    toggle.appendChild(this.emoji_picker_view.render().el);\n                    return this;\n                },\n\n                renderAvatar () {\n                    if (!this.model.get('image')) {\n                        return;\n                    }\n                    const width = _converse.chatview_avatar_width;\n                    const height = _converse.chatview_avatar_height;\n                    const img_src = `data:${this.model.get('image_type')};base64,${this.model.get('image')}`,\n                        canvas = $(tpl_avatar({\n                            'width': width,\n                            'height': height\n                        })).get(0);\n\n                    if (!(canvas.getContext && canvas.getContext('2d'))) {\n                        return this;\n                    }\n                    const ctx = canvas.getContext('2d');\n                    const img = new Image();   // Create new Image object\n                    img.onload = function () {\n                        const ratio = img.width/img.height;\n                        if (ratio < 1) {\n                            ctx.drawImage(img, 0,0, width, height*(1/ratio));\n                        } else {\n                            ctx.drawImage(img, 0,0, width, height*ratio);\n                        }\n\n                    };\n                    img.src = img_src;\n                    this.$el.find('.chat-title').before(canvas);\n                    return this;\n                },\n\n                focus () {\n                    this.$el.find('.chat-textarea').focus();\n                    _converse.emit('chatBoxFocused', this);\n                    return this;\n                },\n\n                hide () {\n                    this.el.classList.add('hidden');\n                    utils.refreshWebkit();\n                    return this;\n                },\n\n                afterShown (focus) {\n                    if (utils.isPersistableModel(this.model)) {\n                        this.model.save();\n                    }\n                    this.setChatState(_converse.ACTIVE);\n                    this.scrollDown();\n                    if (focus) {\n                        this.focus();\n                    }\n                },\n\n                _show (focus) {\n                    /* Inner show method that gets debounced */\n                    if (this.$el.is(':visible') && this.$el.css('opacity') === \"1\") {\n                        if (focus) { this.focus(); }\n                        return;\n                    }\n                    utils.fadeIn(this.el, _.bind(this.afterShown, this, focus));\n                },\n\n                show (focus) {\n                    if (_.isUndefined(this.debouncedShow)) {\n                        /* We wrap the method in a debouncer and set it on the\n                         * instance, so that we have it debounced per instance.\n                         * Debouncing it on the class-level is too broad.\n                         */\n                        this.debouncedShow = _.debounce(this._show, 250, {'leading': true});\n                    }\n                    this.debouncedShow.apply(this, arguments);\n                    return this;\n                },\n\n                hideNewMessagesIndicator () {\n                    const new_msgs_indicator = this.el.querySelector('.new-msgs-indicator');\n                    if (!_.isNull(new_msgs_indicator)) {\n                        new_msgs_indicator.classList.add('hidden');\n                    }\n                },\n\n                markScrolled: function (ev) {\n                    /* Called when the chat content is scrolled up or down.\n                     * We want to record when the user has scrolled away from\n                     * the bottom, so that we don't automatically scroll away\n                     * from what the user is reading when new messages are\n                     * received.\n                     */\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (this.model.get('auto_scrolled')) {\n                        this.model.set({\n                            'scrolled': false,\n                            'auto_scrolled': false\n                        });\n                        return;\n                    }\n                    let scrolled = true;\n                    const is_at_bottom =\n                        (this.$content.scrollTop() + this.$content.innerHeight()) >=\n                            this.$content[0].scrollHeight-10;\n\n                    if (is_at_bottom) {\n                        scrolled = false;\n                        this.onScrolledDown();\n                    }\n                    utils.safeSave(this.model, {'scrolled': scrolled});\n                },\n\n                viewUnreadMessages () {\n                    this.model.save('scrolled', false);\n                    this.scrollDown();\n                },\n\n                _scrollDown () {\n                    /* Inner method that gets debounced */\n                    if (this.$content.is(':visible') && !this.model.get('scrolled')) {\n                        this.$content.scrollTop(this.$content[0].scrollHeight);\n                        this.onScrolledDown();\n                        this.model.save({'auto_scrolled': true});\n                    }\n                },\n\n                onScrolledDown() {\n                    this.hideNewMessagesIndicator();\n                    if (_converse.windowState !== 'hidden') {\n                        this.model.clearUnreadMsgCounter();\n                    }\n                    _converse.emit('chatBoxScrolledDown', {'chatbox': this.model});\n                },\n\n                scrollDown () {\n                    if (_.isUndefined(this.debouncedScrollDown)) {\n                        /* We wrap the method in a debouncer and set it on the\n                         * instance, so that we have it debounced per instance.\n                         * Debouncing it on the class-level is too broad.\n                         */\n                        this.debouncedScrollDown = _.debounce(this._scrollDown, 250);\n                    }\n                    this.debouncedScrollDown.apply(this, arguments);\n                    return this;\n                },\n\n                onWindowStateChanged (state) {\n                    if (this.model.get('num_unread', 0) && !this.model.newMessageWillBeHidden()) {\n                        this.model.clearUnreadMsgCounter();\n                    }\n                }\n            });\n        }\n    });\n\n    return converse;\n}));\n"]}