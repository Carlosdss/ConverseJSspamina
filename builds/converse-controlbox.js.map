{"version":3,"sources":["../src/converse-controlbox.js"],"names":["root","factory","define","$","converse","fp","tpl_add_contact_dropdown","tpl_add_contact_form","tpl_change_status_message","tpl_chat_status","tpl_choose_status","tpl_contacts_panel","tpl_contacts_tab","tpl_controlbox","tpl_controlbox_toggle","tpl_login_panel","tpl_login_tab","tpl_search_contact","tpl_status_option","USERS_PANEL_ID","CHATBOX_TYPE","env","Strophe","Backbone","Promise","utils","_","moment","plugins","add","overrides","_tearDown","__super__","apply","arguments","rosterview","model","off","reset","each","groupview","removeAll","remove","clearSession","controlbox","chatboxes","get","collection","browserStorage","save","ChatBoxes","chatBoxMayBeShown","chatbox","onChatBoxesFetched","resp","_converse","includes","map","addControlBox","connected","ChatBoxViews","onChatBoxAdded","item","view","initialize","ControlBoxView","closeAllChatBoxes","disconnection_cause","LOGOUT","show_controlbox_by_default","close","getChatBoxWidth","$el","is","controlboxtoggle","outerWidth","ChatBox","set","valueOf","ChatBoxView","insertIntoDOM","chatboxviews","el","insertAdjacentElement","__","api","settings","update","allow_logout","default_domain","undefined","locked_domain","sticky_controlbox","xhr_user_search","xhr_user_search_url","LABEL_CONTACTS","id","box_id","type","closed","extend","tagName","className","events","isUndefined","ControlBoxToggle","insertAfter","on","onConnected","hide","show","ensureClosedState","render","waitUntil","then","insertRoster","bind","catch","partial","log","LogLevel","FATAL","innerHTML","toJSON","connection","authenticated","disconnecting","renderLoginPanel","contactspanel","renderContactsPanel","append","loginpanel","LoginPanel","find","ContactsPanel","xmppstatusview","XMPPStatusView","xmppstatus","ev","preventDefault","trigger","emit","callback","addClass","refreshWebkit","onControlBoxToggleHidden","that","fadeIn","updateOnlineCount","switchTab","$tab","target","$sibling","parent","siblings","children","$tab_panel","attr","removeClass","data","showHelpMessages","View","cfg","$parent","html","ANONYMOUS","EXTERNAL","LOGIN","PREBIND","auto_login","authentication","$tabs","label_sign_in","focus","authenticate","$form","connect","jid","$jid_input","$pw_input","password","val","errors","filter","split","length","escapeNode","resource","after","getResourceFromJid","toLowerCase","generateResource","getBareJidFromJid","onConnectStatusChanged","empty","updateStatusUI","$select","chat_status","options","options_list","getPrettyStatus","push","text","$options_target","join","toggleOptions","slideInAllElements","document","querySelectorAll","toggle","renderStatusChangeForm","status_message","input","$xmppstatus","replaceWith","setStatusMessage","setStatus","currentTarget","value","logOut","stat","parent_el","tab_el","createElement","renderTab","debounce","widgets","label_online","label_busy","label_away","label_offline","label_logout","include_offline_state","allow_contact_requests","label_click_to_chat","label_add_contact","classList","chats","isOfType","models","sum","curry","getAttribute","appendChild","tabs","parentNode","querySelector","generateAddContactHTML","label_contact_name","label_search","assign","error_message","label_contact_username","label_add","toggleContactForm","dropdown","slideToggleElement","searchContacts","getJSON","$ul","idx","obj","getNodeFromJid","getDomainFromJid","fullname","addContactFromForm","$input","roster","addAndSubscribe","slideIn","addContactFromList","$target","name","attributes","prepend","$count","getNumOnlineContacts","animate","showControlBox","onClick","e","all","disconnect","afterReconnected"],"mappings":"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","file":"converse-controlbox.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n(function (root, factory) {\n    define([\"jquery.noconflict\",\n            \"converse-core\",\n            \"lodash.fp\",\n            \"tpl!add_contact_dropdown\",\n            \"tpl!add_contact_form\",\n            \"tpl!change_status_message\",\n            \"tpl!chat_status\",\n            \"tpl!choose_status\",\n            \"tpl!contacts_panel\",\n            \"tpl!contacts_tab\",\n            \"tpl!controlbox\",\n            \"tpl!controlbox_toggle\",\n            \"tpl!login_panel\",\n            \"tpl!login_tab\",\n            \"tpl!search_contact\",\n            \"tpl!status_option\",\n            \"converse-chatview\",\n            \"converse-rosterview\"\n    ], factory);\n}(this, function (\n            $,\n            converse,\n            fp,\n            tpl_add_contact_dropdown,\n            tpl_add_contact_form,\n            tpl_change_status_message,\n            tpl_chat_status,\n            tpl_choose_status,\n            tpl_contacts_panel,\n            tpl_contacts_tab,\n            tpl_controlbox,\n            tpl_controlbox_toggle,\n            tpl_login_panel,\n            tpl_login_tab,\n            tpl_search_contact,\n            tpl_status_option\n        ) {\n    \"use strict\";\n\n    const USERS_PANEL_ID = 'users';\n    const CHATBOX_TYPE = 'chatbox';\n    const { Strophe, Backbone, Promise, utils, _, moment } = converse.env;\n\n\n    converse.plugins.add('converse-controlbox', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            _tearDown () {\n                this.__super__._tearDown.apply(this, arguments);\n                if (this.rosterview) {\n                    // Removes roster groups\n                    this.rosterview.model.off().reset();\n                    this.rosterview.each(function (groupview) {\n                        groupview.removeAll();\n                        groupview.remove();\n                    });\n                    this.rosterview.removeAll().remove();\n                }\n            },\n\n            clearSession () {\n                this.__super__.clearSession.apply(this, arguments);\n                const controlbox = this.chatboxes.get('controlbox');\n                if (controlbox &&\n                        controlbox.collection &&\n                        controlbox.collection.browserStorage) {\n                    controlbox.save({'connected': false});\n                }\n            },\n\n            ChatBoxes: {\n                chatBoxMayBeShown (chatbox) {\n                    return this.__super__.chatBoxMayBeShown.apply(this, arguments) &&\n                           chatbox.get('id') !== 'controlbox';\n                },\n\n                onChatBoxesFetched (collection, resp) {\n                    this.__super__.onChatBoxesFetched.apply(this, arguments);\n                    const { _converse } = this.__super__;\n                    if (!_.includes(_.map(collection, 'id'), 'controlbox')) {\n                        _converse.addControlBox();\n                    }\n                    this.get('controlbox').save({connected:true});\n                },\n            },\n\n            ChatBoxViews: {\n                onChatBoxAdded (item) {\n                    const { _converse } = this.__super__;\n                    if (item.get('box_id') === 'controlbox') {\n                        let view = this.get(item.get('id'));\n                        if (view) {\n                            view.model = item;\n                            view.initialize();\n                            return view;\n                        } else {\n                            view = new _converse.ControlBoxView({model: item});\n                            return this.add(item.get('id'), view);\n                        }\n                    } else {\n                        return this.__super__.onChatBoxAdded.apply(this, arguments);\n                    }\n                },\n\n                closeAllChatBoxes () {\n                    const { _converse } = this.__super__;\n                    this.each(function (view) {\n                        if (view.model.get('id') === 'controlbox' &&\n                                (_converse.disconnection_cause !== _converse.LOGOUT || _converse.show_controlbox_by_default)) {\n                            return;\n                        }\n                        view.close();\n                    });\n                    return this;\n                },\n\n                getChatBoxWidth (view) {\n                    const { _converse } = this.__super__;\n                    const controlbox = this.get('controlbox');\n                    if (view.model.get('id') === 'controlbox') {\n                        /* We return the width of the controlbox or its toggle,\n                         * depending on which is visible.\n                         */\n                        if (!controlbox || !controlbox.$el.is(':visible')) {\n                            return _converse.controlboxtoggle.$el.outerWidth(true);\n                        } else {\n                            return controlbox.$el.outerWidth(true);\n                        }\n                    } else {\n                        return this.__super__.getChatBoxWidth.apply(this, arguments);\n                    }\n                }\n            },\n\n            ChatBox: {\n                initialize () {\n                    if (this.get('id') === 'controlbox') {\n                        this.set({'time_opened': moment(0).valueOf()});\n                    } else {\n                        this.__super__.initialize.apply(this, arguments);\n                    }\n                },\n            },\n\n            ChatBoxView: {\n                insertIntoDOM () {\n                    const view = this.__super__._converse.chatboxviews.get(\"controlbox\");\n                    if (view) {\n                        view.el.insertAdjacentElement('afterend', this.el)\n                    } else {\n                        this.__super__.insertIntoDOM.apply(this, arguments);\n                    }\n                    return this;\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __ } = _converse;\n\n            _converse.api.settings.update({\n                allow_logout: true,\n                default_domain: undefined,\n                locked_domain: undefined,\n                show_controlbox_by_default: false,\n                sticky_controlbox: false,\n                xhr_user_search: false,\n                xhr_user_search_url: ''\n            });\n\n            const LABEL_CONTACTS = __('Contacts');\n\n            _converse.addControlBox = () => {\n                _converse.chatboxes.add({\n                    id: 'controlbox',\n                    box_id: 'controlbox',\n                    type: 'controlbox',\n                    closed: !_converse.show_controlbox_by_default\n                })\n            };\n\n            _converse.ControlBoxView = _converse.ChatBoxView.extend({\n                tagName: 'div',\n                className: 'chatbox',\n                id: 'controlbox',\n                events: {\n                    'click a.close-chatbox-button': 'close',\n                    'click ul#controlbox-tabs li a': 'switchTab',\n                },\n\n                initialize () {\n                    if (_.isUndefined(_converse.controlboxtoggle)) {\n                        _converse.controlboxtoggle = new _converse.ControlBoxToggle();\n                        this.$el.insertAfter(_converse.controlboxtoggle.$el);\n                    }\n                    this.model.on('change:connected', this.onConnected, this);\n                    this.model.on('destroy', this.hide, this);\n                    this.model.on('hide', this.hide, this);\n                    this.model.on('show', this.show, this);\n                    this.model.on('change:closed', this.ensureClosedState, this);\n                    this.render();\n                    if (this.model.get('connected')) {\n                        _converse.api.waitUntil('rosterViewInitialized')\n                            .then(this.insertRoster.bind(this))\n                            .catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n                    }\n                },\n\n                render () {\n                    if (this.model.get('connected')) {\n                        if (_.isUndefined(this.model.get('closed'))) {\n                            this.model.set('closed', !_converse.show_controlbox_by_default);\n                        }\n                    }\n                    if (!this.model.get('closed')) {\n                        this.show();\n                    } else {\n                        this.hide();\n                    }\n                    this.el.innerHTML = tpl_controlbox(\n                        _.extend(this.model.toJSON(), {\n                            'sticky_controlbox': _converse.sticky_controlbox\n                        }));\n\n                    if (!_converse.connection.connected ||\n                            !_converse.connection.authenticated ||\n                            _converse.connection.disconnecting) {\n                        this.renderLoginPanel();\n                    } else if (this.model.get('connected') &&\n                            (!this.contactspanel || !this.contactspanel.$el.is(':visible'))) {\n                        this.renderContactsPanel();\n                    }\n                    return this;\n                },\n\n                onConnected () {\n                    if (this.model.get('connected')) {\n                        this.render();\n                        _converse.api.waitUntil('rosterViewInitialized')\n                            .then(this.insertRoster.bind(this))\n                            .catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n                        this.model.save();\n                    }\n                },\n\n                insertRoster () {\n                    /* Place the rosterview inside the \"Contacts\" panel.\n                     */\n                    this.contactspanel.$el.append(_converse.rosterview.$el);\n                    return this;\n                },\n\n                renderLoginPanel () {\n                    this.loginpanel = new _converse.LoginPanel({\n                        '$parent': this.$el.find('.controlbox-panes'),\n                        'model': this\n                    });\n                    this.loginpanel.render();\n                    return this;\n                },\n\n                renderContactsPanel () {\n                    if (_.isUndefined(this.model.get('active-panel'))) {\n                        this.model.save({'active-panel': USERS_PANEL_ID});\n                    }\n                    this.contactspanel = new _converse.ContactsPanel({\n                        '$parent': this.$el.find('.controlbox-panes')\n                    });\n                    this.contactspanel.insertIntoDOM();\n\n                    _converse.xmppstatusview = new _converse.XMPPStatusView({\n                        'model': _converse.xmppstatus\n                    });\n                    _converse.xmppstatusview.render();\n                },\n\n                close (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (_converse.sticky_controlbox) {\n                        return;\n                    }\n                    if (_converse.connection.connected && !_converse.connection.disconnecting) {\n                        this.model.save({'closed': true});\n                    } else {\n                        this.model.trigger('hide');\n                    }\n                    _converse.emit('controlBoxClosed', this);\n                    return this;\n                },\n\n                ensureClosedState () {\n                    if (this.model.get('closed')) {\n                        this.hide();\n                    } else {\n                        this.show();\n                    }\n                },\n\n                hide (callback) {\n                    if (_converse.sticky_controlbox) {\n                        return;\n                    }\n                    this.$el.addClass('hidden');\n                    utils.refreshWebkit();\n                    _converse.emit('chatBoxClosed', this);\n                    if (!_converse.connection.connected) {\n                        _converse.controlboxtoggle.render();\n                    }\n                    _converse.controlboxtoggle.show(callback);\n                    return this;\n                },\n\n                onControlBoxToggleHidden () {\n                    const that = this;\n                    utils.fadeIn(this.el, function () {\n                        _converse.controlboxtoggle.updateOnlineCount();\n                        utils.refreshWebkit();\n                        that.model.set('closed', false);\n                        _converse.emit('controlBoxOpened', that);\n                    });\n                },\n\n                show () {\n                    _converse.controlboxtoggle.hide(\n                        this.onControlBoxToggleHidden.bind(this)\n                    );\n                    return this;\n                },\n\n                switchTab (ev) {\n                    // TODO: automatically focus the relevant input\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const $tab = $(ev.target),\n                        $sibling = $tab.parent().siblings('li').children('a'),\n                        $tab_panel = $($tab.attr('href'));\n                    $($sibling.attr('href')).addClass('hidden');\n                    $sibling.removeClass('current');\n                    $tab.addClass('current');\n                    $tab_panel.removeClass('hidden');\n                    if (!_.isUndefined(_converse.chatboxes.browserStorage)) {\n                        this.model.save({'active-panel': $tab.data('id')});\n                    }\n                    return this;\n                },\n\n                showHelpMessages () {\n                    /* Override showHelpMessages in ChatBoxView, for now do nothing.\n                     *\n                     * Parameters:\n                     *  (Array) msgs: Array of messages\n                     */\n                    return;\n                }\n            });\n\n\n            _converse.LoginPanel = Backbone.View.extend({\n                tagName: 'div',\n                id: \"login-dialog\",\n                className: 'controlbox-pane',\n                events: {\n                    'submit form#converse-login': 'authenticate'\n                },\n\n                initialize (cfg) {\n                    cfg.$parent.html(this.$el.html(\n                        tpl_login_panel({\n                            'ANONYMOUS': _converse.ANONYMOUS,\n                            'EXTERNAL': _converse.EXTERNAL,\n                            'LOGIN': _converse.LOGIN,\n                            'PREBIND': _converse.PREBIND,\n                            'auto_login': _converse.auto_login,\n                            'authentication': _converse.authentication,\n                            'label_username': __('XMPP Username:'),\n                            'label_password': __('Password:'),\n                            'label_anon_login': __('Click here to log in anonymously'),\n                            'label_login': __('Log In'),\n                            'placeholder_username': (_converse.locked_domain || _converse.default_domain) && __('Username') || __('user@server'),\n                            'placeholder_password': __('password')\n                        })\n                    ));\n                    this.$tabs = cfg.$parent.parent().find('#controlbox-tabs');\n                },\n\n                render () {\n                    this.$tabs.append(tpl_login_tab({label_sign_in: __('Sign in')}));\n                    this.$el.find('input#jid').focus();\n                    if (!this.$el.is(':visible')) {\n                        this.$el.show();\n                    }\n                    return this;\n                },\n\n                authenticate (ev) {\n                    /* Authenticate the user based on a form submission event.\n                     */\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const $form = $(ev.target);\n                    if (_converse.authentication === _converse.ANONYMOUS) {\n                        this.connect($form, _converse.jid, null);\n                        return;\n                    }\n                    const $jid_input = $form.find('input[name=jid]');\n                    const $pw_input = $form.find('input[name=password]');\n                    const password = $pw_input.val();\n\n                    let jid = $jid_input.val(),\n                        errors = false;\n\n                    if (!jid || (\n                            !_converse.locked_domain &&\n                            !_converse.default_domain &&\n                            _.filter(jid.split('@')).length < 2)) {\n                        errors = true;\n                        $jid_input.addClass('error');\n                    }\n\n                    if (!password && _converse.authentication !== _converse.EXTERNAL)  {\n                        errors = true;\n                        $pw_input.addClass('error');\n                    }\n                    if (errors) { return; }\n                    if (_converse.locked_domain) {\n                        jid = Strophe.escapeNode(jid) + '@' + _converse.locked_domain;\n                    } else if (_converse.default_domain && !_.includes(jid, '@')) {\n                        jid = jid + '@' + _converse.default_domain;\n                    }\n                    this.connect($form, jid, password);\n                    return false;\n                },\n\n                connect ($form, jid, password) {\n                    let resource;\n                    if ($form) {\n                        $form.find('input[type=submit]').hide().after('<span class=\"spinner login-submit\"/>');\n                    }\n                    if (jid) {\n                        resource = Strophe.getResourceFromJid(jid);\n                        if (!resource) {\n                            jid = jid.toLowerCase() + _converse.generateResource();\n                        } else {\n                            jid = Strophe.getBareJidFromJid(jid).toLowerCase()+'/'+resource;\n                        }\n                    }\n                    _converse.connection.reset();\n                    _converse.connection.connect(jid, password, _converse.onConnectStatusChanged);\n                },\n\n                remove () {\n                    this.$tabs.empty();\n                    this.$el.parent().empty();\n                }\n            });\n\n\n            _converse.XMPPStatusView = Backbone.View.extend({\n                el: \"form#set-xmpp-status\",\n                events: {\n                    \"click a.choose-xmpp-status\": \"toggleOptions\",\n                    \"click #fancy-xmpp-status-select a.change-xmpp-status-message\": \"renderStatusChangeForm\",\n                    \"submit\": \"setStatusMessage\",\n                    \"click .dropdown dd ul li a\": \"setStatus\"\n                },\n\n                initialize () {\n                    this.model.on(\"change:status\", this.updateStatusUI, this);\n                    this.model.on(\"change:status_message\", this.updateStatusUI, this);\n                    this.model.on(\"update-status-ui\", this.updateStatusUI, this);\n                },\n\n                render () {\n                    // Replace the default dropdown with something nicer\n                    const $select = this.$el.find('select#select-xmpp-status');\n                    const chat_status = this.model.get('status') || 'offline';\n                    const options = $('option', $select);\n                    const options_list = [];\n                    this.$el.html(tpl_choose_status());\n                    this.$el.find('#fancy-xmpp-status-select')\n                            .html(tpl_chat_status({\n                                'status_message': this.model.get('status_message') || __(\"I am %1$s\", this.getPrettyStatus(chat_status)),\n                                'chat_status': chat_status,\n                                'desc_custom_status': __('Click here to write a custom status message'),\n                                'desc_change_status': __('Click to change your chat status')\n                                }));\n                    // iterate through all the <option> elements and add option values\n                    options.each(function () {\n                        options_list.push(tpl_status_option({\n                            'value': $(this).val(),\n                            'text': this.text\n                        }));\n                    });\n                    const $options_target = this.$el.find(\"#target dd ul\").hide();\n                    $options_target.append(options_list.join(''));\n                    $select.remove();\n                    return this;\n                },\n\n                toggleOptions (ev) {\n                    ev.preventDefault();\n                    utils.slideInAllElements(\n                        document.querySelectorAll('#conversejs .contact-form-container')\n                    );\n                    $(ev.target).parent().parent().siblings('dd').find('ul').toggle('fast');\n                },\n\n                renderStatusChangeForm (ev) {\n                    ev.preventDefault();\n                    const status_message = _converse.xmppstatus.get('status_message') || '';\n                    const input = tpl_change_status_message({\n                        'status_message': status_message,\n                        'label_custom_status': __('Custom status'),\n                        'label_save': __('Save')\n                    });\n                    const $xmppstatus = this.$el.find('.xmpp-status');\n                    $xmppstatus.parent().addClass('no-border');\n                    $xmppstatus.replaceWith(input);\n                    this.$el.find('.custom-xmpp-status').focus().focus();\n                },\n\n                setStatusMessage (ev) {\n                    ev.preventDefault();\n                    this.model.setStatusMessage($(ev.target).find('input').val());\n                },\n\n                setStatus (ev) {\n                    ev.preventDefault();\n                    const $el = $(ev.currentTarget),\n                        value = $el.attr('data-value');\n                    if (value === 'logout') {\n                        this.$el.find(\".dropdown dd ul\").hide();\n                        _converse.logOut();\n                    } else {\n                        this.model.setStatus(value);\n                        this.$el.find(\".dropdown dd ul\").hide();\n                    }\n                },\n\n                getPrettyStatus (stat) {\n                    if (stat === 'chat') {\n                        return __('online');\n                    } else if (stat === 'dnd') {\n                        return __('busy');\n                    } else if (stat === 'xa') {\n                        return __('away for long');\n                    } else if (stat === 'away') {\n                        return __('away');\n                    } else if (stat === 'offline') {\n                        return __('offline');\n                    } else {\n                        return __(stat) || __('online');\n                    }\n                },\n\n                updateStatusUI (model) {\n                    const stat = model.get('status');\n                    // For translators: the %1$s part gets replaced with the status\n                    // Example, I am online\n                    const status_message = model.get('status_message') || __(\"I am %1$s\", this.getPrettyStatus(stat));\n                    this.$el.find('#fancy-xmpp-status-select').removeClass('no-border').html(\n                        tpl_chat_status({\n                            'chat_status': stat,\n                            'status_message': status_message,\n                            'desc_custom_status': __('Click here to write a custom status message'),\n                            'desc_change_status': __('Click to change your chat status')\n                        }));\n                }\n            });\n\n\n            _converse.ContactsPanel = Backbone.View.extend({\n                tagName: 'div',\n                className: 'controlbox-pane',\n                id: 'users',\n                events: {\n                    'click a.toggle-xmpp-contact-form': 'toggleContactForm',\n                    'submit form.add-xmpp-contact': 'addContactFromForm',\n                    'submit form.search-xmpp-contact': 'searchContacts',\n                    'click a.subscribe-to-user': 'addContactFromList'\n                },\n\n                initialize (cfg) {\n                    this.parent_el = cfg.$parent[0];\n                    this.tab_el = document.createElement('li');\n                    _converse.chatboxes.on('change:num_unread', this.renderTab, this);\n                    _converse.chatboxes.on('add', _.debounce(this.renderTab, 100), this);\n                },\n\n                render () {\n                    this.renderTab();\n\n                    let widgets = tpl_contacts_panel({\n                        label_online: __('Online'),\n                        label_busy: __('Busy'),\n                        label_away: __('Away'),\n                        label_offline: __('Offline'),\n                        label_logout: __('Log out'),\n                        include_offline_state: _converse.include_offline_state,\n                        allow_logout: _converse.allow_logout\n                    });\n                    if (_converse.allow_contact_requests) {\n                        widgets += tpl_add_contact_dropdown({\n                            label_click_to_chat: __('Click to add new chat contacts'),\n                            label_add_contact: __('Add a contact')\n                        });\n                    }\n                    this.el.innerHTML = widgets;\n\n                    const controlbox = _converse.chatboxes.get('controlbox');\n                    if (controlbox.get('active-panel') !== USERS_PANEL_ID) {\n                        this.el.classList.add('hidden');\n                    }\n                    return this;\n                },\n\n                renderTab () {\n                    const controlbox = _converse.chatboxes.get('controlbox');\n                    const chats = fp.filter(_.partial(utils.isOfType, CHATBOX_TYPE), _converse.chatboxes.models);\n                    this.tab_el.innerHTML = tpl_contacts_tab({\n                        'label_contacts': LABEL_CONTACTS,\n                        'is_current': controlbox.get('active-panel') === USERS_PANEL_ID,\n                        'num_unread': fp.sum(fp.map(fp.curry(utils.getAttribute)('num_unread'), chats))\n                    });\n                },\n\n                insertIntoDOM () {\n                    this.parent_el.appendChild(this.render().el);\n                    this.tabs = this.parent_el.parentNode.querySelector('#controlbox-tabs');\n                    this.tabs.appendChild(this.tab_el);\n                    return this;\n                },\n\n                generateAddContactHTML (settings={}) {\n                    if (_converse.xhr_user_search) {\n                        return tpl_search_contact({\n                            label_contact_name: __('Contact name'),\n                            label_search: __('Search')\n                        });\n                    } else {\n                        return tpl_add_contact_form(_.assign({\n                            error_message: null,\n                            label_contact_username: __('e.g. user@example.org'),\n                            label_add: __('Add'),\n                            value: ''\n                        }, settings));\n                    }\n                },\n\n                toggleContactForm (ev) {\n                    ev.preventDefault();\n                    this.el.querySelector('.search-xmpp div').innerHTML = this.generateAddContactHTML();\n                    var dropdown = this.el.querySelector('.contact-form-container');\n                    utils.slideToggleElement(dropdown).then(() => {\n                        if ($(dropdown).is(':visible')) {\n                            $(dropdown).find('input.username').focus();\n                        }\n                    });\n                },\n\n                searchContacts (ev) {\n                    ev.preventDefault();\n                    $.getJSON(_converse.xhr_user_search_url+ \"?q=\" + $(ev.target).find('input.username').val(), function (data) {\n                        const $ul= $('.search-xmpp ul');\n                        $ul.find('li.found-user').remove();\n                        $ul.find('li.chat-info').remove();\n                        if (!data.length) {\n                            $ul.append(`<li class=\"chat-info\">${__('No users found')}</li>`);\n                        }\n                        $(data).each(function (idx, obj) {\n                            $ul.append(\n                                $('<li class=\"found-user\"></li>')\n                                .append(\n                                    $(`<a class=\"subscribe-to-user\" href=\"#\" title=\"${__('Click to add as a chat contact')}\"></a>`)\n                                    .attr('data-recipient', Strophe.getNodeFromJid(obj.id)+\"@\"+Strophe.getDomainFromJid(obj.id))\n                                    .text(obj.fullname)\n                                )\n                            );\n                        });\n                    });\n                },\n\n                addContactFromForm (ev) {\n                    ev.preventDefault();\n                    const $input = $(ev.target).find('input');\n                    const jid = $input.val();\n                    if (!jid || _.filter(jid.split('@')).length < 2) {\n                        this.el.querySelector('.search-xmpp div').innerHTML =\n                            this.generateAddContactHTML({\n                                error_message: __('Please enter a valid XMPP username'),\n                                label_contact_username: __('e.g. user@example.org'),\n                                label_add: __('Add'),\n                                value: jid\n                            });\n                        return;\n                    }\n                    _converse.roster.addAndSubscribe(jid);\n                    utils.slideIn(this.el.querySelector('.contact-form-container'));\n                },\n\n                addContactFromList (ev) {\n                    ev.preventDefault();\n                    const $target = $(ev.target),\n                        jid = $target.attr('data-recipient'),\n                        name = $target.text();\n                    _converse.roster.addAndSubscribe(jid, name);\n                    $target.parent().remove();\n                    utils.slideIn(this.el.querySelector('.contact-form-container'));\n                }\n            });\n\n\n            _converse.ControlBoxToggle = Backbone.View.extend({\n                tagName: 'a',\n                className: 'toggle-controlbox hidden',\n                id: 'toggle-controlbox',\n                events: {\n                    'click': 'onClick'\n                },\n                attributes: {\n                    'href': \"#\"\n                },\n\n                initialize () {\n                    _converse.chatboxviews.$el.prepend(this.render().el);\n                    this.updateOnlineCount();\n                    const that = this;\n                    _converse.api.waitUntil('initialized').then(() => {\n                        _converse.roster.on(\"add\", that.updateOnlineCount, that);\n                        _converse.roster.on('change', that.updateOnlineCount, that);\n                        _converse.roster.on(\"destroy\", that.updateOnlineCount, that);\n                        _converse.roster.on(\"remove\", that.updateOnlineCount, that);\n                    }).catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n                },\n\n                render () {\n                    // We let the render method of ControlBoxView decide whether\n                    // the ControlBox or the Toggle must be shown. This prevents\n                    // artifacts (i.e. on page load the toggle is shown only to then\n                    // seconds later be hidden in favor of the control box).\n                    this.el.innerHTML = tpl_controlbox_toggle({\n                        'label_toggle': __('Toggle chat')\n                    })\n                    return this;\n                },\n\n                updateOnlineCount: _.debounce(function () {\n                    if (_.isUndefined(_converse.roster)) {\n                        return;\n                    }\n                    const $count = this.$('#online-count');\n                    $count.text(`(${_converse.roster.getNumOnlineContacts()})`);\n                    if (!$count.is(':visible')) {\n                        $count.show();\n                    }\n                }, _converse.animate ? 100 : 0),\n\n                hide (callback) {\n                    this.el.classList.add('hidden');\n                    callback();\n                },\n\n                show (callback) {\n                    utils.fadeIn(this.el, callback);\n                },\n\n                showControlBox () {\n                    let controlbox = _converse.chatboxes.get('controlbox');\n                    if (!controlbox) {\n                        controlbox = _converse.addControlBox();\n                    }\n                    if (_converse.connection.connected) {\n                        controlbox.save({closed: false});\n                    } else {\n                        controlbox.trigger('show');\n                    }\n                },\n\n                onClick (e) {\n                    e.preventDefault();\n                    if ($(\"div#controlbox\").is(':visible')) {\n                        const controlbox = _converse.chatboxes.get('controlbox');\n                        if (_converse.connection.connected) {\n                            controlbox.save({closed: true});\n                        } else {\n                            controlbox.trigger('hide');\n                        }\n                    } else {\n                        this.showControlBox();\n                    }\n                }\n            });\n\n            Promise.all([\n                _converse.api.waitUntil('connectionInitialized'),\n                _converse.api.waitUntil('chatBoxesInitialized')\n            ]).then(_converse.addControlBox)\n              .catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n\n            const disconnect =  function () {\n                /* Upon disconnection, set connected to `false`, so that if\n                 * we reconnect,\n                 * \"onConnected\" will be called, to fetch the roster again and\n                 * to send out a presence stanza.\n                 */\n                const view = _converse.chatboxviews.get('controlbox');\n                view.model.set({connected:false});\n                view.$('#controlbox-tabs').empty();\n                view.renderLoginPanel();\n            };\n            _converse.on('disconnected', disconnect);\n\n            const afterReconnected = function () {\n                /* After reconnection makes sure the controlbox's is aware.\n                 */\n                const view = _converse.chatboxviews.get('controlbox');\n                if (view.model.get('connected')) {\n                    _converse.chatboxviews.get(\"controlbox\").onConnected();\n                } else {\n                    view.model.set({connected:true});\n                }\n            };\n            _converse.on('reconnected', afterReconnected);\n        }\n    });\n}));\n"]}