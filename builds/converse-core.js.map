{"version":3,"sources":["../src/converse-core.js"],"names":["root","factory","define","sizzle","Promise","_","polyfill","utils","moment","Strophe","pluggable","Backbone","$build","$iq","$msg","$pres","b64_sha1","SHA1","templateSettings","_converse","extend","Events","core_plugins","enable","STATUS_WEIGHTS","PRETTY_CHAT_STATUS","ANONYMOUS","CLOSED","EXTERNAL","LOGIN","LOGOUT","OPENED","PREBIND","PRETTY_CONNECTION_STATUS","DEFAULT_IMAGE_TYPE","DEFAULT_IMAGE","log","message","level","Error","stack","logger","assign","get","console","bind","noop","LogLevel","ERROR","debug","trace","error","WARN","warn","FATAL","DEBUG","info","PROMISES","addPromise","promise","promises","getWrappedPromise","emit","name","trigger","apply","arguments","isUndefined","resolve","initialize","settings","callback","init_promise","each","connection","controlboxtoggle","reset","off","stopListening","_tearDown","unloadevent","window","msg","addNamespace","TIMEOUTS","locale","getLocale","i18n","isConverseLocale","lang","isMomentLocale","__","___","INACTIVE","ACTIVE","COMPOSING","PAUSED","GONE","default_settings","allow_contact_requests","allow_non_roster_messaging","animate","authentication","auto_away","auto_login","auto_reconnect","auto_subscribe","auto_xa","blacklisted_plugins","bosh_service_url","undefined","connection_options","credentials_url","csi_waiting_time","default_state","expose_rid_and_sid","filter_by_resource","forward_messages","hide_offline_users","include_offline_state","jid","keepalive","message_carbons","message_storage","password","prebind_url","priority","registration_domain","rid","roster_groups","show_only_online_users","show_send_button","sid","storage","strict_plugin_dependencies","synchronize_availability","websocket_url","whitelisted_plugins","xhr_custom_status","xhr_custom_status_url","assignIn","pick","keys","send_initial_presence","msg_counter","user_settings","generateResource","Math","floor","random","toString","sendCSI","stat","send","xmlns","NS","CSI","inactive","onUserActivity","idle_seconds","authenticated","auto_changed_status","xmppstatus","setStatus","onEverySecond","getStatus","registerIntervalHandler","addEventListener","everySecondTrigger","setInterval","giveFeedback","subject","klass","forEach","document","querySelectorAll","el","classList","add","textContent","remove","rejectPresenceSubscription","pres","to","type","c","t","reconnect","debounce","reconnecting","logIn","disconnect","onDisconnected","disconnection_cause","Status","AUTHFAIL","disconnection_reason","setDisconnectionCause","cause","reason","override","onConnectStatusChanged","status","condition","CONNECTED","ATTACHED","onConnected","restored","DISCONNECTED","CONNECTING","AUTHENTICATING","CONNFAIL","DISCONNECTING","incrementMsgCounter","unreadMsgCount","title","search","replace","clearMsgCounter","initStatus","reject","XMPPStatus","id","bare_jid","browserStorage","BrowserStorage","fetch","success","initSession","session","Model","clearSession","roster","_clear","logOut","saveWindowState","ev","hidden","state","event_map","createEvent","windowState","registerGlobalEventHandlers","partial","onfocusin","onfocusout","onpageshow","onpagehide","onfocus","onblur","enableCarbons","carbons_iq","Builder","from","CARBONS","addHandler","iq","length","save","carbons_enabled","initRoster","RosterContacts","rostergroups","RosterGroups","populateRoster","fetchRosterGroups","then","fetchRosterContacts","sendInitialPresence","unregisterPresenceHandler","presence_ref","deleteHandler","registerPresenceHandler","presence","presenceHandler","sendPresence","onStatusInitialized","setUserJid","getBareJidFromJid","resource","getResourceFromJid","domain","getDomainFromJid","flush","catch","RosterContact","defaults","attributes","toLowerCase","set","getNodeFromJid","on","removeFromRoster","item","subscribe","up","nick","NICK","ackSubscribe","ackUnsubscribe","destroy","unauthorize","authorize","addResource","getAttribute","chat_status","propertyOf","querySelector","delay","DELAY","timestamp","isNull","format","isNaN","parseInt","resources","isObject","changed","hpr","getHighestPriorityResource","removeResource","size","val","flow","values","sortBy","reverse","ROSTER","subscription","sendIQ","Collection","model","comparator","contact1","contact2","status1","status2","name1","name2","registerRosterHandler","registerRosterXHandler","onRosterPush","setTimeout","subscribeToSuggestedItems","ROSTERX","collection","fetchFromServer","addAndSubscribe","isSelf","isSameBareJID","groups","handler","contact","addContact","sendContactAddIQ","errback","isEmpty","group","create","ask","fullname","requesting","sort","err","alert","subscribeBack","getNumOnlineContacts","ignored","union","sum","models","filter","includes","items","updateContact","getUniqueId","onReceivedFromServer","map","getElementsByTagName","getText","createRequestingContact","nick_el","user_data","handleIncomingSubscription","presence_type","status_message","MUC","RosterGroup","description","contacts","silent","Message","msgid","Messages","ChatBox","messages","valueOf","getMessageBody","getMessageAttributes","original_stanza","body","delayed","is_groupchat","chat_state","unescapeNode","time","sender","createMessage","newMessageWillBeHidden","isScrolledUp","incrementUnreadMsgCounter","stanza","isNewMessage","clearUnreadMsgCounter","has","constructPresence","isString","Number","value","setStatusMessage","xhr","XMLHttpRequest","open","setRequestHeader","prev_status","setUpXMLLogging","xmlInput","outerHTML","xmlOutput","fetchLoginCredentials","onload","data","JSON","parse","responseText","onerror","startNewBOSHSession","attach","restoreBOSHSession","jid_is_required","restore","e","attemptPreboundSession","attemptNonPreboundSession","credentials","autoLogin","connect","isNil","pass","initConnection","Connection","removeEventListener","clearInterval","initPlugins","initialized_plugins","whitelist","concat","initializePlugins","api","update","service","connected","merge","applyUserSettings","key","o","isArray","jids","_transform","pluck","TypeError","_proto","once","options","isFunction","ns","plugin","__name__","plugins"],"mappings":"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","file":"converse-core.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global Backbone, define, window, document, JSON */\n(function (root, factory) {\n    define([\"sizzle\",\n            \"es6-promise\",\n            \"lodash.noconflict\",\n            \"polyfill\",\n            \"utils\",\n            \"moment_with_locales\",\n            \"strophe\",\n            \"pluggable\",\n            \"backbone.noconflict\",\n            \"backbone.browserStorage\",\n            \"backbone.overview\",\n    ], factory);\n}(this, function (\n        sizzle, Promise, _, polyfill,\n        utils, moment, Strophe, pluggable, Backbone) {\n\n    /* Cannot use this due to Safari bug.\n     * See https://github.com/jcbrand/converse.js/issues/196\n     */\n    // \"use strict\";\n\n    // Strophe globals\n    const { $build, $iq, $msg, $pres } = Strophe;\n    const b64_sha1 = Strophe.SHA1.b64_sha1;\n    Strophe = Strophe.Strophe;\n\n    // Use Mustache style syntax for variable interpolation\n    /* Configuration of Lodash templates (this config is distinct to the\n     * config of requirejs-tpl in main.js). This one is for normal inline templates.\n     */\n    _.templateSettings = {\n        'escape': /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n        'evaluate': /\\{\\[([\\s\\S]+?)\\]\\}/g,\n        'interpolate': /\\{\\{([\\s\\S]+?)\\}\\}/g\n    };\n\n    const _converse = {\n        'templates': {},\n        'promises': {}\n    }\n\n    _.extend(_converse, Backbone.Events);\n\n    _converse.core_plugins = [\n        'converse-bookmarks',\n        'converse-chatboxes',\n        'converse-chatview',\n        'converse-controlbox',\n        'converse-core',\n        'converse-disco',\n        'converse-dragresize',\n        'converse-headline',\n        'converse-mam',\n        'converse-minimize',\n        'converse-muc',\n        'converse-notification',\n        'converse-otr',\n        'converse-ping',\n        'converse-register',\n        'converse-roomslist',\n        'converse-rosterview',\n        'converse-vcard'\n    ];\n\n    // Make converse pluggable\n    pluggable.enable(_converse, '_converse', 'pluggable');\n\n    // Module-level constants\n    _converse.STATUS_WEIGHTS = {\n        'offline':      6,\n        'unavailable':  5,\n        'xa':           4,\n        'away':         3,\n        'dnd':          2,\n        'chat':         1, // We currently don't differentiate between \"chat\" and \"online\"\n        'online':       1\n    };\n    _converse.PRETTY_CHAT_STATUS = {\n        'offline':      'Offline',\n        'unavailable':  'Unavailable',\n        'xa':           'Extended Away',\n        'away':         'Away',\n        'dnd':          'Do not disturb',\n        'chat':         'Chattty',\n        'online':       'Online'\n    };\n    _converse.ANONYMOUS  = \"anonymous\";\n    _converse.CLOSED = 'closed';\n    _converse.EXTERNAL = \"external\";\n    _converse.LOGIN = \"login\";\n    _converse.LOGOUT = \"logout\";\n    _converse.OPENED = 'opened';\n    _converse.PREBIND = \"prebind\";\n\n    const PRETTY_CONNECTION_STATUS = {\n        0: 'ERROR',\n        1: 'CONNECTING',\n        2: 'CONNFAIL',\n        3: 'AUTHENTICATING',\n        4: 'AUTHFAIL',\n        5: 'CONNECTED',\n        6: 'DISCONNECTED',\n        7: 'DISCONNECTING',\n        8: 'ATTACHED',\n        9: 'REDIRECT'\n    };\n\n    _converse.DEFAULT_IMAGE_TYPE = 'image/png';\n    _converse.DEFAULT_IMAGE = \"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\";\n\n    _converse.log = function (message, level) {\n        if (message instanceof Error) {\n            message = message.stack;\n        }\n        const logger = _.assign({\n                'debug': _.get(console, 'log') ? console.log.bind(console) : _.noop,\n                'error': _.get(console, 'log') ? console.log.bind(console) : _.noop,\n                'info': _.get(console, 'log') ? console.log.bind(console) : _.noop,\n                'warn': _.get(console, 'log') ? console.log.bind(console) : _.noop\n            }, console);\n        if (level === Strophe.LogLevel.ERROR) {\n            if (_converse.debug) {\n                logger.trace(`ERROR: ${message}`);\n            } else {\n                logger.error(`ERROR: ${message}`);\n            }\n        } else if (level === Strophe.LogLevel.WARN) {\n            logger.warn(`WARNING: ${message}`);\n        } else if (level === Strophe.LogLevel.FATAL) {\n            if (_converse.debug) {\n                logger.trace(`FATAL: ${message}`);\n            } else {\n                logger.error(`FATAL: ${message}`);\n            }\n        } else if (_converse.debug) {\n            if (level === Strophe.LogLevel.DEBUG) {\n                logger.debug(`DEBUG: ${message}`);\n            } else {\n                logger.info(`INFO: ${message}`);\n            }\n        }\n    };\n\n    const PROMISES = [\n        'initialized',\n        'cachedRoster',\n        'connectionInitialized',\n        'pluginsInitialized',\n        'roster',\n        'rosterContactsFetched',\n        'rosterGroupsFetched',\n        'rosterInitialized',\n        'statusInitialized'\n    ];\n\n    function addPromise (promise) {\n        /* Private function, used to add a new promise to the ones already\n         * available via the `waitUntil` api method.\n         */\n        _converse.promises[promise] = utils.getWrappedPromise();\n    }\n\n    _converse.emit = function (name) {\n        /* Event emitter and promise resolver */\n        _converse.trigger.apply(this, arguments);\n        const promise = _converse.promises[name];\n        if (!_.isUndefined(promise)) {\n            promise.resolve();\n        }\n    };\n\n    _converse.initialize = function (settings, callback) {\n        \"use strict\";\n        settings = !_.isUndefined(settings) ? settings : {};\n        const init_promise = utils.getWrappedPromise();\n\n        _.each(PROMISES, addPromise);\n\n        if (!_.isUndefined(_converse.connection)) {\n            // Looks like _converse.initialized was called again without logging\n            // out or disconnecting in the previous session.\n            // This happens in tests. We therefore first clean up.\n            delete _converse.controlboxtoggle;\n            _converse.connection.reset();\n            _converse.off();\n            _converse.stopListening();\n            _converse._tearDown();\n        }\n\n        let unloadevent;\n        if ('onpagehide' in window) {\n            // Pagehide gets thrown in more cases than unload. Specifically it\n            // gets thrown when the page is cached and not just\n            // closed/destroyed. It's the only viable event on mobile Safari.\n            // https://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/\n            unloadevent = 'pagehide';\n        } else if ('onbeforeunload' in window) {\n            unloadevent = 'beforeunload';\n        } else if ('onunload' in window) {\n            unloadevent = 'unload';\n        }\n\n        // Logging\n        Strophe.log = function (level, msg) { _converse.log(level+' '+msg, level); };\n        Strophe.error = function (msg) { _converse.log(msg, Strophe.LogLevel.ERROR); };\n\n        // Add Strophe Namespaces\n        Strophe.addNamespace('CARBONS', 'urn:xmpp:carbons:2');\n        Strophe.addNamespace('CHATSTATES', 'http://jabber.org/protocol/chatstates');\n        Strophe.addNamespace('CSI', 'urn:xmpp:csi:0');\n        Strophe.addNamespace('DELAY', 'urn:xmpp:delay');\n        Strophe.addNamespace('HINTS', 'urn:xmpp:hints');\n        Strophe.addNamespace('MAM', 'urn:xmpp:mam:2');\n        Strophe.addNamespace('NICK', 'http://jabber.org/protocol/nick');\n        Strophe.addNamespace('PUBSUB', 'http://jabber.org/protocol/pubsub');\n        Strophe.addNamespace('ROSTERX', 'http://jabber.org/protocol/rosterx');\n        Strophe.addNamespace('RSM', 'http://jabber.org/protocol/rsm');\n        Strophe.addNamespace('XFORM', 'jabber:x:data');\n\n        // Instance level constants\n        this.TIMEOUTS = { // Set as module attr so that we can override in tests.\n            'PAUSED':     10000,\n            'INACTIVE':   90000\n        };\n\n        // Internationalization\n        this.locale = utils.getLocale(settings.i18n, utils.isConverseLocale);\n        if (!moment.locale) {\n            //moment.lang is deprecated after 2.8.1, use moment.locale instead\n            moment.locale = moment.lang;\n        }\n        moment.locale(utils.getLocale(settings.i18n, utils.isMomentLocale));\n        const __ = _converse.__ = utils.__.bind(_converse);\n        _converse.___ = utils.___;\n\n        // XEP-0085 Chat states\n        // http://xmpp.org/extensions/xep-0085.html\n        this.INACTIVE = 'inactive';\n        this.ACTIVE = 'active';\n        this.COMPOSING = 'composing';\n        this.PAUSED = 'paused';\n        this.GONE = 'gone';\n\n        // Default configuration values\n        // ----------------------------\n        this.default_settings = {\n            allow_contact_requests: true,\n            allow_non_roster_messaging: false,\n            animate: true,\n            authentication: 'login', // Available values are \"login\", \"prebind\", \"anonymous\" and \"external\".\n            auto_away: 0, // Seconds after which user status is set to 'away'\n            auto_login: false, // Currently only used in connection with anonymous login\n            auto_reconnect: false,\n            auto_subscribe: false,\n            auto_xa: 0, // Seconds after which user status is set to 'xa'\n            blacklisted_plugins: [],\n            bosh_service_url: undefined,\n            connection_options: {},\n            credentials_url: null, // URL from where login credentials can be fetched\n            csi_waiting_time: 0, // Support for XEP-0352. Seconds before client is considered idle and CSI is sent out.\n            debug: false,\n            default_state: 'online',\n            expose_rid_and_sid: false,\n            filter_by_resource: false,\n            forward_messages: false,\n            hide_offline_users: false,\n            include_offline_state: false,\n            jid: undefined,\n            keepalive: true,\n            message_carbons: true,\n            message_storage: 'session',\n            password: undefined,\n            prebind_url: null,\n            priority: 0,\n            registration_domain: '',\n            rid: undefined,\n            roster_groups: true,\n            show_only_online_users: false,\n            show_send_button: false,\n            sid: undefined,\n            storage: 'session',\n            strict_plugin_dependencies: false,\n            synchronize_availability: true,\n            websocket_url: undefined,\n            whitelisted_plugins: [],\n            xhr_custom_status: false,\n            xhr_custom_status_url: '',\n        };\n        _.assignIn(this, this.default_settings);\n        // Allow only whitelisted configuration attributes to be overwritten\n        _.assignIn(this, _.pick(settings, _.keys(this.default_settings)));\n\n        if (this.authentication === _converse.ANONYMOUS) {\n            if (this.auto_login && !this.jid) {\n                throw new Error(\"Config Error: you need to provide the server's \" +\n                      \"domain via the 'jid' option when using anonymous \" +\n                      \"authentication with auto_login.\");\n            }\n        }\n\n        // Module-level variables\n        // ----------------------\n        this.callback = callback || _.noop;\n        /* When reloading the page:\n         * For new sessions, we need to send out a presence stanza to notify\n         * the server/network that we're online.\n         * When re-attaching to an existing session (e.g. via the keepalive\n         * option), we don't need to again send out a presence stanza, because\n         * it's as if \"we never left\" (see onConnectStatusChanged).\n         * https://github.com/jcbrand/converse.js/issues/521\n         */\n        this.send_initial_presence = true;\n        this.msg_counter = 0;\n        this.user_settings = settings; // Save the user settings so that they can be used by plugins\n\n        // Module-level functions\n        // ----------------------\n\n        this.generateResource = () => `/converse.js-${Math.floor(Math.random()*139749825).toString()}`;\n\n        this.sendCSI = function (stat) {\n            /* Send out a Chat Status Notification (XEP-0352)\n             *\n             * Parameters:\n             *  (String) stat: The user's chat status\n             */\n            /* Send out a Chat Status Notification (XEP-0352) */\n            // XXX if (converse.features[Strophe.NS.CSI] || true) {\n            _converse.connection.send($build(stat, {xmlns: Strophe.NS.CSI}));\n            _converse.inactive = (stat === _converse.INACTIVE) ? true : false;\n        };\n\n        this.onUserActivity = function () {\n            /* Resets counters and flags relating to CSI and auto_away/auto_xa */\n            if (_converse.idle_seconds > 0) {\n                _converse.idle_seconds = 0;\n            }\n            if (!_converse.connection.authenticated) {\n                // We can't send out any stanzas when there's no authenticated connection.\n                // converse can happen when the connection reconnects.\n                return;\n            }\n            if (_converse.inactive) {\n                _converse.sendCSI(_converse.ACTIVE);\n            }\n            if (_converse.auto_changed_status === true) {\n                _converse.auto_changed_status = false;\n                // XXX: we should really remember the original state here, and\n                // then set it back to that...\n                _converse.xmppstatus.setStatus(_converse.default_state);\n            }\n        };\n\n        this.onEverySecond = function () {\n            /* An interval handler running every second.\n             * Used for CSI and the auto_away and auto_xa features.\n             */\n            if (!_converse.connection.authenticated) {\n                // We can't send out any stanzas when there's no authenticated connection.\n                // This can happen when the connection reconnects.\n                return;\n            }\n            const stat = _converse.xmppstatus.getStatus();\n            _converse.idle_seconds++;\n            if (_converse.csi_waiting_time > 0 &&\n                    _converse.idle_seconds > _converse.csi_waiting_time &&\n                    !_converse.inactive) {\n                _converse.sendCSI(_converse.INACTIVE);\n            }\n            if (_converse.auto_away > 0 &&\n                    _converse.idle_seconds > _converse.auto_away &&\n                    stat !== 'away' && stat !== 'xa' && stat !== 'dnd') {\n                _converse.auto_changed_status = true;\n                _converse.xmppstatus.setStatus('away');\n            } else if (_converse.auto_xa > 0 &&\n                    _converse.idle_seconds > _converse.auto_xa &&\n                    stat !== 'xa' && stat !== 'dnd') {\n                _converse.auto_changed_status = true;\n                _converse.xmppstatus.setStatus('xa');\n            }\n        };\n\n        this.registerIntervalHandler = function () {\n            /* Set an interval of one second and register a handler for it.\n             * Required for the auto_away, auto_xa and csi_waiting_time features.\n             */\n            if (_converse.auto_away < 1 && _converse.auto_xa < 1 && _converse.csi_waiting_time < 1) {\n                // Waiting time of less then one second means features aren't used.\n                return;\n            }\n            _converse.idle_seconds = 0;\n            _converse.auto_changed_status = false; // Was the user's status changed by _converse.js?\n            window.addEventListener('click', _converse.onUserActivity);\n            window.addEventListener('focus', _converse.onUserActivity);\n            window.addEventListener('keypress', _converse.onUserActivity);\n            window.addEventListener('mousemove', _converse.onUserActivity);\n            window.addEventListener(unloadevent, _converse.onUserActivity);\n            _converse.everySecondTrigger = window.setInterval(_converse.onEverySecond, 1000);\n        };\n\n        this.giveFeedback = function (subject, klass, message) {\n            _.forEach(document.querySelectorAll('.conn-feedback'), (el) => {\n                el.classList.add('conn-feedback');\n                el.textContent = subject;\n                if (klass) {\n                    el.classList.add(klass);\n                } else {\n                    el.classList.remove('error');\n                }\n            });\n            _converse.emit('feedback', {\n                'klass': klass,\n                'message': message,\n                'subject': subject\n            });\n        };\n\n        this.rejectPresenceSubscription = function (jid, message) {\n            /* Reject or cancel another user's subscription to our presence updates.\n             *\n             *  Parameters:\n             *    (String) jid - The Jabber ID of the user whose subscription\n             *      is being canceled.\n             *    (String) message - An optional message to the user\n             */\n            const pres = $pres({to: jid, type: \"unsubscribed\"});\n            if (message && message !== \"\") { pres.c(\"status\").t(message); }\n            _converse.connection.send(pres);\n        };\n\n        this.reconnect = _.debounce(function () {\n            _converse.log('RECONNECTING');\n            _converse.log('The connection has dropped, attempting to reconnect.');\n            _converse.giveFeedback(\n                __(\"Reconnecting\"),\n                'warn',\n                __('The connection has dropped, attempting to reconnect.')\n            );\n            _converse.connection.reconnecting = true;\n            _converse._tearDown();\n            _converse.logIn(null, true);\n        }, 3000, {'leading': true});\n\n        this.disconnect = function () {\n            _converse.log('DISCONNECTED');\n            delete _converse.connection.reconnecting;\n            _converse.connection.reset();\n            _converse._tearDown();\n            _converse.emit('disconnected');\n        };\n\n        this.onDisconnected = function () {\n            /* Gets called once strophe's status reaches Strophe.Status.DISCONNECTED.\n             * Will either start a teardown process for converse.js or attempt\n             * to reconnect.\n             */\n            if (_converse.disconnection_cause === Strophe.Status.AUTHFAIL) {\n                if (_converse.credentials_url && _converse.auto_reconnect) {\n                    /* In this case, we reconnect, because we might be receiving\n                     * expirable tokens from the credentials_url.\n                     */\n                    _converse.emit('will-reconnect');\n                    return _converse.reconnect();\n                } else {\n                    return _converse.disconnect();\n                }\n            } else if (_converse.disconnection_cause === _converse.LOGOUT ||\n                    _converse.disconnection_reason === \"host-unknown\" ||\n                    !_converse.auto_reconnect) {\n                return _converse.disconnect();\n            }\n            _converse.emit('will-reconnect');\n            _converse.reconnect();\n        };\n\n        this.setDisconnectionCause = function (cause, reason, override) {\n            /* Used to keep track of why we got disconnected, so that we can\n             * decide on what the next appropriate action is (in onDisconnected)\n             */\n            if (_.isUndefined(cause)) {\n                delete _converse.disconnection_cause;\n                delete _converse.disconnection_reason;\n            } else if (_.isUndefined(_converse.disconnection_cause) || override) {\n                _converse.disconnection_cause = cause;\n                _converse.disconnection_reason = reason;\n            }\n        };\n\n        this.onConnectStatusChanged = function (status, condition) {\n            /* Callback method called by Strophe as the Strophe.Connection goes\n             * through various states while establishing or tearing down a\n             * connection.\n             */\n            _converse.log(`Status changed to: ${PRETTY_CONNECTION_STATUS[status]}`);\n            if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\n                // By default we always want to send out an initial presence stanza.\n                _converse.send_initial_presence = true;\n                _converse.setDisconnectionCause();\n                if (_converse.connection.reconnecting) {\n                    _converse.log(status === Strophe.Status.CONNECTED ? 'Reconnected' : 'Reattached');\n                    _converse.onConnected(true);\n                } else {\n                    _converse.log(status === Strophe.Status.CONNECTED ? 'Connected' : 'Attached');\n                    if (_converse.connection.restored) {\n                        // No need to send an initial presence stanza when\n                        // we're restoring an existing session.\n                        _converse.send_initial_presence = false;\n                    }\n                    _converse.onConnected();\n                }\n            } else if (status === Strophe.Status.DISCONNECTED) {\n                _converse.setDisconnectionCause(status, condition);\n                _converse.onDisconnected();\n            } else if (status === Strophe.Status.ERROR) {\n                _converse.giveFeedback(\n                    __('Connection error'), 'error',\n                    __('An error occurred while connecting to the chat server.')\n                );\n            } else if (status === Strophe.Status.CONNECTING) {\n                _converse.giveFeedback(__('Connecting'));\n            } else if (status === Strophe.Status.AUTHENTICATING) {\n                _converse.giveFeedback(__('Authenticating'));\n            } else if (status === Strophe.Status.AUTHFAIL) {\n                _converse.giveFeedback(__('Authentication Failed'), 'error');\n                _converse.setDisconnectionCause(status, condition, true);\n                _converse.onDisconnected();\n            } else if (status === Strophe.Status.CONNFAIL) {\n                _converse.giveFeedback(\n                    __('Connection failed'), 'error',\n                    __('An error occurred while connecting to the chat server: '+condition)\n                );\n                _converse.setDisconnectionCause(status, condition);\n            } else if (status === Strophe.Status.DISCONNECTING) {\n                _converse.setDisconnectionCause(status, condition);\n            }\n        };\n\n        this.incrementMsgCounter = function () {\n            this.msg_counter += 1;\n            const unreadMsgCount = this.msg_counter;\n            if (document.title.search(/^Messages \\(\\d+\\) /) === -1) {\n                document.title = `Messages (${unreadMsgCount}) ${document.title}`;\n            } else {\n                document.title = document.title.replace(\n                    /^Messages \\(\\d+\\) /, `Messages (${unreadMsgCount}) `\n                );\n            }\n        };\n\n        this.clearMsgCounter = function () {\n            this.msg_counter = 0;\n            if (document.title.search(/^Messages \\(\\d+\\) /) !== -1) {\n                document.title = document.title.replace(/^Messages \\(\\d+\\) /, \"\");\n            }\n        };\n\n        this.initStatus = () => \n            new Promise((resolve, reject) => {\n                const promise = new utils.getWrappedPromise();\n                this.xmppstatus = new this.XMPPStatus();\n                const id = b64_sha1(`converse.xmppstatus-${_converse.bare_jid}`);\n                this.xmppstatus.id = id; // Appears to be necessary for backbone.browserStorage\n                this.xmppstatus.browserStorage = new Backbone.BrowserStorage[_converse.storage](id);\n                this.xmppstatus.fetch({\n                    success: resolve,\n                    error: resolve\n                });\n                _converse.emit('statusInitialized');\n            });\n\n        this.initSession = function () {\n            _converse.session = new Backbone.Model();\n            const id = b64_sha1('converse.bosh-session');\n            _converse.session.id = id; // Appears to be necessary for backbone.browserStorage\n            _converse.session.browserStorage = new Backbone.BrowserStorage[_converse.storage](id);\n            _converse.session.fetch();\n        };\n\n        this.clearSession = function () {\n            if (!_.isUndefined(this.roster)) {\n                this.roster.browserStorage._clear();\n            }\n            if (!_.isUndefined(this.session) && this.session.browserStorage) {\n                this.session.browserStorage._clear();\n            }\n        };\n\n        this.logOut = function () {\n            _converse.clearSession();\n            _converse.setDisconnectionCause(_converse.LOGOUT, undefined, true);\n            if (!_.isUndefined(_converse.connection)) {\n                _converse.connection.disconnect();\n            } else {\n                _converse._tearDown();\n            }\n            _converse.emit('logout');\n        };\n\n        this.saveWindowState = function (ev, hidden) {\n            // XXX: eventually we should be able to just use\n            // document.visibilityState (when we drop support for older\n            // browsers).\n            let state;\n            const event_map = {\n                'focus': \"visible\",\n                'focusin': \"visible\",\n                'pageshow': \"visible\",\n                'blur': \"hidden\",\n                'focusout': \"hidden\",\n                'pagehide': \"hidden\"\n            };\n            ev = ev || document.createEvent('Events');\n            if (ev.type in event_map) {\n                state = event_map[ev.type];\n            } else {\n                state = document[hidden] ? \"hidden\" : \"visible\";\n            }\n            if (state  === 'visible') {\n                _converse.clearMsgCounter();\n            }\n            _converse.windowState = state;\n            _converse.emit('windowStateChanged', {state});\n        };\n\n        this.registerGlobalEventHandlers = function () {\n            // Taken from:\n            // http://stackoverflow.com/questions/1060008/is-there-a-way-to-detect-if-a-browser-window-is-not-currently-active\n            let hidden = \"hidden\";\n            // Standards:\n            if (hidden in document) {\n                document.addEventListener(\"visibilitychange\", _.partial(_converse.saveWindowState, _, hidden));\n            } else if ((hidden = \"mozHidden\") in document) {\n                document.addEventListener(\"mozvisibilitychange\", _.partial(_converse.saveWindowState, _, hidden));\n            } else if ((hidden = \"webkitHidden\") in document) {\n                document.addEventListener(\"webkitvisibilitychange\", _.partial(_converse.saveWindowState, _, hidden));\n            } else if ((hidden = \"msHidden\") in document) {\n                document.addEventListener(\"msvisibilitychange\", _.partial(_converse.saveWindowState, _, hidden));\n            } else if (\"onfocusin\" in document) {\n                // IE 9 and lower:\n                document.onfocusin = document.onfocusout = _.partial(_converse.saveWindowState, _, hidden);\n            } else {\n                // All others:\n                window.onpageshow = window.onpagehide = window.onfocus = window.onblur = _.partial(_converse.saveWindowState, _, hidden);\n            }\n            // set the initial state (but only if browser supports the Page Visibility API)\n            if( document[hidden] !== undefined ) {\n                _.partial(_converse.saveWindowState, _, hidden)({type: document[hidden] ? \"blur\" : \"focus\"});\n            }\n        };\n\n        this.enableCarbons = function () {\n            /* Ask the XMPP server to enable Message Carbons\n             * See XEP-0280 https://xmpp.org/extensions/xep-0280.html#enabling\n             */\n            if (!this.message_carbons || this.session.get('carbons_enabled')) {\n                return;\n            }\n            const carbons_iq = new Strophe.Builder('iq', {\n                from: this.connection.jid,\n                id: 'enablecarbons',\n                type: 'set'\n              })\n              .c('enable', {xmlns: Strophe.NS.CARBONS});\n            this.connection.addHandler((iq) => {\n                if (iq.querySelectorAll('error').length > 0) {\n                    _converse.log(\n                        'An error occured while trying to enable message carbons.',\n                        Strophe.LogLevel.ERROR);\n                } else {\n                    this.session.save({carbons_enabled: true});\n                    _converse.log('Message carbons have been enabled.');\n                }\n            }, null, \"iq\", null, \"enablecarbons\");\n            this.connection.send(carbons_iq);\n        };\n\n        this.initRoster = function () {\n            /* Initialize the Bakcbone collections that represent the contats\n             * roster and the roster groups.\n             */\n            _converse.roster = new _converse.RosterContacts();\n            _converse.roster.browserStorage = new Backbone.BrowserStorage.session(\n                b64_sha1(`converse.contacts-${_converse.bare_jid}`));\n            _converse.rostergroups = new _converse.RosterGroups();\n            _converse.rostergroups.browserStorage = new Backbone.BrowserStorage.session(\n                b64_sha1(`converse.roster.groups${_converse.bare_jid}`));\n            _converse.emit('rosterInitialized');\n        };\n\n        this.populateRoster = function () {\n            /* Fetch all the roster groups, and then the roster contacts.\n             * Emit an event after fetching is done in each case.\n             */\n            _converse.rostergroups.fetchRosterGroups().then(function () {\n                _converse.emit('rosterGroupsFetched');\n                _converse.roster.fetchRosterContacts().then(function () {\n                    _converse.emit('rosterContactsFetched');\n                    _converse.sendInitialPresence();\n                });\n            });\n        };\n\n        this.unregisterPresenceHandler = function () {\n            if (!_.isUndefined(_converse.presence_ref)) {\n                _converse.connection.deleteHandler(_converse.presence_ref);\n                delete _converse.presence_ref;\n            }\n        };\n\n        this.registerPresenceHandler = function () {\n            _converse.unregisterPresenceHandler();\n            _converse.presence_ref = _converse.connection.addHandler(\n                function (presence) {\n                    _converse.roster.presenceHandler(presence);\n                    return true;\n                }, null, 'presence', null);\n        };\n\n\n        this.sendInitialPresence = function () {\n            if (_converse.send_initial_presence) {\n                _converse.xmppstatus.sendPresence();\n            }\n        };\n\n        this.onStatusInitialized = function (reconnecting) {\n            /* Continue with session establishment (e.g. fetching chat boxes,\n             * populating the roster etc.) necessary once the connection has\n             * been established.\n             */\n            if (reconnecting) {\n                // No need to recreate the roster, otherwise we lose our\n                // cached data. However we still emit an event, to give\n                // event handlers a chance to register views for the\n                // roster and its groups, before we start populating.\n                _converse.emit('rosterReadyAfterReconnection');\n            } else {\n                _converse.registerIntervalHandler();\n                _converse.initRoster();\n            }\n            _converse.roster.onConnected();\n            _converse.populateRoster();\n            _converse.registerPresenceHandler();\n            _converse.giveFeedback(__('Contacts'));\n            if (reconnecting) {\n                _converse.xmppstatus.sendPresence();\n            } else {\n                init_promise.resolve();\n                _converse.emit('initialized');\n            }\n        };\n\n        this.setUserJid = function () {\n            _converse.jid = _converse.connection.jid;\n            _converse.bare_jid = Strophe.getBareJidFromJid(_converse.connection.jid);\n            _converse.resource = Strophe.getResourceFromJid(_converse.connection.jid);\n            _converse.domain = Strophe.getDomainFromJid(_converse.connection.jid);\n        };\n\n        this.onConnected = function (reconnecting) {\n            /* Called as soon as a new connection has been established, either\n             * by logging in or by attaching to an existing BOSH session.\n             */\n            // Solves problem of returned PubSub BOSH response not received\n            // by browser.\n            _converse.connection.flush();\n\n            _converse.setUserJid();\n            _converse.initSession();\n            _converse.enableCarbons();\n\n            // If there's no xmppstatus obj, then we were never connected to\n            // begin with, so we set reconnecting to false.\n            reconnecting = _.isUndefined(_converse.xmppstatus) ? false : reconnecting;\n            if (reconnecting) {\n                _converse.onStatusInitialized(true);\n                _converse.emit('reconnected');\n            } else {\n                _converse.initStatus()\n                    .then(\n                        _.partial(_converse.onStatusInitialized, false),\n                        _.partial(_converse.onStatusInitialized, false))\n                    .catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n                _converse.emit('connected');\n            }\n        };\n\n        this.RosterContact = Backbone.Model.extend({\n\n            defaults: {\n                'bookmarked': false,\n                'chat_state': undefined,\n                'chat_status': 'offline',\n                'groups': [],\n                'image': _converse.DEFAULT_IMAGE,\n                'image_type': _converse.DEFAULT_IMAGE_TYPE,\n                'num_unread': 0,\n                'status': '',\n            },\n\n            initialize (attributes) {\n                const { jid } = attributes;\n                const bare_jid = Strophe.getBareJidFromJid(jid).toLowerCase();\n                const resource = Strophe.getResourceFromJid(jid);\n                attributes.jid = bare_jid;\n                this.set(_.assignIn({\n                    'id': bare_jid,\n                    'jid': bare_jid,\n                    'fullname': bare_jid,\n                    'user_id': Strophe.getNodeFromJid(jid),\n                    'resources': resource ? {resource :0} : {},\n                }, attributes));\n\n                this.on('destroy', () => { this.removeFromRoster(); });\n                this.on('change:chat_status', function (item) {\n                    _converse.emit('contactStatusChanged', item.attributes);\n                });\n            },\n\n            subscribe (message) {\n                /* Send a presence subscription request to this roster contact\n                 *\n                 * Parameters:\n                 *    (String) message - An optional message to explain the\n                 *      reason for the subscription request.\n                 */\n                this.save('ask', \"subscribe\"); // ask === 'subscribe' Means we have ask to subscribe to them.\n                const pres = $pres({to: this.get('jid'), type: \"subscribe\"});\n                if (message && message !== \"\") {\n                    pres.c(\"status\").t(message).up();\n                }\n                const nick = _converse.xmppstatus.get('fullname');\n                if (nick && nick !== \"\") {\n                    pres.c('nick', {'xmlns': Strophe.NS.NICK}).t(nick).up();\n                }\n                _converse.connection.send(pres);\n                return this;\n            },\n\n            ackSubscribe () {\n                /* Upon receiving the presence stanza of type \"subscribed\",\n                 * the user SHOULD acknowledge receipt of that subscription\n                 * state notification by sending a presence stanza of type\n                 * \"subscribe\" to the contact\n                 */\n                _converse.connection.send($pres({\n                    'type': 'subscribe',\n                    'to': this.get('jid')\n                }));\n            },\n\n            ackUnsubscribe () {\n                /* Upon receiving the presence stanza of type \"unsubscribed\",\n                 * the user SHOULD acknowledge receipt of that subscription state\n                 * notification by sending a presence stanza of type \"unsubscribe\"\n                 * this step lets the user's server know that it MUST no longer\n                 * send notification of the subscription state change to the user.\n                 *  Parameters:\n                 *    (String) jid - The Jabber ID of the user who is unsubscribing\n                 */\n                _converse.connection.send($pres({'type': 'unsubscribe', 'to': this.get('jid')}));\n                this.destroy(); // Will cause removeFromRoster to be called.\n            },\n\n            unauthorize (message) {\n                /* Unauthorize this contact's presence subscription\n                 * Parameters:\n                 *   (String) message - Optional message to send to the person being unauthorized\n                 */\n                _converse.rejectPresenceSubscription(this.get('jid'), message);\n                return this;\n            },\n\n            authorize (message) {\n                /* Authorize presence subscription\n                 * Parameters:\n                 *   (String) message - Optional message to send to the person being authorized\n                 */\n                const pres = $pres({to: this.get('jid'), type: \"subscribed\"});\n                if (message && message !== \"\") {\n                    pres.c(\"status\").t(message);\n                }\n                _converse.connection.send(pres);\n                return this;\n            },\n\n            addResource (presence) {\n                /* Adds a new resource and it's associated attributes as taken\n                 * from the passed in presence stanza.\n                 *\n                 * Also updates the contact's chat_status if the presence has\n                 * higher priority (and is newer).\n                 */\n                const jid = presence.getAttribute('from'),\n                    chat_status = _.propertyOf(presence.querySelector('show'))('textContent') || 'online',\n                    resource = Strophe.getResourceFromJid(jid),\n                    delay = presence.querySelector(\n                        `delay[xmlns=\"${Strophe.NS.DELAY}\"]`\n                    ),\n                    timestamp = _.isNull(delay) ? moment().format() : moment(delay.getAttribute('stamp')).format();\n\n                let priority = _.propertyOf(presence.querySelector('priority'))('textContent') || 0;\n                priority = _.isNaN(parseInt(priority, 10)) ? 0 : parseInt(priority, 10);\n\n                const resources = _.isObject(this.get('resources')) ? this.get('resources') : {};\n                resources[resource] = {\n                    'priority': priority,\n                    'status': chat_status,\n                    'timestamp': timestamp\n                };\n                const changed = {'resources': resources};\n                const hpr = this.getHighestPriorityResource();\n                if (priority == hpr.priority && timestamp == hpr.timestamp) {\n                    // Only set the chat status if this is the newest resource\n                    // with the highest priority\n                    changed.chat_status = chat_status;\n                }\n                this.save(changed);\n                return resources;\n            },\n\n            removeResource (resource) {\n                /* Remove the passed in resource from the contact's resources map.\n                 *\n                 * Also recomputes the chat_status given that there's one less\n                 * resource.\n                 */\n                let resources = this.get('resources');\n                if (!_.isObject(resources)) {\n                    resources = {};\n                } else {\n                    delete resources[resource];\n                }\n                this.save({\n                    'resources': resources,\n                    'chat_status': _.propertyOf(\n                        this.getHighestPriorityResource())('status') || 'offline'\n                });\n            },\n\n            getHighestPriorityResource () {\n                /* Return the resource with the highest priority.\n                 *\n                 * If multiple resources have the same priority, take the\n                 * newest one.\n                 */\n                const resources = this.get('resources');\n                if (_.isObject(resources) && _.size(resources)) {\n                    const val = _.flow(\n                            _.values,\n                            _.partial(_.sortBy, _, ['priority', 'timestamp']),\n                            _.reverse\n                        )(resources)[0];\n                    if (!_.isUndefined(val)) {\n                        return val;\n                    }\n                }\n            },\n\n            removeFromRoster (callback) {\n                /* Instruct the XMPP server to remove this contact from our roster\n                 * Parameters:\n                 *   (Function) callback\n                 */\n                const iq = $iq({type: 'set'})\n                    .c('query', {xmlns: Strophe.NS.ROSTER})\n                    .c('item', {jid: this.get('jid'), subscription: \"remove\"});\n                _converse.connection.sendIQ(iq, callback, callback);\n                return this;\n            }\n        });\n\n\n        this.RosterContacts = Backbone.Collection.extend({\n            model: _converse.RosterContact,\n\n            comparator (contact1, contact2) {\n                const status1 = contact1.get('chat_status') || 'offline';\n                const status2 = contact2.get('chat_status') || 'offline';\n                if (_converse.STATUS_WEIGHTS[status1] === _converse.STATUS_WEIGHTS[status2]) {\n                    const name1 = contact1.get('fullname').toLowerCase();\n                    const name2 = contact2.get('fullname').toLowerCase();\n                    return name1 < name2 ? -1 : (name1 > name2? 1 : 0);\n                } else  {\n                    return _converse.STATUS_WEIGHTS[status1] < _converse.STATUS_WEIGHTS[status2] ? -1 : 1;\n                }\n            },\n\n            onConnected () {\n                /* Called as soon as the connection has been established\n                 * (either after initial login, or after reconnection).\n                 *\n                 * Use the opportunity to register stanza handlers.\n                 */\n                this.registerRosterHandler();\n                this.registerRosterXHandler();\n            },\n\n            registerRosterHandler () {\n                /* Register a handler for roster IQ \"set\" stanzas, which update\n                 * roster contacts.\n                 */\n                _converse.connection.addHandler(\n                    _converse.roster.onRosterPush.bind(_converse.roster),\n                    Strophe.NS.ROSTER, 'iq', \"set\"\n                );\n            },\n\n            registerRosterXHandler () {\n                /* Register a handler for RosterX message stanzas, which are\n                 * used to suggest roster contacts to a user.\n                 */\n                let t = 0;\n                _converse.connection.addHandler(\n                    function (msg) {\n                        window.setTimeout(\n                            function () {\n                                _converse.connection.flush();\n                                _converse.roster.subscribeToSuggestedItems.bind(_converse.roster)(msg);\n                            }, t);\n                        t += msg.querySelectorAll('item').length*250;\n                        return true;\n                    },\n                    Strophe.NS.ROSTERX, 'message', null\n                );\n            },\n\n            fetchRosterContacts () {\n                /* Fetches the roster contacts, first by trying the\n                 * sessionStorage cache, and if that's empty, then by querying\n                 * the XMPP server.\n                 *\n                 * Returns a promise which resolves once the contacts have been\n                 * fetched.\n                 */\n                return new Promise((resolve, reject) => {\n                    this.fetch({\n                        add: true,\n                        success (collection) {\n                            if (collection.length === 0) {\n                                /* We don't have any roster contacts stored in sessionStorage,\n                                * so lets fetch the roster from the XMPP server. We pass in\n                                * 'sendPresence' as callback method, because after initially\n                                * fetching the roster we are ready to receive presence\n                                * updates from our contacts.\n                                */\n                                _converse.send_initial_presence = true;\n                                _converse.roster.fetchFromServer(resolve);\n                            } else {\n                                _converse.emit('cachedRoster', collection);\n                                resolve();\n                            }\n                        }\n                    });\n                });\n            },\n\n            subscribeToSuggestedItems (msg) {\n                _.each(msg.querySelectorAll('item'), function (item) {\n                    if (item.getAttribute('action') === 'add') {\n                        _converse.roster.addAndSubscribe(\n                            item.getAttribute('jid'),\n                            null,\n                            _converse.xmppstatus.get('fullname')\n                        );\n                    }\n                });\n                return true;\n            },\n\n            isSelf (jid) {\n                return utils.isSameBareJID(jid, _converse.connection.jid);\n            },\n\n            addAndSubscribe (jid, name, groups, message, attributes) {\n                /* Add a roster contact and then once we have confirmation from\n                 * the XMPP server we subscribe to that contact's presence updates.\n                 *  Parameters:\n                 *    (String) jid - The Jabber ID of the user being added and subscribed to.\n                 *    (String) name - The name of that user\n                 *    (Array of Strings) groups - Any roster groups the user might belong to\n                 *    (String) message - An optional message to explain the\n                 *      reason for the subscription request.\n                 *    (Object) attributes - Any additional attributes to be stored on the user's model.\n                 */\n                const handler = (contact) => {\n                    if (contact instanceof _converse.RosterContact) {\n                        contact.subscribe(message);\n                    }\n                }\n                this.addContact(jid, name, groups, attributes).then(handler, handler);\n            },\n\n            sendContactAddIQ (jid, name, groups, callback, errback) {\n                /*  Send an IQ stanza to the XMPP server to add a new roster contact.\n                 *\n                 *  Parameters:\n                 *    (String) jid - The Jabber ID of the user being added\n                 *    (String) name - The name of that user\n                 *    (Array of Strings) groups - Any roster groups the user might belong to\n                 *    (Function) callback - A function to call once the IQ is returned\n                 *    (Function) errback - A function to call if an error occured\n                 */\n                name = _.isEmpty(name)? jid: name;\n                const iq = $iq({type: 'set'})\n                    .c('query', {xmlns: Strophe.NS.ROSTER})\n                    .c('item', { jid, name });\n                _.each(groups, function (group) { iq.c('group').t(group).up(); });\n                _converse.connection.sendIQ(iq, callback, errback);\n            },\n\n            addContact (jid, name, groups, attributes) {\n                /* Adds a RosterContact instance to _converse.roster and\n                 * registers the contact on the XMPP server.\n                 * Returns a promise which is resolved once the XMPP server has\n                 * responded.\n                 *\n                 *  Parameters:\n                 *    (String) jid - The Jabber ID of the user being added and subscribed to.\n                 *    (String) name - The name of that user\n                 *    (Array of Strings) groups - Any roster groups the user might belong to\n                 *    (Object) attributes - Any additional attributes to be stored on the user's model.\n                 */\n                return new Promise((resolve, reject) => {\n                    groups = groups || [];\n                    name = _.isEmpty(name)? jid: name;\n                    this.sendContactAddIQ(jid, name, groups,\n                        () => {\n                            const contact = this.create(_.assignIn({\n                                ask: undefined,\n                                fullname: name,\n                                groups,\n                                jid,\n                                requesting: false,\n                                subscription: 'none'\n                            }, attributes), {sort: false});\n                            resolve(contact);\n                        },\n                        function (err) {\n                            alert(__('Sorry, there was an error while trying to add %1$s as a contact.', name));\n                            _converse.log(err, Strophe.LogLevel.ERROR);\n                            resolve(err);\n                        }\n                    );\n                });\n            },\n\n            subscribeBack (bare_jid) {\n                const contact = this.get(bare_jid);\n                if (contact instanceof _converse.RosterContact) {\n                    contact.authorize().subscribe();\n                } else {\n                    // Can happen when a subscription is retried or roster was deleted\n                    const handler = (contact) => {\n                        if (contact instanceof _converse.RosterContact) {\n                            contact.authorize().subscribe();\n                        }\n                    }\n                    this.addContact(bare_jid, '', [], { 'subscription': 'from' }).then(handler, handler);\n                }\n            },\n\n            getNumOnlineContacts () {\n                let ignored = ['offline', 'unavailable'];\n                if (_converse.show_only_online_users) {\n                    ignored = _.union(ignored, ['dnd', 'xa', 'away']);\n                }\n                return _.sum(this.models.filter((model) => !_.includes(ignored, model.get('chat_status'))));\n            },\n\n            onRosterPush (iq) {\n                /* Handle roster updates from the XMPP server.\n                 * See: https://xmpp.org/rfcs/rfc6121.html#roster-syntax-actions-push\n                 *\n                 * Parameters:\n                 *    (XMLElement) IQ - The IQ stanza received from the XMPP server.\n                 */\n                const id = iq.getAttribute('id');\n                const from = iq.getAttribute('from');\n                if (from && from !== \"\" && Strophe.getBareJidFromJid(from) !== _converse.bare_jid) {\n                    // Receiving client MUST ignore stanza unless it has no from or from = user's bare JID.\n                    // XXX: Some naughty servers apparently send from a full\n                    // JID so we need to explicitly compare bare jids here.\n                    // https://github.com/jcbrand/converse.js/issues/493\n                    _converse.connection.send(\n                        $iq({type: 'error', id, from: _converse.connection.jid})\n                            .c('error', {'type': 'cancel'})\n                            .c('service-unavailable', {'xmlns': Strophe.NS.ROSTER })\n                    );\n                    return true;\n                }\n                _converse.connection.send($iq({type: 'result', id, from: _converse.connection.jid}));\n                const items = sizzle(`query[xmlns=\"${Strophe.NS.ROSTER}\"] item`, iq);\n                _.each(items, this.updateContact.bind(this));\n                _converse.emit('rosterPush', iq);\n                return true;\n            },\n\n            fetchFromServer (callback) {\n                /* Get the roster from the XMPP server */\n                const iq = $iq({type: 'get', 'id': _converse.connection.getUniqueId('roster')})\n                    .c('query', {xmlns: Strophe.NS.ROSTER});\n                return _converse.connection.sendIQ(iq, (iq) => {\n                    this.onReceivedFromServer(iq);\n                    callback.apply(this, arguments);\n                });\n            },\n\n            onReceivedFromServer (iq) {\n                /* An IQ stanza containing the roster has been received from\n                 * the XMPP server.\n                 */\n                const items = sizzle(`query[xmlns=\"${Strophe.NS.ROSTER}\"] item`, iq);\n                _.each(items, this.updateContact.bind(this));\n                _converse.emit('roster', iq);\n            },\n\n            updateContact (item) {\n                /* Update or create RosterContact models based on items\n                 * received in the IQ from the server.\n                 */\n                const jid = item.getAttribute('jid');\n                if (this.isSelf(jid)) { return; }\n\n                const contact = this.get(jid),\n                      subscription = item.getAttribute(\"subscription\"),\n                      ask = item.getAttribute(\"ask\"),\n                      groups = _.map(item.getElementsByTagName('group'), Strophe.getText);\n\n                if (!contact) {\n                    if ((subscription === \"none\" && ask === null) || (subscription === \"remove\")) {\n                        return; // We're lazy when adding contacts.\n                    }\n                    this.create({\n                        ask,\n                        fullname: item.getAttribute(\"name\") || jid,\n                        groups,\n                        jid,\n                        subscription\n                    }, {sort: false});\n                } else {\n                    if (subscription === \"remove\") {\n                        return contact.destroy(); // will trigger removeFromRoster\n                    }\n                    // We only find out about requesting contacts via the\n                    // presence handler, so if we receive a contact\n                    // here, we know they aren't requesting anymore.\n                    // see docs/DEVELOPER.rst\n                    contact.save({\n                        subscription,\n                        ask,\n                        requesting: null,\n                        groups\n                    });\n                }\n            },\n\n            createRequestingContact (presence) {\n                /* Creates a Requesting Contact.\n                 *\n                 * Note: this method gets completely overridden by converse-vcard.js\n                 */\n                const bare_jid = Strophe.getBareJidFromJid(presence.getAttribute('from')),\n                      nick_el = presence.querySelector(`nick[xmlns=\"${Strophe.NS.NICK}\"]`);\n                const user_data = {\n                    jid: bare_jid,\n                    subscription: 'none',\n                    ask: null,\n                    requesting: true,\n                    fullname: nick_el && nick_el.textContent || bare_jid,\n                };\n                this.create(user_data);\n                _converse.emit('contactRequest', user_data);\n            },\n\n            handleIncomingSubscription (presence) {\n                const jid = presence.getAttribute('from'),\n                      bare_jid = Strophe.getBareJidFromJid(jid),\n                      contact = this.get(bare_jid);\n\n                if (!_converse.allow_contact_requests) {\n                    _converse.rejectPresenceSubscription(\n                        jid,\n                        __(\"This client does not allow presence subscriptions\")\n                    );\n                }\n                if (_converse.auto_subscribe) {\n                    if ((!contact) || (contact.get('subscription') !== 'to')) {\n                        this.subscribeBack(bare_jid);\n                    } else {\n                        contact.authorize();\n                    }\n                } else {\n                    if (contact) {\n                        if (contact.get('subscription') !== 'none')  {\n                            contact.authorize();\n                        } else if (contact.get('ask') === \"subscribe\") {\n                            contact.authorize();\n                        }\n                    } else {\n                        this.createRequestingContact(presence);\n                    }\n                }\n            },\n\n            presenceHandler (presence) {\n                const presence_type = presence.getAttribute('type');\n                if (presence_type === 'error') { return true; }\n\n                const jid = presence.getAttribute('from'),\n                    bare_jid = Strophe.getBareJidFromJid(jid),\n                    resource = Strophe.getResourceFromJid(jid),\n                    chat_status = _.propertyOf(presence.querySelector('show'))('textContent') || 'online',\n                    status_message = _.propertyOf(presence.querySelector('status'))('textContent'),\n                    contact = this.get(bare_jid);\n\n                if (this.isSelf(bare_jid)) {\n                    if ((_converse.connection.jid !== jid) &&\n                        (presence_type !== 'unavailable') &&\n                        (_converse.synchronize_availability === true ||\n                         _converse.synchronize_availability === resource)) {\n                        // Another resource has changed its status and\n                        // synchronize_availability option set to update,\n                        // we'll update ours as well.\n                        _converse.xmppstatus.save({'status': chat_status});\n                        if (status_message) {\n                            _converse.xmppstatus.save({'status_message': status_message});\n                        }\n                    }\n                    return;\n                } else if (sizzle(`query[xmlns=\"${Strophe.NS.MUC}\"]`, presence).length) {\n                    return; // Ignore MUC\n                }\n                if (contact && (status_message !== contact.get('status'))) {\n                    contact.save({'status': status_message});\n                }\n                if (presence_type === 'subscribed' && contact) {\n                    contact.ackSubscribe();\n                } else if (presence_type === 'unsubscribed' && contact) {\n                    contact.ackUnsubscribe();\n                } else if (presence_type === 'unsubscribe') {\n                    return;\n                } else if (presence_type === 'subscribe') {\n                    this.handleIncomingSubscription(presence);\n                } else if (presence_type === 'unavailable' && contact) {\n                    contact.removeResource(resource);\n                } else if (contact) {\n                    // presence_type is undefined\n                    contact.addResource(presence);\n                }\n            }\n        });\n\n\n        this.RosterGroup = Backbone.Model.extend({\n            initialize (attributes) {\n                this.set(_.assignIn({\n                    description: __('Click to hide these contacts'),\n                    state: _converse.OPENED\n                }, attributes));\n                // Collection of contacts belonging to this group.\n                this.contacts = new _converse.RosterContacts();\n            }\n        });\n\n\n        this.RosterGroups = Backbone.Collection.extend({\n            model: _converse.RosterGroup,\n\n            fetchRosterGroups () {\n                /* Fetches all the roster groups from sessionStorage.\n                 *\n                 * Returns a promise which resolves once the groups have been\n                 * returned.\n                 */\n                return new Promise((resolve, reject) => {\n                    this.fetch({\n                        silent: true, // We need to first have all groups before\n                                    // we can start positioning them, so we set\n                                    // 'silent' to true.\n                        success: resolve\n                    });\n                });\n            }\n        });\n\n\n        this.Message = Backbone.Model.extend({\n            defaults(){\n                return {\n                    msgid: _converse.connection.getUniqueId()\n                };\n            }\n        });\n\n        this.Messages = Backbone.Collection.extend({\n            model: _converse.Message,\n            comparator: 'time'\n        });\n\n        this.ChatBox = Backbone.Model.extend({\n            defaults: {\n                'type': 'chatbox',\n                'bookmarked': false,\n                'chat_state': undefined,\n                'num_unread': 0,\n                'url': ''\n            },\n\n            initialize () {\n                this.messages = new _converse.Messages();\n                this.messages.browserStorage = new Backbone.BrowserStorage[_converse.message_storage](\n                    b64_sha1(`converse.messages${this.get('jid')}${_converse.bare_jid}`));\n                this.save({\n                    // The chat_state will be set to ACTIVE once the chat box is opened\n                    // and we listen for change:chat_state, so shouldn't set it to ACTIVE here.\n                    'box_id' : b64_sha1(this.get('jid')),\n                    'time_opened': this.get('time_opened') || moment().valueOf(),\n                    'user_id' : Strophe.getNodeFromJid(this.get('jid'))\n                });\n            },\n\n            getMessageBody (message) {\n                const type = message.getAttribute('type');\n                return (type === 'error') ?\n                    _.propertyOf(message.querySelector('error text'))('textContent') :\n                        _.propertyOf(message.querySelector('body'))('textContent');\n            },\n\n            getMessageAttributes (message, delay, original_stanza) {\n                delay = delay || message.querySelector('delay');\n                const type = message.getAttribute('type'),\n                      body = this.getMessageBody(message);\n\n                const delayed = !_.isNull(delay),\n                    is_groupchat = type === 'groupchat',\n                    chat_state = message.getElementsByTagName(_converse.COMPOSING).length && _converse.COMPOSING ||\n                        message.getElementsByTagName(_converse.PAUSED).length && _converse.PAUSED ||\n                        message.getElementsByTagName(_converse.INACTIVE).length && _converse.INACTIVE ||\n                        message.getElementsByTagName(_converse.ACTIVE).length && _converse.ACTIVE ||\n                        message.getElementsByTagName(_converse.GONE).length && _converse.GONE;\n\n                let from;\n                if (is_groupchat) {\n                    from = Strophe.unescapeNode(Strophe.getResourceFromJid(message.getAttribute('from')));\n                } else {\n                    from = Strophe.getBareJidFromJid(message.getAttribute('from'));\n                }\n                const time = delayed ? delay.getAttribute('stamp') : moment().format();\n                let sender, fullname;\n                if ((is_groupchat && from === this.get('nick')) || (!is_groupchat && from === _converse.bare_jid)) {\n                    sender = 'me';\n                    fullname = _converse.xmppstatus.get('fullname') || from;\n                } else {\n                    sender = 'them';\n                    fullname = this.get('fullname') || from;\n                }\n                return {\n                    'type': type,\n                    'chat_state': chat_state,\n                    'delayed': delayed,\n                    'fullname': fullname,\n                    'message': body || undefined,\n                    'msgid': message.getAttribute('id'),\n                    'sender': sender,\n                    'time': time\n                };\n            },\n\n            createMessage (message, delay, original_stanza) {\n                return this.messages.create(this.getMessageAttributes.apply(this, arguments));\n            },\n\n            newMessageWillBeHidden () {\n                /* Returns a boolean to indicate whether a newly received\n                 * message will be visible to the user or not.\n                 */\n                return this.get('hidden') ||\n                    this.get('minimized') ||\n                    this.isScrolledUp() ||\n                    _converse.windowState === 'hidden';\n            },\n\n            incrementUnreadMsgCounter (stanza) {\n                /* Given a newly received message, update the unread counter if\n                 * necessary.\n                 */\n                if (_.isNull(stanza.querySelector('body'))) {\n                    return; // The message has no text\n                }\n                if (utils.isNewMessage(stanza) && this.newMessageWillBeHidden()) {\n                    this.save({'num_unread': this.get('num_unread') + 1});\n                    _converse.incrementMsgCounter();\n                }\n            },\n\n            clearUnreadMsgCounter() {\n                this.save({'num_unread': 0});\n            },\n\n            isScrolledUp () {\n                return this.get('scrolled', true);\n            }\n        });\n\n        this.XMPPStatus = Backbone.Model.extend({\n            initialize () {\n                this.set({\n                    'status' : this.getStatus()\n                });\n                this.on('change', (item) => {\n                    if (_.has(item.changed, 'status')) {\n                        _converse.emit('statusChanged', this.get('status'));\n                    }\n                    if (_.has(item.changed, 'status_message')) {\n                        _converse.emit('statusMessageChanged', this.get('status_message'));\n                    }\n                });\n            },\n\n            constructPresence (type, status_message) {\n                let presence;\n                type = _.isString(type) ? type : (this.get('status') || _converse.default_state);\n                status_message = _.isString(status_message) ? status_message : undefined;\n                // Most of these presence types are actually not explicitly sent,\n                // but I add all of them here for reference and future proofing.\n                if ((type === 'unavailable') ||\n                        (type === 'probe') ||\n                        (type === 'error') ||\n                        (type === 'unsubscribe') ||\n                        (type === 'unsubscribed') ||\n                        (type === 'subscribe') ||\n                        (type === 'subscribed')) {\n                    presence = $pres({'type': type});\n                } else if (type === 'offline') {\n                    presence = $pres({'type': 'unavailable'});\n                } else if (type === 'online') {\n                    presence = $pres();\n                } else {\n                    presence = $pres().c('show').t(type).up();\n                }\n                if (status_message) {\n                    presence.c('status').t(status_message).up();\n                }\n                presence.c('priority').t(\n                    _.isNaN(Number(_converse.priority)) ? 0 : _converse.priority\n                );\n                return presence;\n            },\n\n            sendPresence (type, status_message) {\n                _converse.connection.send(this.constructPresence(type, status_message));\n            },\n\n            setStatus (value) {\n                this.sendPresence(value);\n                this.save({'status': value});\n            },\n\n            getStatus () {\n                return this.get('status') || _converse.default_state;\n            },\n\n            setStatusMessage (status_message) {\n                this.sendPresence(this.getStatus(), status_message);\n                this.save({'status_message': status_message});\n                if (this.xhr_custom_status) {\n                    const xhr = new XMLHttpRequest();\n                    xhr.open('POST', this.xhr_custom_status_url, true);\n                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                    xhr.send({'msg': status_message});\n                }\n                const prev_status = this.get('status_message');\n                if (prev_status === status_message) {\n                    this.trigger(\"update-status-ui\", this);\n                }\n            }\n        });\n\n        this.setUpXMLLogging = function () {\n            Strophe.log = function (level, msg) {\n                _converse.log(msg, level);\n            };\n            if (this.debug) {\n                this.connection.xmlInput = function (body) {\n                    _converse.log(body.outerHTML, Strophe.LogLevel.DEBUG);\n                };\n                this.connection.xmlOutput = function (body) {\n                    _converse.log(body.outerHTML, Strophe.LogLevel.DEBUG);\n                };\n            }\n        };\n\n        this.fetchLoginCredentials = () =>\n            new Promise((resolve, reject) => {\n                const xhr = new XMLHttpRequest();\n                xhr.open('GET', _converse.credentials_url, true);\n                xhr.setRequestHeader('Accept', \"application/json, text/javascript\");\n                xhr.onload = function() {\n                    if (xhr.status >= 200 && xhr.status < 400) {\n                        const data = JSON.parse(xhr.responseText);\n                        resolve({\n                            'jid': data.jid,\n                            'password': data.password\n                        });\n                    } else {\n                        xhr.onerror();\n                    }\n                };\n                xhr.onerror = function () {\n                    delete _converse.connection;\n                    _converse.emit('noResumeableSession', this);\n                    reject(xhr.responseText);\n                };\n                xhr.send();\n            });\n\n        this.startNewBOSHSession = function () {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', _converse.prebind_url, true);\n            xhr.setRequestHeader('Accept', \"application/json, text/javascript\");\n            xhr.onload = function() {\n                if (xhr.status >= 200 && xhr.status < 400) {\n                    const data = JSON.parse(xhr.responseText);\n                    _converse.connection.attach(\n                            data.jid, data.sid, data.rid,\n                            _converse.onConnectStatusChanged);\n                } else {\n                    xhr.onerror();\n                }\n            };\n            xhr.onerror = function () {\n                delete _converse.connection;\n                _converse.emit('noResumeableSession', this);\n            };\n            xhr.send();\n        };\n\n        this.restoreBOSHSession = function (jid_is_required) {\n            /* Tries to restore a cached BOSH session. */\n            if (!this.jid) {\n                const msg = \"restoreBOSHSession: tried to restore a \\\"keepalive\\\" session \"+\n                    \"but we don't have the JID for the user!\";\n                if (jid_is_required) {\n                    throw new Error(msg);\n                } else {\n                    _converse.log(msg);\n                }\n            }\n            try {\n                this.connection.restore(this.jid, this.onConnectStatusChanged);\n                return true;\n            } catch (e) {\n                _converse.log(\n                    \"Could not restore session for jid: \"+\n                    this.jid+\" Error message: \"+e.message);\n                this.clearSession(); // If there's a roster, we want to clear it (see #555)\n                return false;\n            }\n        };\n\n        this.attemptPreboundSession = function (reconnecting) {\n            /* Handle session resumption or initialization when prebind is\n             * being used.\n             */\n            if (!reconnecting) {\n                if (this.keepalive && this.restoreBOSHSession(true)) {\n                    return;\n                }\n                // No keepalive, or session resumption has failed.\n                if (this.jid && this.sid && this.rid) {\n                    return this.connection.attach(\n                        this.jid, this.sid, this.rid,\n                        this.onConnectStatusChanged\n                    );\n                }\n            }\n            if (this.prebind_url) {\n                return this.startNewBOSHSession();\n            } else {\n                throw new Error(\n                    \"attemptPreboundSession: If you use prebind and not keepalive, \"+\n                    \"then you MUST supply JID, RID and SID values or a prebind_url.\");\n            }\n        };\n\n        this.attemptNonPreboundSession = function (credentials, reconnecting) {\n            /* Handle session resumption or initialization when prebind is not being used.\n             *\n             * Two potential options exist and are handled in this method:\n             *  1. keepalive\n             *  2. auto_login\n             */\n            if (!reconnecting && this.keepalive && this.restoreBOSHSession()) {\n                return;\n            }\n            if (this.auto_login) {\n                if (credentials) {\n                    // When credentials are passed in, they override prebinding\n                    // or credentials fetching via HTTP\n                    this.autoLogin(credentials);\n                } else if (this.credentials_url) {\n                    this.fetchLoginCredentials().then(\n                        this.autoLogin.bind(this),\n                        this.autoLogin.bind(this)\n                    );\n                } else if (!this.jid) {\n                    throw new Error(\n                        \"attemptNonPreboundSession: If you use auto_login, \"+\n                        \"you also need to give either a jid value (and if \"+\n                        \"applicable a password) or you need to pass in a URL \"+\n                        \"from where the username and password can be fetched \"+\n                        \"(via credentials_url).\"\n                    );\n                } else {\n                    this.autoLogin(); // Probably ANONYMOUS login\n                }\n            } else if (reconnecting) {\n                this.autoLogin();\n            }\n        };\n\n        this.autoLogin = function (credentials) {\n            if (credentials) {\n                // If passed in, the credentials come from credentials_url,\n                // so we set them on the converse object.\n                this.jid = credentials.jid;\n            }\n            if (this.authentication === _converse.ANONYMOUS) {\n                if (!this.jid) {\n                    throw new Error(\"Config Error: when using anonymous login \" +\n                        \"you need to provide the server's domain via the 'jid' option. \" +\n                        \"Either when calling converse.initialize, or when calling \" +\n                        \"_converse.api.user.login.\");\n                }\n                if (!this.connection.reconnecting) {\n                    this.connection.reset();\n                }\n                this.connection.connect(this.jid.toLowerCase(), null, this.onConnectStatusChanged);\n            } else if (this.authentication === _converse.LOGIN) {\n                const password = _.isNil(credentials) ? (_converse.connection.pass || this.password) : credentials.password;\n                if (!password) {\n                    if (this.auto_login) {\n                        throw new Error(\"initConnection: If you use auto_login and \"+\n                            \"authentication='login' then you also need to provide a password.\");\n                    }\n                    _converse.setDisconnectionCause(Strophe.Status.AUTHFAIL, undefined, true);\n                    _converse.disconnect();\n                    return;\n                }\n                const resource = Strophe.getResourceFromJid(this.jid);\n                if (!resource) {\n                    this.jid = this.jid.toLowerCase() + _converse.generateResource();\n                } else {\n                    this.jid = Strophe.getBareJidFromJid(this.jid).toLowerCase()+'/'+resource;\n                }\n                if (!this.connection.reconnecting) {\n                    this.connection.reset();\n                }\n                this.connection.connect(this.jid, password, this.onConnectStatusChanged);\n            }\n        };\n\n        this.logIn = function (credentials, reconnecting) {\n            // We now try to resume or automatically set up a new session.\n            // Otherwise the user will be shown a login form.\n            if (this.authentication === _converse.PREBIND) {\n                this.attemptPreboundSession(reconnecting);\n            } else {\n                this.attemptNonPreboundSession(credentials, reconnecting);\n            }\n        };\n\n        this.initConnection = function () {\n            if (!this.connection) {\n                if (!this.bosh_service_url && ! this.websocket_url) {\n                    throw new Error(\"initConnection: you must supply a value for either the bosh_service_url or websocket_url or both.\");\n                }\n                if (('WebSocket' in window || 'MozWebSocket' in window) && this.websocket_url) {\n                    this.connection = new Strophe.Connection(this.websocket_url, this.connection_options);\n                } else if (this.bosh_service_url) {\n                    this.connection = new Strophe.Connection(\n                        this.bosh_service_url,\n                        _.assignIn(this.connection_options, {'keepalive': this.keepalive})\n                    );\n                } else {\n                    throw new Error(\"initConnection: this browser does not support websockets and bosh_service_url wasn't specified.\");\n                }\n            }\n            _converse.emit('connectionInitialized');\n        };\n\n        this._tearDown = function () {\n            /* Remove those views which are only allowed with a valid\n             * connection.\n             */\n            _converse.emit('beforeTearDown');\n            _converse.unregisterPresenceHandler();\n            if (_converse.roster) {\n                _converse.roster.off().reset(); // Removes roster contacts\n            }\n            if (!_.isUndefined(_converse.session)) {\n                _converse.session.destroy();\n            }\n            window.removeEventListener('click', _converse.onUserActivity);\n            window.removeEventListener('focus', _converse.onUserActivity);\n            window.removeEventListener('keypress', _converse.onUserActivity);\n            window.removeEventListener('mousemove', _converse.onUserActivity);\n            window.removeEventListener(unloadevent, _converse.onUserActivity);\n            window.clearInterval(_converse.everySecondTrigger);\n            _converse.emit('afterTearDown');\n            return _converse;\n        };\n\n        this.initPlugins = function () {\n            // If initialize gets called a second time (e.g. during tests), then we\n            // need to re-apply all plugins (for a new converse instance), and we\n            // therefore need to clear this array that prevents plugins from being\n            // initialized twice.\n            // If initialize is called for the first time, then this array is empty\n            // in any case.\n            _converse.pluggable.initialized_plugins = [];\n            const whitelist = _converse.core_plugins.concat(\n                _converse.whitelisted_plugins);\n\n            _converse.pluggable.initializePlugins({\n                'updateSettings' () {\n                    _converse.log(\n                        \"(DEPRECATION) \"+\n                        \"The `updateSettings` method has been deprecated. \"+\n                        \"Please use `_converse.api.settings.update` instead.\",\n                        Strophe.LogLevel.WARN\n                    )\n                    _converse.api.settings.update.apply(_converse, arguments);\n                },\n                '_converse': _converse\n            }, whitelist, _converse.blacklisted_plugins);\n            _converse.emit('pluginsInitialized');\n        };\n\n        // Initialization\n        // --------------\n        // This is the end of the initialize method.\n        if (settings.connection) {\n            this.connection = settings.connection;\n        }\n        _converse.initPlugins();\n        _converse.initConnection();\n        _converse.setUpXMLLogging();\n        _converse.logIn();\n        _converse.registerGlobalEventHandlers();\n\n        if (!_.isUndefined(_converse.connection) &&\n            _converse.connection.service === 'jasmine tests') {\n            return _converse;\n        } else {\n            return init_promise.promise;\n        }\n    };\n\n    // API methods only available to plugins\n    _converse.api = {\n        'connection': {\n            'connected' () {\n                return _converse.connection && _converse.connection.connected || false;\n            },\n            'disconnect' () {\n                _converse.connection.disconnect();\n            },\n        },\n        'emit' () {\n            _converse.emit.apply(_converse, arguments);\n        },\n        'user': {\n            'jid' () {\n                return _converse.connection.jid;\n            },\n            'login' (credentials) {\n                _converse.initConnection();\n                _converse.logIn(credentials);\n            },\n            'logout' () {\n                _converse.logOut();\n            },\n            'status': {\n                'get' () {\n                    return _converse.xmppstatus.get('status');\n                },\n                'set' (value, message) {\n                    const data = {'status': value};\n                    if (!_.includes(_.keys(_converse.STATUS_WEIGHTS), value)) {\n                        throw new Error('Invalid availability value. See https://xmpp.org/rfcs/rfc3921.html#rfc.section.2.2.2.1');\n                    }\n                    if (_.isString(message)) {\n                        data.status_message = message;\n                    }\n                    _converse.xmppstatus.sendPresence(value);\n                    _converse.xmppstatus.save(data);\n                },\n                'message': {\n                    'get' () {\n                        return _converse.xmppstatus.get('status_message');\n                    },\n                    'set' (stat) {\n                        _converse.xmppstatus.save({'status_message': stat});\n                    }\n                }\n            },\n        },\n        'settings': {\n            'update' (settings) {\n                utils.merge(_converse.default_settings, settings);\n                utils.merge(_converse, settings);\n                utils.applyUserSettings(_converse, settings, _converse.user_settings);\n            },\n            'get' (key) {\n                if (_.includes(_.keys(_converse.default_settings), key)) {\n                    return _converse[key];\n                }\n            },\n            'set' (key, val) {\n                const o = {};\n                if (_.isObject(key)) {\n                    _.assignIn(_converse, _.pick(key, _.keys(_converse.default_settings)));\n                } else if (_.isString(\"string\")) {\n                    o[key] = val;\n                    _.assignIn(_converse, _.pick(o, _.keys(_converse.default_settings)));\n                }\n            }\n        },\n        'promises': {\n            'add' (promises) {\n                promises = _.isArray(promises) ? promises : [promises]\n                _.each(promises, addPromise);\n            }\n        },\n        'contacts': {\n            'get' (jids) {\n                const _transform = function (jid) {\n                    const contact = _converse.roster.get(Strophe.getBareJidFromJid(jid));\n                    if (contact) {\n                        return contact.attributes;\n                    }\n                    return null;\n                };\n                if (_.isUndefined(jids)) {\n                    jids = _converse.roster.pluck('jid');\n                } else if (_.isString(jids)) {\n                    return _transform(jids);\n                }\n                return _.map(jids, _transform);\n            },\n            'add' (jid, name) {\n                if (!_.isString(jid) || !_.includes(jid, '@')) {\n                    throw new TypeError('contacts.add: invalid jid');\n                }\n                _converse.roster.addAndSubscribe(jid, _.isEmpty(name)? jid: name);\n            }\n        },\n        'tokens': {\n            'get' (id) {\n                if (!_converse.expose_rid_and_sid || _.isUndefined(_converse.connection)) {\n                    return null;\n                }\n                if (id.toLowerCase() === 'rid') {\n                    return _converse.connection.rid || _converse.connection._proto.rid;\n                } else if (id.toLowerCase() === 'sid') {\n                    return _converse.connection.sid || _converse.connection._proto.sid;\n                }\n            }\n        },\n        'listen': {\n            'once': _converse.once.bind(_converse),\n            'on': _converse.on.bind(_converse),\n            'not': _converse.off.bind(_converse),\n            'stanza' (name, options, handler) {\n                if (_.isFunction(options)) {\n                    handler = options;\n                    options = {};\n                } else {\n                    options = options || {};\n                }\n                _converse.connection.addHandler(\n                    handler,\n                    options.ns,\n                    name,\n                    options.type,\n                    options.id,\n                    options.from,\n                    options\n                );\n            },\n        },\n        'waitUntil' (name) {\n            const promise = _converse.promises[name];\n            if (_.isUndefined(promise)) {\n                return null;\n            }\n            return promise.promise;\n        },\n        'send' (stanza) {\n            _converse.connection.send(stanza);\n        },\n    };\n\n    // The public API\n    return {\n        'initialize' (settings, callback) {\n            return _converse.initialize(settings, callback);\n        },\n        'plugins': {\n            'add' (name, plugin) {\n                plugin.__name__ = name;\n                if (!_.isUndefined(_converse.pluggable.plugins[name])) {\n                    throw new TypeError(\n                        `Error: plugin with name \"${name}\" has already been `+\n                        'registered!');\n                } else {\n                    _converse.pluggable.plugins[name] = plugin;\n                }\n            }\n        },\n        'env': {\n            '$build': $build,\n            '$iq': $iq,\n            '$msg': $msg,\n            '$pres': $pres,\n            'Backbone': Backbone,\n            'Promise': Promise,\n            'Strophe': Strophe,\n            '_': _,\n            'b64_sha1':  b64_sha1,\n            'moment': moment,\n            'sizzle': sizzle,\n            'utils': utils\n        }\n    };\n}));\n"]}