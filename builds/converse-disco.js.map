{"version":3,"sources":["../src/converse-disco.js"],"names":["root","factory","define","converse","sizzle","env","Backbone","Promise","Strophe","b64_sha1","_","plugins","add","initialize","_converse","onDiscoItems","stanza","each","querySelectorAll","item","getAttribute","jid","entities","disco_entities","isUndefined","get","create","api","promises","DiscoEntity","Model","extend","idAttribute","features","Collection","browserStorage","BrowserStorage","storage","on","onFeatureAdded","identities","fetchFeatures","feature","emit","records","length","queryInfo","fetch","connection","disco","info","onInfo","bind","queryForItems","isEmpty","where","items","forEach","identity","querySelector","NS","DISCO_ITEMS","trigger","DiscoEntities","model","bare_jid","fetchEntities","then","partial","catch","log","LogLevel","FATAL","resolve","reject","success","collection","domain","error","Error","addClientFeatures","addIdentity","addFeature","BOSH","CHATSTATES","DISCO_INFO","ROSTERX","message_carbons","CARBONS","initializeDisco","listen","entity","reset","_clear"],"mappings":"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","file":"converse-disco.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n\n/* This is a Converse.js plugin which add support for XEP-0030: Service Discovery */\n\n/*global Backbone, define, window, document */\n(function (root, factory) {\n    define([\"converse-core\", \"sizzle\", \"strophe.disco\"], factory);\n}(this, function (converse, sizzle) {\n\n    const { Backbone, Promise, Strophe, b64_sha1, _ } = converse.env;\n\n    converse.plugins.add('converse-disco', {\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this;\n\n            function onDiscoItems (stanza) {\n                _.each(stanza.querySelectorAll('query item'), (item) => {\n                    if (item.getAttribute(\"node\")) {\n                        // XXX: ignore nodes for now.\n                        // See: https://xmpp.org/extensions/xep-0030.html#items-nodes\n                        return;\n                    }\n                    const jid = item.getAttribute('jid');\n                    const entities = _converse.disco_entities;\n                    if (_.isUndefined(entities.get(jid))) {\n                        entities.create({'jid': jid});\n                    }\n                });\n            }\n\n            // Promises exposed by this plugin\n            _converse.api.promises.add('discoInitialized');\n\n            _converse.DiscoEntity = Backbone.Model.extend({\n                /* A Disco Entity is a JID addressable entity that can be queried\n                * for features.\n                *\n                * See XEP-0030: https://xmpp.org/extensions/xep-0030.html\n                */\n                idAttribute: 'jid',\n\n                initialize () {\n                    this.features = new Backbone.Collection();\n                    this.features.browserStorage = new Backbone.BrowserStorage[_converse.storage](\n                        b64_sha1(`converse.features-${this.get('jid')}`)\n                    );\n                    this.features.on('add', this.onFeatureAdded);\n\n                    this.identities = new Backbone.Collection();\n                    this.identities.browserStorage = new Backbone.BrowserStorage[_converse.storage](\n                        b64_sha1(`converse.identities-${this.get('jid')}`)\n                    );\n                    this.fetchFeatures();\n                },\n\n                onFeatureAdded (feature) {\n                    _converse.emit('serviceDiscovered', feature);\n                },\n\n                fetchFeatures () {\n                    if (this.features.browserStorage.records.length === 0) {\n                        this.queryInfo();\n                    } else {\n                        this.features.fetch({add: true});\n                        this.identities.fetch({add: true});\n                    }\n                },\n\n                queryInfo () {\n                    _converse.connection.disco.info(this.get('jid'), null, this.onInfo.bind(this));\n                },\n\n                queryForItems () {\n                    if (_.isEmpty(this.identities.where({'category': 'server'}))) {\n                        // Don't fetch features and items if this is not a\n                        // server or a conference component.\n                        return;\n                    }\n                    _converse.connection.disco.items(this.get('jid'), null, onDiscoItems);\n                },\n\n                onInfo (stanza) {\n                    _.forEach(stanza.querySelectorAll('identity'), (identity) => {\n                        this.identities.create({\n                            'category': identity.getAttribute('category'),\n                            'type': stanza.getAttribute('type'),\n                            'name': stanza.getAttribute('name')\n                        });\n                    });\n                    if (stanza.querySelector('feature[var=\"'+Strophe.NS.DISCO_ITEMS+'\"]')) {\n                        this.queryForItems();\n                    }\n                    _.forEach(stanza.querySelectorAll('feature'), (feature) => {\n                        this.features.create({\n                            'var': feature.getAttribute('var'),\n                            'from': stanza.getAttribute('from')\n                        });\n                    });\n                    this.trigger('featuresDiscovered');\n                }\n            });\n\n            _converse.DiscoEntities = Backbone.Collection.extend({\n                model: _converse.DiscoEntity,\n\n                initialize () {\n                    this.browserStorage = new Backbone.BrowserStorage[_converse.storage](\n                        b64_sha1(`converse.disco-entities-${_converse.bare_jid}`)\n                    );\n                    this.fetchEntities().then(\n                        _.partial(_converse.emit, 'discoInitialized'),\n                        _.partial(_converse.emit, 'discoInitialized')\n                    ).catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n                },\n\n                fetchEntities () {\n                    return new Promise((resolve, reject) => {\n                        this.fetch({\n                            add: true,\n                            success: function (collection) {\n                                if (collection.length === 0 || !collection.get(_converse.domain)) {\n                                    this.create({'jid': _converse.domain});\n                                }\n                                resolve();\n                            }.bind(this),\n                            error () {\n                                reject (new Error(\"Could not fetch disco entities\"));\n                            }\n                        });\n                    });\n                }\n            });\n\n            function addClientFeatures () {\n                /* The strophe.disco.js plugin keeps a list of features which\n                 * it will advertise to any #info queries made to it.\n                 *\n                 * See: http://xmpp.org/extensions/xep-0030.html#info\n                 */\n\n                // See http://xmpp.org/registrar/disco-categories.html\n                _converse.connection.disco.addIdentity('client', 'web', 'Converse.js');\n\n                _converse.connection.disco.addFeature(Strophe.NS.BOSH);\n                _converse.connection.disco.addFeature(Strophe.NS.CHATSTATES);\n                _converse.connection.disco.addFeature(Strophe.NS.DISCO_INFO);\n                _converse.connection.disco.addFeature(Strophe.NS.ROSTERX); // Limited support\n                if (_converse.message_carbons) {\n                    _converse.connection.disco.addFeature(Strophe.NS.CARBONS);\n                }\n                _converse.emit('addClientFeatures');\n                return this;\n            }\n\n            function initializeDisco () {\n                addClientFeatures();\n                _converse.disco_entities = new _converse.DiscoEntities();\n            }\n            _converse.api.listen.on('reconnected', initializeDisco);\n            _converse.api.listen.on('connected', initializeDisco);\n\n            _converse.api.listen.on('beforeTearDown', () => {\n                if (_converse.disco_entities) {\n                    _converse.disco_entities.each((entity) => {\n                        entity.features.reset();\n                        entity.features.browserStorage._clear();\n                    });\n                    _converse.disco_entities.reset();\n                    _converse.disco_entities.browserStorage._clear();\n                }\n            });\n        }\n    });\n}));\n"]}