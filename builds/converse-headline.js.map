{"version":3,"sources":["../src/converse-headline.js"],"names":["root","factory","define","converse","tpl_chatbox","env","_","utils","plugins","add","overrides","ChatBoxViews","onChatBoxAdded","item","_converse","__super__","view","get","HeadlinesBoxView","model","apply","arguments","initialize","__","ChatBoxView","extend","className","events","disable_mam","messages","on","onMessageAdded","show","hide","onMinimizedChanged","render","fetchMessages","insertIntoDOM","emit","$el","attr","html","toJSON","show_toolbar","show_textarea","show_send_button","title","unread_msgs","info_close","label_personal_message","$content","find","refreshWebkit","onHeadlineMessage","message","from_jid","getAttribute","isHeadlineMessage","includes","allow_non_roster_messaging","chatbox","chatboxes","create","createMessage","undefined","registerHeadlineHandler","connection","addHandler"],"mappings":"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","file":"converse-headline.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n(function (root, factory) {\n    define([\n            \"converse-core\",\n            \"tpl!chatbox\",\n            \"converse-chatview\",\n    ], factory);\n}(this, function (converse, tpl_chatbox) {\n    \"use strict\";\n    const { _, utils } = converse.env;\n\n    converse.plugins.add('converse-headline', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            ChatBoxViews: {\n                onChatBoxAdded (item) {\n                    const { _converse } = this.__super__;\n                    let view = this.get(item.get('id'));\n                    if (!view && item.get('type') === 'headline') {\n                        view = new _converse.HeadlinesBoxView({model: item});\n                        this.add(item.get('id'), view);\n                        return view;\n                    } else {\n                        return this.__super__.onChatBoxAdded.apply(this, arguments);\n                    }\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __ } = _converse;\n\n            _converse.HeadlinesBoxView = _converse.ChatBoxView.extend({\n                className: 'chatbox headlines',\n\n                events: {\n                    'click .close-chatbox-button': 'close',\n                    'click .toggle-chatbox-button': 'minimize',\n                    'keypress textarea.chat-textarea': 'keyPressed'\n                },\n\n                initialize () {\n                    this.disable_mam = true; // Don't do MAM queries for this box\n                    this.model.messages.on('add', this.onMessageAdded, this);\n                    this.model.on('show', this.show, this);\n                    this.model.on('destroy', this.hide, this);\n                    this.model.on('change:minimized', this.onMinimizedChanged, this);\n                    this.render().fetchMessages().insertIntoDOM().hide();\n                    _converse.emit('chatBoxInitialized', this);\n                },\n\n                render () {\n                    this.$el.attr('id', this.model.get('box_id'))\n                        .html(tpl_chatbox(\n                                _.extend(this.model.toJSON(), {\n                                        show_toolbar: _converse.show_toolbar,\n                                        show_textarea: false,\n                                        show_send_button: _converse.show_send_button,\n                                        title: this.model.get('fullname'),\n                                        unread_msgs: __('You have unread messages'),\n                                        info_close: __('Close this box'),\n                                        label_personal_message: ''\n                                    }\n                                )\n                            )\n                        );\n                    this.$content = this.$el.find('.chat-content');\n                    _converse.emit('chatBoxOpened', this);\n                    utils.refreshWebkit();\n                    return this;\n                }\n            });\n\n            function onHeadlineMessage (message) {\n                /* Handler method for all incoming messages of type \"headline\". */\n                const from_jid = message.getAttribute('from');\n                if (utils.isHeadlineMessage(message)) {\n                    if (_.includes(from_jid, '@') && !_converse.allow_non_roster_messaging) {\n                        return;\n                    }\n                    const chatbox = _converse.chatboxes.create({\n                        'id': from_jid,\n                        'jid': from_jid,\n                        'fullname':  from_jid,\n                        'type': 'headline'\n                    });\n                    chatbox.createMessage(message, undefined, message);\n                    _converse.emit('message', {'chatbox': chatbox, 'stanza': message});\n                }\n                return true;\n            }\n\n            function registerHeadlineHandler () {\n                _converse.connection.addHandler(\n                        onHeadlineMessage, null, 'message');\n            }\n            _converse.on('connected', registerHeadlineHandler);\n            _converse.on('reconnected', registerHeadlineHandler);\n        }\n    });\n}));\n"]}