{"version":3,"sources":["../src/converse-mam.js"],"names":["root","factory","define","$","converse","env","Promise","Strophe","$iq","_","moment","RSM_ATTRIBUTES","MAM_ATTRIBUTES","checkMAMSupport","_converse","api","waitUntil","then","resolve","reject","fulfillPromise","entity","features","findWhere","NS","MAM","disco_entities","get","bare_jid","isUndefined","create","on","partial","plugins","add","overrides","ChatBox","getMessageAttributes","$message","$delay","original_stanza","attrs","__super__","apply","arguments","archive_id","find","attr","ChatBoxView","render","result","disable_mam","$content","debounce","onScroll","bind","fetchArchivedMessagesIfNecessary","model","addSpinner","supported","fetchArchivedMessages","clearSpinner","save","log","LogLevel","ERROR","catch","msg","FATAL","options","WARN","queryForArchivedMessages","extend","archived_messages_page_size","messages","length","each","chatboxes","onMessage","ev","target","scrollTop","at","ChatRoomView","initialize","handleMUCMessage","stanza","is_mam","ROOMSTATUS","ENTERED","that","archive","query","onChatRoomMessage","settings","update","message_archiving","undefined","message_archiving_timeout","callback","errback","date","isFunction","queryid","connection","getUniqueId","groupchat","Error","to","c","XFORM","t","up","isValid","format","TypeError","RSM","cnode","toXML","intersection","keys","message_handler","addHandler","message","querySelector","isNull","getAttribute","push","sendIQ","iq","deleteHandler","set","rsm","xml","pick","concat","onMAMError","onMAMPreferences","feature","$prefs","default_pref","children","idx","child","prefs","disco","addFeature","chatboxview"],"mappings":"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","file":"converse-mam.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n// XEP-0059 Result Set Management\n\n(function (root, factory) {\n    define([\"jquery.noconflict\",\n            \"converse-core\",\n            \"converse-disco\",\n            \"converse-chatview\", // Could be made a soft dependency\n            \"converse-muc\", // Could be made a soft dependency\n            \"strophe.rsm\"\n    ], factory);\n}(this, function ($, converse) {\n    \"use strict\";\n    const { Promise, Strophe, $iq, _, moment } = converse.env;\n\n    const RSM_ATTRIBUTES = ['max', 'first', 'last', 'after', 'before', 'index', 'count'];\n    // XEP-0313 Message Archive Management\n    const MAM_ATTRIBUTES = ['with', 'start', 'end'];\n\n    function checkMAMSupport (_converse) {\n        /* Returns a promise which resolves when MAM is supported\n         * for this user, or which rejects if not.\n         */\n        return _converse.api.waitUntil('discoInitialized').then(() =>\n            new Promise((resolve, reject) => {\n\n                function fulfillPromise (entity) {\n                    if (entity.features.findWhere({'var': Strophe.NS.MAM})) {\n                        resolve(true);\n                    } else {\n                        resolve(false);\n                    }\n                }\n                let entity = _converse.disco_entities.get(_converse.bare_jid);\n                if (_.isUndefined(entity)) {\n                    entity = _converse.disco_entities.create({'jid': _converse.bare_jid});\n                    entity.on('featuresDiscovered', _.partial(fulfillPromise, entity));\n                } else {\n                    fulfillPromise(entity);\n                }\n            })\n        );\n    }\n\n\n    converse.plugins.add('converse-mam', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n            ChatBox: {\n                getMessageAttributes ($message, $delay, original_stanza) {\n                    const attrs = this.__super__.getMessageAttributes.apply(this, arguments);\n                    attrs.archive_id = $(original_stanza).find(`result[xmlns=\"${Strophe.NS.MAM}\"]`).attr('id');\n                    return attrs;\n                }\n            },\n\n            ChatBoxView: {\n                render () {\n                    const result = this.__super__.render.apply(this, arguments);\n                    if (!this.disable_mam) {\n                        this.$content.on('scroll', _.debounce(this.onScroll.bind(this), 100));\n                    }\n                    return result;\n                },\n\n                fetchArchivedMessagesIfNecessary () {\n                    /* Check if archived messages should be fetched, and if so, do so. */\n                    if (this.disable_mam || this.model.get('mam_initialized')) {\n                        return;\n                    }\n                    const { _converse } = this.__super__;\n                    this.addSpinner();\n\n                    checkMAMSupport(_converse).then(\n                        (supported) => { // Success\n                            if (supported) {\n                                this.fetchArchivedMessages();\n                            } else {\n                                this.clearSpinner();\n                            }\n                            this.model.save({'mam_initialized': true});\n                        },\n                        () => { // Error\n                            this.clearSpinner();\n                            _converse.log(\n                                \"Error or timeout while checking for MAM support\",\n                                Strophe.LogLevel.ERROR\n                            );\n                        }\n                    ).catch((msg) => {\n                        this.clearSpinner();\n                        _converse.log(msg, Strophe.LogLevel.FATAL);\n                    });\n                },\n\n                fetchArchivedMessages (options) {\n                    /* Fetch archived chat messages from the XMPP server.\n                     *\n                     * Then, upon receiving them, call onMessage on the chat\n                     * box, so that they are displayed inside it.\n                     */\n                    const { _converse } = this.__super__;\n                    if (!_converse.disco_entities.get(_converse.bare_jid)\n                            .features.findWhere({'var': Strophe.NS.MAM})) {\n\n                        _converse.log(\n                            \"Attempted to fetch archived messages but this \"+\n                            \"user's server doesn't support XEP-0313\",\n                            Strophe.LogLevel.WARN);\n                        return;\n                    }\n                    if (this.disable_mam) {\n                        return;\n                    }\n                    this.addSpinner();\n                    _converse.queryForArchivedMessages(\n                        _.extend({\n                            'before': '', // Page backwards from the most recent message\n                            'max': _converse.archived_messages_page_size,\n                            'with': this.model.get('jid'),\n                        }, options),\n                        (messages) => { // Success\n                            this.clearSpinner();\n                            if (messages.length) {\n                                _.each(messages, _converse.chatboxes.onMessage.bind(_converse.chatboxes));\n                            }\n                        },\n                        () => { // Error\n                            this.clearSpinner();\n                            _converse.log(\n                                \"Error or timeout while trying to fetch \"+\n                                \"archived messages\", Strophe.LogLevel.ERROR);\n                        }\n                    );\n                },\n\n                onScroll (ev) {\n                    const { _converse } = this.__super__;\n                    if ($(ev.target).scrollTop() === 0 && this.model.messages.length) {\n                        this.fetchArchivedMessages({\n                            'before': this.model.messages.at(0).get('archive_id')\n                        });\n                    }\n                },\n            },\n\n            ChatRoomView: {\n\n                initialize () {\n                    const { _converse } = this.__super__;\n                    this.__super__.initialize.apply(this, arguments);\n                    this.model.on('change:mam_enabled', this.fetchArchivedMessagesIfNecessary, this);\n                    this.model.on('change:connection_status', this.fetchArchivedMessagesIfNecessary, this);\n                },\n\n                render () {\n                    const result = this.__super__.render.apply(this, arguments);\n                    if (!this.disable_mam) {\n                        this.$content.on('scroll', _.debounce(this.onScroll.bind(this), 100));\n                    }\n                    return result;\n                },\n\n                handleMUCMessage (stanza) {\n                    /* MAM (message archive management XEP-0313) messages are\n                     * ignored, since they're handled separately.\n                     */\n                    const is_mam = $(stanza).find(`[xmlns=\"${Strophe.NS.MAM}\"]`).length > 0;\n                    if (is_mam) {\n                        return true;\n                    }\n                    return this.__super__.handleMUCMessage.apply(this, arguments);\n                },\n\n                fetchArchivedMessagesIfNecessary () {\n                    if (this.model.get('connection_status') !== converse.ROOMSTATUS.ENTERED ||\n                        !this.model.get('mam_enabled') ||\n                        this.model.get('mam_initialized')) {\n\n                        return;\n                    }\n                    this.fetchArchivedMessages();\n                    this.model.save({'mam_initialized': true});\n                },\n\n                fetchArchivedMessages (options) {\n                    /* Fetch archived chat messages for this Chat Room\n                     *\n                     * Then, upon receiving them, call onChatRoomMessage\n                     * so that they are displayed inside it.\n                     */\n                    this.addSpinner();\n                    const that = this;\n                    const { _converse } = this.__super__;\n                    _converse.api.archive.query(\n                        _.extend({\n                            'groupchat': true,\n                            'before': '', // Page backwards from the most recent message\n                            'with': this.model.get('jid'),\n                            'max': _converse.archived_messages_page_size\n                        }, options),\n                        function (messages) {\n                            that.clearSpinner();\n                            if (messages.length) {\n                                _.each(messages, that.onChatRoomMessage.bind(that));\n                            }\n                        },\n                        function () {\n                            that.clearSpinner();\n                            _converse.log(\n                                \"Error while trying to fetch archived messages\",\n                                Strophe.LogLevel.WARN);\n                        }\n                    );\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by Converse.js's plugin machinery.\n             */\n            const { _converse } = this;\n\n            _converse.api.settings.update({\n                archived_messages_page_size: '50',\n                message_archiving: undefined, // Supported values are 'always', 'never', 'roster' (https://xmpp.org/extensions/xep-0313.html#prefs)\n                message_archiving_timeout: 8000, // Time (in milliseconds) to wait before aborting MAM request\n            });\n\n            _converse.queryForArchivedMessages = function (options, callback, errback) {\n                /* Do a MAM (XEP-0313) query for archived messages.\n                 *\n                 * Parameters:\n                 *    (Object) options - Query parameters, either MAM-specific or also for Result Set Management.\n                 *    (Function) callback - A function to call whenever we receive query-relevant stanza.\n                 *    (Function) errback - A function to call when an error stanza is received.\n                 *\n                 * The options parameter can also be an instance of\n                 * Strophe.RSM to enable easy querying between results pages.\n                 *\n                 * The callback function may be called multiple times, first\n                 * for the initial IQ result and then for each message\n                 * returned. The last time the callback is called, a\n                 * Strophe.RSM object is returned on which \"next\" or \"previous\"\n                 * can be called before passing it in again to this method, to\n                 * get the next or previous page in the result set.\n                 */\n                let date;\n                if (_.isFunction(options)) {\n                    callback = options;\n                    errback = callback;\n                }\n                const queryid = _converse.connection.getUniqueId();\n                const attrs = {'type':'set'};\n                if (!_.isUndefined(options) && options.groupchat) {\n                    if (!options['with']) { // eslint-disable-line dot-notation\n                        throw new Error(\n                            'You need to specify a \"with\" value containing '+\n                            'the chat room JID, when querying groupchat messages.');\n                    }\n                    attrs.to = options['with']; // eslint-disable-line dot-notation\n                }\n                const stanza = $iq(attrs).c('query', {'xmlns':Strophe.NS.MAM, 'queryid':queryid});\n                if (!_.isUndefined(options)) {\n                    stanza.c('x', {'xmlns':Strophe.NS.XFORM, 'type': 'submit'})\n                            .c('field', {'var':'FORM_TYPE', 'type': 'hidden'})\n                            .c('value').t(Strophe.NS.MAM).up().up();\n\n                    if (options['with'] && !options.groupchat) {  // eslint-disable-line dot-notation\n                        stanza.c('field', {'var':'with'}).c('value')\n                            .t(options['with']).up().up(); // eslint-disable-line dot-notation\n                    }\n                    _.each(['start', 'end'], function (t) {\n                        if (options[t]) {\n                            date = moment(options[t]);\n                            if (date.isValid()) {\n                                stanza.c('field', {'var':t}).c('value').t(date.format()).up().up();\n                            } else {\n                                throw new TypeError(`archive.query: invalid date provided for: ${t}`);\n                            }\n                        }\n                    });\n                    stanza.up();\n                    if (options instanceof Strophe.RSM) {\n                        stanza.cnode(options.toXML());\n                    } else if (_.intersection(RSM_ATTRIBUTES, _.keys(options)).length) {\n                        stanza.cnode(new Strophe.RSM(options).toXML());\n                    }\n                }\n\n                const messages = [];\n                const message_handler = _converse.connection.addHandler(function (message) {\n                    const result = message.querySelector('result');\n                    if (!_.isNull(result) && result.getAttribute('queryid') === queryid) {\n                        messages.push(message);\n                    }\n                    return true;\n                }, Strophe.NS.MAM);\n\n                _converse.connection.sendIQ(\n                    stanza,\n                    function (iq) {\n                        _converse.connection.deleteHandler(message_handler);\n                        if (_.isFunction(callback)) {\n                            const set = iq.querySelector('set');\n                            const rsm = new Strophe.RSM({xml: set});\n                            _.extend(rsm, _.pick(options, _.concat(MAM_ATTRIBUTES, ['max'])));\n                            callback(messages, rsm);\n                        }\n                    },\n                    function () {\n                        _converse.connection.deleteHandler(message_handler);\n                        if (_.isFunction(errback)) { errback.apply(this, arguments); }\n                    },\n                    _converse.message_archiving_timeout\n                );\n            };\n\n            _.extend(_converse.api, {\n                /* Extend default converse.js API to add methods specific to MAM\n                 */\n                'archive': {\n                    'query': _converse.queryForArchivedMessages.bind(_converse)\n                }\n            });\n\n            _converse.onMAMError = function (iq) {\n                if ($(iq).find('feature-not-implemented').length) {\n                    _converse.log(\n                        \"Message Archive Management (XEP-0313) not supported by this server\",\n                        Strophe.LogLevel.WARN);\n                } else {\n                    _converse.log(\n                        \"An error occured while trying to set archiving preferences.\",\n                        Strophe.LogLevel.ERROR);\n                    _converse.log(iq);\n                }\n            };\n\n            _converse.onMAMPreferences = function (feature, iq) {\n                /* Handle returned IQ stanza containing Message Archive\n                 * Management (XEP-0313) preferences.\n                 *\n                 * XXX: For now we only handle the global default preference.\n                 * The XEP also provides for per-JID preferences, which is\n                 * currently not supported in converse.js.\n                 *\n                 * Per JID preferences will be set in chat boxes, so it'll\n                 * probbaly be handled elsewhere in any case.\n                 */\n                const $prefs = $(iq).find(`prefs[xmlns=\"${Strophe.NS.MAM}\"]`);\n                const default_pref = $prefs.attr('default');\n                let stanza;\n                if (default_pref !== _converse.message_archiving) {\n                    stanza = $iq({'type': 'set'}).c('prefs', {'xmlns':Strophe.NS.MAM, 'default':_converse.message_archiving});\n                    $prefs.children().each(function (idx, child) {\n                        stanza.cnode(child).up();\n                    });\n                    _converse.connection.sendIQ(stanza, _.partial(function (feature, iq) {\n                            // XXX: Strictly speaking, the server should respond with the updated prefs\n                            // (see example 18: https://xmpp.org/extensions/xep-0313.html#config)\n                            // but Prosody doesn't do this, so we don't rely on it.\n                            feature.save({'preferences': {'default':_converse.message_archiving}});\n                        }, feature),\n                        _converse.onMAMError\n                    );\n                } else {\n                    feature.save({'preferences': {'default':_converse.message_archiving}});\n                }\n            };\n\n            /* Event handlers */\n            _converse.on('serviceDiscovered', (feature) => {\n                const prefs = feature.get('preferences') || {};\n                if (feature.get('var') === Strophe.NS.MAM &&\n                        prefs['default'] !== _converse.message_archiving && // eslint-disable-line dot-notation\n                        !_.isUndefined(_converse.message_archiving) ) {\n                    // Ask the server for archiving preferences\n                    _converse.connection.sendIQ(\n                        $iq({'type': 'get'}).c('prefs', {'xmlns': Strophe.NS.MAM}),\n                        _.partial(_converse.onMAMPreferences, feature),\n                        _.partial(_converse.onMAMError, feature)\n                    );\n                }\n            });\n\n            _converse.on('addClientFeatures', () => {\n                _converse.connection.disco.addFeature(Strophe.NS.MAM);\n            });\n\n            _converse.on('afterMessagesFetched', (chatboxview) => {\n                chatboxview.fetchArchivedMessagesIfNecessary();\n            });\n        }\n    });\n}));\n"]}