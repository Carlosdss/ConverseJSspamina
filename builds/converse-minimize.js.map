{"version":3,"sources":["../src/converse-minimize.js"],"names":["root","factory","define","$","converse","tpl_chatbox_minimize","tpl_toggle_chats","tpl_trimmed_chat","tpl_chats_panel","env","_","utils","Backbone","Promise","Strophe","b64_sha1","moment","plugins","add","optional_dependencies","overrides","registerGlobalEventHandlers","_converse","__super__","window","on","debounce","ev","connection","connected","chatboxviews","trimChats","apply","arguments","ChatBox","initialize","get","save","maximize","safeSave","valueOf","minimize","format","ChatBoxView","events","model","onMinimizedChanged","_show","isNewMessageHidden","shouldShowOnTextMessage","setChatBoxHeight","height","setChatBoxWidth","width","item","insertIntoDOM","isScrolledUp","clearUnreadMsgCounter","show","emit","preventDefault","collection","browserStorage","$content","scrollTop","set","setChatState","INACTIVE","hide","ChatRoomView","result","generateHeadingHTML","__","html","div","document","createElement","innerHTML","button","querySelector","insertAdjacentHTML","ChatBoxes","chatBoxMayBeShown","chatbox","ChatBoxViews","showChat","attrs","isUndefined","getChatBoxWidth","view","$el","is","outerWidth","getShownChats","filter","newchat","shown_chats","no_trimming","length","api","waitUntil","then","$minimized","minimized_chats","minimized_width","includes","pluck","new_id","boxes_width","reduce","xget","memo","oldest_chat","getOldestMaximizedChat","catch","partial","log","LogLevel","FATAL","exclude_ids","push","i","sort","at","templates","chatbox_minimize","toggle_chats","trimmed_chat","chats_panel","settings","update","promises","MinimizedChatBoxView","View","extend","tagName","className","render","data","toJSON","title","addClass","close","remove","destroy","restore","off","MinimizedChats","Overview","id","initToggle","addMultipleChats","where","onChanged","removeChat","updateUnreadMessagesCounter","el","parentElement","appendChild","keys","classList","tearDown","toggleview","MinimizedChatsToggleView","MinimizedChatsToggle","bare_jid","BrowserStorage","storage","fetch","toggle","addChat","items","each","existing","parent","append","ls","count","Model","defaults","$flyout","siblings","all","chatboxes","renderMinimizeButton","find","$new_el","info_minimize","replaceWith","after","logOut"],"mappings":"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","file":"converse-minimize.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define, window */\n\n(function (root, factory) {\n    define([\"jquery.noconflict\",\n            \"converse-core\",\n            \"tpl!chatbox_minimize\",\n            \"tpl!toggle_chats\",\n            \"tpl!trimmed_chat\",\n            \"tpl!chats_panel\",\n            \"converse-chatview\"\n    ], factory);\n}(this, function (\n        $,\n        converse,\n        tpl_chatbox_minimize,\n        tpl_toggle_chats,\n        tpl_trimmed_chat,\n        tpl_chats_panel\n    ) {\n    \"use strict\";\n\n    const { _ , utils, Backbone, Promise, Strophe, b64_sha1, moment } = converse.env;\n\n    converse.plugins.add('converse-minimize', {\n        /* Optional dependencies are other plugins which might be\n         * overridden or relied upon, and therefore need to be loaded before\n         * this plugin. They are called \"optional\" because they might not be\n         * available, in which case any overrides applicable to them will be\n         * ignored.\n         *\n         * It's possible however to make optional dependencies non-optional.\n         * If the setting \"strict_plugin_dependencies\" is set to true,\n         * an error will be raised if the plugin is not found.\n         *\n         * NB: These plugins need to have already been loaded via require.js.\n         */\n        optional_dependencies: [\"converse-controlbox\", \"converse-muc\"],\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            registerGlobalEventHandlers () {\n                const { _converse } = this.__super__;\n                $(window).on(\"resize\", _.debounce(function (ev) {\n                    if (_converse.connection.connected) {\n                        _converse.chatboxviews.trimChats();\n                    }\n                }, 200));\n                return this.__super__.registerGlobalEventHandlers.apply(this, arguments);\n            },\n\n            ChatBox: {\n                initialize () {\n                    this.__super__.initialize.apply(this, arguments);\n                    if (this.get('id') === 'controlbox') {\n                        return;\n                    }\n                    this.save({\n                        'minimized': this.get('minimized') || false,\n                        'time_minimized': this.get('time_minimized') || moment(),\n                    });\n                },\n\n                maximize () {\n                    utils.safeSave(this, {\n                        'minimized': false,\n                        'time_opened': moment().valueOf()\n                    });\n                },\n\n                minimize () {\n                    utils.safeSave(this, {\n                        'minimized': true,\n                        'time_minimized': moment().format()\n                    });\n                },\n            },\n\n            ChatBoxView: {\n                events: {\n                    'click .toggle-chatbox-button': 'minimize',\n                },\n\n                initialize () {\n                    this.model.on('change:minimized', this.onMinimizedChanged, this);\n                    return this.__super__.initialize.apply(this, arguments);\n                },\n\n                _show () {\n                    const { _converse } = this.__super__;\n                    if (!this.model.get('minimized')) {\n                        this.__super__._show.apply(this, arguments);\n                        _converse.chatboxviews.trimChats(this);\n                    } else {\n                        this.minimize();\n                    }\n                },\n\n                isNewMessageHidden () {\n                    return this.model.get('minimized') ||\n                        this.__super__.isNewMessageHidden.apply(this, arguments);\n                },\n\n                shouldShowOnTextMessage () {\n                    return !this.model.get('minimized') &&\n                        this.__super__.shouldShowOnTextMessage.apply(this, arguments);\n                },\n\n                setChatBoxHeight (height) {\n                    if (!this.model.get('minimized')) {\n                        return this.__super__.setChatBoxHeight.apply(this, arguments);\n                    }\n                },\n\n                setChatBoxWidth (width) {\n                    if (!this.model.get('minimized')) {\n                        return this.__super__.setChatBoxWidth.apply(this, arguments);\n                    }\n                },\n\n                onMinimizedChanged (item) {\n                    if (item.get('minimized')) {\n                        this.minimize();\n                    } else {\n                        this.maximize();\n                    }\n                },\n\n                maximize () {\n                    // Restores a minimized chat box\n                    const { _converse } = this.__super__;\n                    this.insertIntoDOM();\n\n                    if (!this.model.isScrolledUp()) {\n                        this.model.clearUnreadMsgCounter();\n                    }\n                    this.show();\n                    this.__super__._converse.emit('chatBoxMaximized', this);\n                    return this;\n                },\n\n                minimize (ev) {\n                    const { _converse } = this.__super__;\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    // save the scroll position to restore it on maximize\n                    if (this.model.collection && this.model.collection.browserStorage) {\n                        this.model.save({'scroll': this.$content.scrollTop()});\n                    } else {\n                        this.model.set({'scroll': this.$content.scrollTop()});\n                    }\n                    this.setChatState(_converse.INACTIVE).model.minimize();\n                    this.hide();\n                    _converse.emit('chatBoxMinimized', this);\n                },\n            },\n\n            ChatRoomView: {\n                events: {\n                    'click .toggle-chatbox-button': 'minimize',\n                },\n\n                initialize () {\n                    this.model.on('change:minimized', function (item) {\n                        if (item.get('minimized')) {\n                            this.hide();\n                        } else {\n                            this.maximize();\n                        }\n                    }, this);\n                    const result = this.__super__.initialize.apply(this, arguments);\n                    if (this.model.get('minimized')) {\n                        this.hide();\n                    }\n                    return result;\n                },\n\n                generateHeadingHTML () {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse;\n                    const html = this.__super__.generateHeadingHTML.apply(this, arguments);\n                    const div = document.createElement('div');\n                    div.innerHTML = html;\n                    const button = div.querySelector('.close-chatbox-button');\n                    button.insertAdjacentHTML('afterend',\n                        tpl_chatbox_minimize({\n                            'info_minimize': __('Minimize this chat box')\n                        })\n                    );\n                    return div.innerHTML;\n                }\n            },\n\n            ChatBoxes: {\n                chatBoxMayBeShown (chatbox) {\n                    return this.__super__.chatBoxMayBeShown.apply(this, arguments) &&\n                           !chatbox.get('minimized');\n                },\n            },\n\n            ChatBoxViews: {\n                showChat (attrs) {\n                    /* Find the chat box and show it. If it doesn't exist, create it.\n                     */\n                    const chatbox = this.__super__.showChat.apply(this, arguments);\n                    const maximize = _.isUndefined(attrs.maximize) ? true : attrs.maximize;\n                    if (chatbox.get('minimized') && maximize) {\n                        chatbox.maximize();\n                    }\n                    return chatbox;\n                },\n\n                getChatBoxWidth (view) {\n                    if (!view.model.get('minimized') && view.$el.is(':visible')) {\n                        return view.$el.outerWidth(true);\n                    }\n                    return 0;\n                },\n\n                getShownChats () {\n                    return this.filter((view) =>\n                        // The controlbox can take a while to close,\n                        // so we need to check its state. That's why we checked\n                        // the 'closed' state.\n                        !view.model.get('minimized') &&\n                            !view.model.get('closed') &&\n                            view.$el.is(':visible')\n                    );\n                },\n\n                trimChats (newchat) {\n                    /* This method is called when a newly created chat box will\n                     * be shown.\n                     *\n                     * It checks whether there is enough space on the page to show\n                     * another chat box. Otherwise it minimizes the oldest chat box\n                     * to create space.\n                     */\n                    const { _converse } = this.__super__;\n                    const shown_chats = this.getShownChats();\n                    if (_converse.no_trimming || shown_chats.length <= 1) {\n                        return;\n                    }\n                    if (this.getChatBoxWidth(shown_chats[0]) === $('body').outerWidth(true)) {\n                        // If the chats shown are the same width as the body,\n                        // then we're in responsive mode and the chats are\n                        // fullscreen. In this case we don't trim.\n                        return;\n                    }\n                    _converse.api.waitUntil('minimizedChatsInitialized').then(() => {\n                        const $minimized = _.get(_converse.minimized_chats, '$el'),\n                            minimized_width = _.includes(this.model.pluck('minimized'), true) ? $minimized.outerWidth(true) : 0,\n                            new_id = newchat ? newchat.model.get('id') : null;\n\n                        const boxes_width = _.reduce(\n                            this.xget(new_id),\n                            (memo, view) => memo + this.getChatBoxWidth(view),\n                            newchat ? newchat.$el.outerWidth(true) : 0);\n\n                        if ((minimized_width + boxes_width) > $('body').outerWidth(true)) {\n                            const oldest_chat = this.getOldestMaximizedChat([new_id]);\n                            if (oldest_chat) {\n                                // We hide the chat immediately, because waiting\n                                // for the event to fire (and letting the\n                                // ChatBoxView hide it then) causes race\n                                // conditions.\n                                const view = this.get(oldest_chat.get('id'));\n                                if (view) {\n                                    view.hide();\n                                }\n                                oldest_chat.minimize();\n                            }\n                        }\n                    }).catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n                },\n\n                getOldestMaximizedChat (exclude_ids) {\n                    // Get oldest view (if its id is not excluded)\n                    exclude_ids.push('controlbox');\n                    let i = 0;\n                    let model = this.model.sort().at(i);\n                    while (_.includes(exclude_ids, model.get('id')) ||\n                        model.get('minimized') === true) {\n                        i++;\n                        model = this.model.at(i);\n                        if (!model) {\n                            return null;\n                        }\n                    }\n                    return model;\n                }\n            }\n        },\n\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by Converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                  { __ } = _converse;\n\n            // Add new HTML templates.\n            _converse.templates.chatbox_minimize = tpl_chatbox_minimize;\n            _converse.templates.toggle_chats = tpl_toggle_chats;\n            _converse.templates.trimmed_chat = tpl_trimmed_chat;\n            _converse.templates.chats_panel = tpl_chats_panel;\n\n            _converse.api.settings.update({\n                no_trimming: false, // Set to true for phantomjs tests (where browser apparently has no width)\n            });\n\n            _converse.api.promises.add('minimizedChatsInitialized');\n\n            _converse.MinimizedChatBoxView = Backbone.View.extend({\n                tagName: 'div',\n                className: 'chat-head',\n                events: {\n                    'click .close-chatbox-button': 'close',\n                    'click .restore-chat': 'restore'\n                },\n\n                initialize () {\n                    this.model.on('change:num_unread', this.render, this);\n                },\n\n                render () {\n                    const data = _.extend(\n                        this.model.toJSON(),\n                        { 'tooltip': __('Click to restore this chat') }\n                    );\n                    if (this.model.get('type') === 'chatroom') {\n                        data.title = this.model.get('name');\n                        this.$el.addClass('chat-head-chatroom');\n                    } else {\n                        data.title = this.model.get('fullname');\n                        this.$el.addClass('chat-head-chatbox');\n                    }\n                    return this.$el.html(tpl_trimmed_chat(data));\n                },\n\n                close (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    this.remove();\n                    const view = _converse.chatboxviews.get(this.model.get('id'));\n                    if (view) {\n                        // This will call model.destroy(), removing it from the\n                        // collection and will also emit 'chatBoxClosed'\n                        view.close();\n                    } else {\n                        this.model.destroy();\n                        _converse.emit('chatBoxClosed', this);\n                    }\n                    return this;\n                },\n\n                restore: _.debounce(function (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    this.model.off('change:num_unread', null, this);\n                    this.remove();\n                    this.model.maximize();\n                }, 200, {'leading': true})\n            });\n\n\n            _converse.MinimizedChats = Backbone.Overview.extend({\n                tagName: 'div',\n                id: \"minimized-chats\",\n                className: 'hidden',\n                events: {\n                    \"click #toggle-minimized-chats\": \"toggle\"\n                },\n\n                initialize () {\n                    this.render();\n                    this.initToggle();\n                    this.addMultipleChats(this.model.where({'minimized': true}));\n                    this.model.on(\"add\", this.onChanged, this);\n                    this.model.on(\"destroy\", this.removeChat, this);\n                    this.model.on(\"change:minimized\", this.onChanged, this);\n                    this.model.on('change:num_unread', this.updateUnreadMessagesCounter, this);\n                },\n\n                render () {\n                    if (!this.el.parentElement) {\n                        this.el.innerHTML = tpl_chats_panel();\n                        _converse.chatboxviews.el.appendChild(this.el);\n                    }\n                    if (this.keys().length === 0) {\n                        this.el.classList.add('hidden');\n                    } else if (this.keys().length > 0 && !this.$el.is(':visible')) {\n                        this.el.classList.remove('hidden');\n                        _converse.chatboxviews.trimChats();\n                    }\n                    return this.$el;\n                },\n\n                tearDown () {\n                    this.model.off(\"add\", this.onChanged);\n                    this.model.off(\"destroy\", this.removeChat);\n                    this.model.off(\"change:minimized\", this.onChanged);\n                    this.model.off('change:num_unread', this.updateUnreadMessagesCounter);\n                    return this;\n                },\n\n                initToggle () {\n                    this.toggleview = new _converse.MinimizedChatsToggleView({\n                        model: new _converse.MinimizedChatsToggle()\n                    });\n                    const id = b64_sha1(`converse.minchatstoggle${_converse.bare_jid}`);\n                    this.toggleview.model.id = id; // Appears to be necessary for backbone.browserStorage\n                    this.toggleview.model.browserStorage = new Backbone.BrowserStorage[_converse.storage](id);\n                    this.toggleview.model.fetch();\n                },\n\n                toggle (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    this.toggleview.model.save({'collapsed': !this.toggleview.model.get('collapsed')});\n                    this.$('.minimized-chats-flyout').toggle();\n                },\n\n                onChanged (item) {\n                    if (item.get('id') === 'controlbox')  {\n                        // The ControlBox has it's own minimize toggle\n                        return;\n                    }\n                    if (item.get('minimized')) {\n                        this.addChat(item);\n                    } else if (this.get(item.get('id'))) {\n                        this.removeChat(item);\n                    }\n                },\n\n                addMultipleChats (items) {\n                    _.each(items, (item) => {\n                        const existing = this.get(item.get('id'));\n                        if (existing && existing.$el.parent().length !== 0) {\n                            return;\n                        }\n                        const view = new _converse.MinimizedChatBoxView({model: item});\n                        this.$('.minimized-chats-flyout').append(view.render());\n                        this.add(item.get('id'), view);\n                    });\n                    this.toggleview.model.set({'num_minimized': this.keys().length});\n                    this.render();\n                },\n\n                addChat (item) {\n                    const existing = this.get(item.get('id'));\n                    if (existing && existing.$el.parent().length !== 0) {\n                        return;\n                    }\n                    const view = new _converse.MinimizedChatBoxView({model: item});\n                    this.$('.minimized-chats-flyout').append(view.render());\n                    this.add(item.get('id'), view);\n                    this.toggleview.model.set({'num_minimized': this.keys().length});\n                    this.render();\n                },\n\n                removeChat (item) {\n                    this.remove(item.get('id'));\n                    this.toggleview.model.set({'num_minimized': this.keys().length});\n                    this.render();\n                },\n\n                updateUnreadMessagesCounter () {\n                    const ls = this.model.pluck('num_unread');\n                    let count = 0, i;\n                    for (i=0; i<ls.length; i++) { count += ls[i]; }\n                    this.toggleview.model.save({'num_unread': count});\n                    this.render();\n                }\n            });\n\n\n            _converse.MinimizedChatsToggle = Backbone.Model.extend({\n                defaults: {\n                    'collapsed': false,\n                    'num_minimized': 0,\n                    'num_unread':  0\n                }\n            });\n\n\n            _converse.MinimizedChatsToggleView = Backbone.View.extend({\n                el: '#toggle-minimized-chats',\n\n                initialize () {\n                    this.model.on('change:num_minimized', this.render, this);\n                    this.model.on('change:num_unread', this.render, this);\n                    this.$flyout = this.$el.siblings('.minimized-chats-flyout');\n                },\n\n                render () {\n                    this.$el.html(tpl_toggle_chats(\n                        _.extend(this.model.toJSON(), {\n                            'Minimized': __('Minimized')\n                        })\n                    ));\n                    if (this.model.get('collapsed')) {\n                        this.$flyout.hide();\n                    } else {\n                        this.$flyout.show();\n                    }\n                    return this.$el;\n                }\n            });\n\n            Promise.all([\n                _converse.api.waitUntil('connectionInitialized'),\n                _converse.api.waitUntil('chatBoxesInitialized')\n            ]).then(() => {\n                _converse.minimized_chats = new _converse.MinimizedChats({\n                    model: _converse.chatboxes\n                });\n                _converse.emit('minimizedChatsInitialized');\n            }).catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n\n            _converse.on('chatBoxOpened', function renderMinimizeButton (view) {\n                // Inserts a \"minimize\" button in the chatview's header\n                const $el = view.$el.find('.toggle-chatbox-button');\n                const $new_el = tpl_chatbox_minimize(\n                    {info_minimize: __('Minimize this chat box')}\n                );\n                if ($el.length) {\n                    $el.replaceWith($new_el);\n                } else {\n                    view.$el.find('.close-chatbox-button').after($new_el);\n                }\n            });\n\n            _converse.on('controlBoxOpened', function (chatbox) {\n                // Wrapped in anon method because at scan time, chatboxviews\n                // attr not set yet.\n                if (_converse.connection.connected) {\n                    _converse.chatboxviews.trimChats(chatbox);\n                }\n            });\n\n            const logOut = function () {\n                _converse.minimized_chats.remove();\n            };\n            _converse.on('logout', logOut);\n        }\n    });\n}));\n"]}