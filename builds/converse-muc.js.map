{"version":3,"sources":["../src/converse-muc.js"],"names":["root","factory","define","$","utils","converse","fp","tpl_chatarea","tpl_chatroom","tpl_chatroom_disconnect","tpl_chatroom_features","tpl_chatroom_form","tpl_chatroom_head","tpl_chatroom_invite","tpl_chatroom_nickname_form","tpl_chatroom_password_form","tpl_chatroom_sidebar","tpl_chatroom_toolbar","tpl_chatrooms_tab","tpl_info","tpl_occupant","tpl_room_description","tpl_room_item","tpl_room_panel","tpl_spinner","Awesomplete","ROOMS_PANEL_ID","CHATROOMS_TYPE","env","Strophe","Backbone","Promise","$iq","$build","$msg","$pres","b64_sha1","sizzle","_","moment","addNamespace","NS","MUC","ROOM_FEATURES","ROOM_FEATURES_MAP","ROOMSTATUS","CONNECTED","CONNECTING","NICKNAME_REQUIRED","PASSWORD_REQUIRED","DISCONNECTED","ENTERED","plugins","add","optional_dependencies","overrides","_tearDown","rooms","chatboxes","where","each","room","safeSave","__super__","call","arguments","ChatBoxes","model","attrs","options","_converse","type","ChatRoom","apply","ControlBoxView","renderRoomsPanel","roomspanel","RoomsPanel","$el","find","Model","extend","id","bare_jid","browserStorage","BrowserStorage","storage","insertIntoDOM","fetch","get","save","nick","getNodeFromJid","emit","renderContactsPanel","allow_muc","featureAdded","feature","setMUCDomain","getMUCDomainFromDisco","api","waitUntil","then","listen","on","entity","disco_entities","domain","isUndefined","features","findWhere","onConnected","muc_domain","$server","is","val","ChatBoxViews","onChatBoxAdded","item","view","ChatRoomView","initialize","__","___","muc","info_messages","disconnect_messages","action_info_messages","new_nickname_messages","settings","update","allow_muc_invitations","auto_join_on_invite","auto_join_rooms","auto_list_rooms","hide_muc_server","muc_disable_moderator_commands","undefined","muc_history_max_stanzas","muc_instant_rooms","muc_nickname_from_jid","muc_show_join_leave","visible_toolbar_buttons","promises","openChatRoom","bring_to_foreground","jid","Error","box_id","chatboxviews","showChat","ChatBox","defaults","assign","clone","prototype","zipObject","map","stubFalse","isUserMentioned","message","RegExp","test","incrementUnreadMsgCounter","stanza","body","querySelector","isNull","isNewMessage","newMessageWillBeHidden","textContent","incrementMsgCounter","clearUnreadMsgCounter","ChatBoxView","length","tagName","className","is_chatroom","events","messages","onMessageAdded","show","hide","afterConnected","renderHeading","sendChatState","createEmojiPicker","createOccupantsView","render","registerHandlers","handler","join","fetchMessages","getRoomFeatures","el","setAttribute","innerHTML","renderChatArea","showSpinner","refreshWebkit","generateHeadingHTML","empty","append","show_send_button","show_toolbar","occupantsview","renderToolbar","$content","toggleOccupants","ChatRoomOccupants","chatroomview","ChatRoomOccupantsView","session","toJSON","info_close","info_configure","description","afterShown","collection","setOccupantsHeight","setChatState","ACTIVE","scrollDown","focus","getExtraMessageClasses","extra_classes","sender","getToolbarOptions","label_hide_occupants","show_occupants_toggle","toggle_occupants","close","ev","leave","preserve_state","preventDefault","stopPropagation","set","hidden_occupants","removeClass","addClass","onOccupantClicked","insertIntoTextArea","target","requestMemberList","chatroom_jid","affiliation","resolve","reject","iq","to","c","xmlns","MUC_ADMIN","connection","sendIQ","parseMemberListIQ","getAttribute","computeAffiliationsDelta","exclude_existing","remove_absentees","new_list","old_list","new_jids","old_jids","delta","difference","indexOf","concat","filter","idx","sendAffiliationIQ","member","reason","setAffiliation","members","partial","all","setAffiliations","affiliations","uniq","bind","marshallAffiliationIQs","flatMap","getJidsWithAffiliations","isString","flow","updateMemberLists","deltaFunc","old_members","directInvite","recipient","password","invitation","from","getUniqueId","send","handleChatStateMessage","GONE","chat_state","CHATSTATES","up","HINTS","sendChatRoomMessage","text","msgid","msg","t","COMPOSING","create","fullname","time","format","modifyRole","role","onSuccess","onError","cnode","node","tree","validateRoleChangeCommand","command","args","showStatusNotification","clearChatRoomMessages","result","confirm","onCommandError","onMessageSubmitted","match","replace","splitOnce","toLowerCase","showHelpMessages","getRoomJIDAndNick","handleMUCMessage","configuration_changed","logging_enabled","logging_disabled","room_no_longer_anon","room_now_semi_anon","room_now_fully_anon","showStatusMessages","onChatRoomMessage","getDomainFromJid","room_jid","removeHandlers","presence_handler","addHandler","onChatRoomPresence","message_handler","deleteHandler","checkForReservedNick","xmlElement","sendUnavailablePresence","exit_msg","presence","sendPresence","reset","_clear","connected","renderConfigurationForm","$body","children","remove","$form","$fieldset","$stanza","$fields","title","instructions","field","xForm2webForm","cancelConfiguration","saveConfiguration","sendConfiguration","config","MUC_OWNER","XFORM","noop","nodeTree","form","$inputs","configArray","push","webForm2xForm","renderAfterTransition","autoConfigureChatRoom","that","fetchRoomConfiguration","fields","querySelectorAll","count","fieldname","value","parseRoomFeatures","startsWith","MAM","mam_enabled","desc_field","disco","info","getAndRenderConfigurationForm","submitNickname","nick_el","classList","replaceWith","DISCO_INFO","onNickNameFound","onNickNameNotFound","attr","getDefaultNickName","renderNicknameForm","unescapeNode","onNicknameClash","split","del","lastIndexOf","num","substring","String","Number","heading","label_nickname","label_join","validation_message","submitPassword","renderPasswordForm","label_password","label_submit","showDisconnectMessage","getMessageFromStatus","stat","is_self","code","getResourceFromJid","saveAffiliationAndRole","pres","MUC_USER","pop","isNil","parseXUserElement","x","statuses","mapper","notification","codes","invokeMap","Element","disconnection_codes","intersection","keys","disconnected","disconnection_message","actor","displayNotificationsforUser","getJoinLeaveMessages","elements","iteratee","notifications","isEmpty","nodeName","showErrorMessage","error","prepend","hideSpinner","spinner","parentNode","removeChild","onOwnChatRoomPresence","locked_room","updateOccupantsOnPresence","setChatRoomSubject","subject","isDuplicateBasedOnTime","identities","ts","getMessageBody","Math","abs","diff","unix","isDuplicate","resource","original_stanza","forwarded","delay","propertyOf","createMessage","ChatRoomOccupant","attributes","ChatRoomOccupantView","View","destroy","new_el","PRETTY_CHAT_STATUS","$parents","parents","setElement","first","delegateEvents","Collection","Overview","onOccupantAdded","renderInviteWidget","onFeatureChanged","renderRoomFeatures","shouldInviteWidgetBeShown","insertAdjacentHTML","initInviteWidget","picks","pick","a","v","reduce","values","debouncedRenderRoomFeatures","debounce","changed_features","changed","k","style","cssText","offsetHeight","parsePresence","data","states","childNodes","child","status","findOccupant","getBareJidFromJid","occupant","promptForInvite","suggestion","prompt","label","inviteFormSubmitted","evt","outerHTML","addEventListener","list","roster","awesomplete","cfg","parent_el","$parent","tab_el","document","createElement","onDomainChange","onNickChange","renderTab","controlbox","chatrooms","isOfType","models","sum","curry","appendChild","tabs","updateRoomsList","$nick","informNoRoomsFound","$available_chatrooms","html","siblings","onRoomsFound","fragment","createDocumentFragment","i","name","DISCO_ITEMS","showRooms","server","after","insertRoomInfo","toggleRoomInfo","parent","$div","parseRoomDataFromEvent","$name","trim","escapeNode","setDomain","setNick","onDirectMUCInvitation","$message","$x","contact","chatroom","registerDirectInvitationHandler","autoJoinRooms","open","isObject","log","LogLevel","ERROR","getChatRoom","fetcher","getViewForChatBox","jids","maximize","TypeError","chatbox","getChatBox","addFeature","reconnectToChatRooms","disconnectChatRooms"],"mappings":"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","file":"converse-muc.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n/* This is a Converse.js plugin which add support for multi-user chat rooms, as\n * specified in XEP-0045 Multi-user chat.\n */\n(function (root, factory) {\n    define([\n            \"jquery.noconflict\",\n            \"form-utils\",\n            \"converse-core\",\n            \"lodash.fp\",\n            \"tpl!chatarea\",\n            \"tpl!chatroom\",\n            \"tpl!chatroom_disconnect\",\n            \"tpl!chatroom_features\",\n            \"tpl!chatroom_form\",\n            \"tpl!chatroom_head\",\n            \"tpl!chatroom_invite\",\n            \"tpl!chatroom_nickname_form\",\n            \"tpl!chatroom_password_form\",\n            \"tpl!chatroom_sidebar\",\n            \"tpl!chatroom_toolbar\",\n            \"tpl!chatrooms_tab\",\n            \"tpl!info\",\n            \"tpl!occupant\",\n            \"tpl!room_description\",\n            \"tpl!room_item\",\n            \"tpl!room_panel\",\n            \"tpl!spinner\",\n            \"awesomplete\",\n            \"converse-chatview\",\n            \"converse-disco\"\n    ], factory);\n}(this, function (\n            $,\n            utils,\n            converse,\n            fp,\n            tpl_chatarea,\n            tpl_chatroom,\n            tpl_chatroom_disconnect,\n            tpl_chatroom_features,\n            tpl_chatroom_form,\n            tpl_chatroom_head,\n            tpl_chatroom_invite,\n            tpl_chatroom_nickname_form,\n            tpl_chatroom_password_form,\n            tpl_chatroom_sidebar,\n            tpl_chatroom_toolbar,\n            tpl_chatrooms_tab,\n            tpl_info,\n            tpl_occupant,\n            tpl_room_description,\n            tpl_room_item,\n            tpl_room_panel,\n            tpl_spinner,\n            Awesomplete\n    ) {\n\n    \"use strict\";\n    const ROOMS_PANEL_ID = 'chatrooms';\n    const CHATROOMS_TYPE = 'chatroom';\n\n    const { Strophe, Backbone, Promise, $iq, $build, $msg, $pres, b64_sha1, sizzle, _, moment } = converse.env;\n\n    // Add Strophe Namespaces\n    Strophe.addNamespace('MUC_ADMIN', Strophe.NS.MUC + \"#admin\");\n    Strophe.addNamespace('MUC_OWNER', Strophe.NS.MUC + \"#owner\");\n    Strophe.addNamespace('MUC_REGISTER', \"jabber:iq:register\");\n    Strophe.addNamespace('MUC_ROOMCONF', Strophe.NS.MUC + \"#roomconfig\");\n    Strophe.addNamespace('MUC_USER', Strophe.NS.MUC + \"#user\");\n\n    const ROOM_FEATURES = [\n        'passwordprotected', 'unsecured', 'hidden',\n        'public', 'membersonly', 'open', 'persistent',\n        'temporary', 'nonanonymous', 'semianonymous',\n        'moderated', 'unmoderated', 'mam_enabled'\n    ];\n    const ROOM_FEATURES_MAP = {\n        'passwordprotected': 'unsecured',\n        'unsecured': 'passwordprotected',\n        'hidden': 'public',\n        'public': 'hidden',\n        'membersonly': 'open',\n        'open': 'membersonly',\n        'persistent': 'temporary',\n        'temporary': 'persistent',\n        'nonanonymous': 'semianonymous',\n        'semianonymous': 'nonanonymous',\n        'moderated': 'unmoderated',\n        'unmoderated': 'moderated'\n    };\n\n    converse.ROOMSTATUS = {\n        CONNECTED: 0,\n        CONNECTING: 1,\n        NICKNAME_REQUIRED: 2,\n        PASSWORD_REQUIRED: 3,\n        DISCONNECTED: 4,\n        ENTERED: 5\n    };\n\n    converse.plugins.add('converse-muc', {\n        /* Optional dependencies are other plugins which might be\n         * overridden or relied upon, and therefore need to be loaded before\n         * this plugin. They are called \"optional\" because they might not be\n         * available, in which case any overrides applicable to them will be\n         * ignored.\n         *\n         * It's possible however to make optional dependencies non-optional.\n         * If the setting \"strict_plugin_dependencies\" is set to true,\n         * an error will be raised if the plugin is not found.\n         *\n         * NB: These plugins need to have already been loaded via require.js.\n         */\n        optional_dependencies: [\"converse-controlbox\"],\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            _tearDown () {\n                const rooms = this.chatboxes.where({'type': CHATROOMS_TYPE});\n                _.each(rooms, function (room) {\n                    utils.safeSave(room, {'connection_status': converse.ROOMSTATUS.DISCONNECTED});\n                });\n                this.__super__._tearDown.call(this, arguments);\n            },\n\n            ChatBoxes: {\n                model (attrs, options) {\n                    const { _converse } = this.__super__;\n                    if (attrs.type == CHATROOMS_TYPE) {\n                        return new _converse.ChatRoom(attrs, options);\n                    } else {\n                        return this.__super__.model.apply(this, arguments);\n                    }\n                },\n            },\n\n            ControlBoxView: {\n                renderRoomsPanel () {\n                    const { _converse } = this.__super__;\n                    this.roomspanel = new _converse.RoomsPanel({\n                        '$parent': this.$el.find('.controlbox-panes'),\n                        'model': new (Backbone.Model.extend({\n                            id: b64_sha1(`converse.roomspanel${_converse.bare_jid}`), // Required by sessionStorage\n                            browserStorage: new Backbone.BrowserStorage[_converse.storage](\n                                b64_sha1(`converse.roomspanel${_converse.bare_jid}`))\n                        }))()\n                    });\n                    this.roomspanel.insertIntoDOM().model.fetch();\n                    if (!this.roomspanel.model.get('nick')) {\n                        this.roomspanel.model.save({\n                            nick: Strophe.getNodeFromJid(_converse.bare_jid)\n                        });\n                    }\n                    _converse.emit('roomsPanelRendered');\n                },\n\n                renderContactsPanel () {\n                    const { _converse } = this.__super__;\n                    this.__super__.renderContactsPanel.apply(this, arguments);\n                    if (_converse.allow_muc) {\n                        this.renderRoomsPanel();\n                    }\n                },\n\n                featureAdded (feature) {\n                    const { _converse } = this.__super__;\n                    if ((feature.get('var') === Strophe.NS.MUC) && (_converse.allow_muc)) {\n                        this.setMUCDomain(feature.get('from'));\n                    }\n                },\n\n                getMUCDomainFromDisco () {\n                    /* Check whether service discovery for the user's domain\n                     * returned MUC information and use that to automatically\n                     * set the MUC domain for the \"Rooms\" panel of the\n                     * controlbox.\n                     */\n                    const { _converse } = this.__super__;\n                    _converse.api.waitUntil('discoInitialized').then(() => {\n                        _converse.api.listen.on('serviceDiscovered', this.featureAdded, this);\n                        // Features could have been added before the controlbox was\n                        // initialized. We're only interested in MUC\n                        const entity = _converse.disco_entities[_converse.domain];\n                        if (!_.isUndefined(entity)) {\n                            const feature = entity.features.findWhere({'var': Strophe.NS.MUC });\n                            if (feature) {\n                                this.featureAdded(feature);\n                            }\n                        }\n                    });\n                },\n\n                onConnected () {\n                    const { _converse } = this.__super__;\n                    this.__super__.onConnected.apply(this, arguments);\n                    if (!this.model.get('connected')) {\n                        return;\n                    }\n                    if (_.isUndefined(_converse.muc_domain)) {\n                        this.getMUCDomainFromDisco();\n                    } else {\n                        this.setMUCDomain(_converse.muc_domain);\n                    }\n                },\n\n                setMUCDomain (domain) {\n                    const { _converse } = this.__super__;\n                    _converse.muc_domain = domain;\n                    this.roomspanel.model.save({'muc_domain': domain});\n                    const $server= this.$el.find('input.new-chatroom-server');\n                    if (!$server.is(':focus')) {\n                        $server.val(this.roomspanel.model.get('muc_domain'));\n                    }\n                }\n            },\n\n            ChatBoxViews: {\n                onChatBoxAdded (item) {\n                    const { _converse } = this.__super__;\n                    let view = this.get(item.get('id'));\n                    if (!view && item.get('type') === CHATROOMS_TYPE) {\n                        view = new _converse.ChatRoomView({'model': item});\n                        return this.add(item.get('id'), view);\n                    } else {\n                        return this.__super__.onChatBoxAdded.apply(this, arguments);\n                    }\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __,\n                ___ } = _converse;\n            // XXX: Inside plugins, all calls to the translation machinery\n            // (e.g. utils.__) should only be done in the initialize function.\n            // If called before, we won't know what language the user wants,\n            // and it'll fall back to English.\n\n            /* http://xmpp.org/extensions/xep-0045.html\n             * ----------------------------------------\n             * 100 message      Entering a room         Inform user that any occupant is allowed to see the user's full JID\n             * 101 message (out of band)                Affiliation change  Inform user that his or her affiliation changed while not in the room\n             * 102 message      Configuration change    Inform occupants that room now shows unavailable members\n             * 103 message      Configuration change    Inform occupants that room now does not show unavailable members\n             * 104 message      Configuration change    Inform occupants that a non-privacy-related room configuration change has occurred\n             * 110 presence     Any room presence       Inform user that presence refers to one of its own room occupants\n             * 170 message or initial presence          Configuration change    Inform occupants that room logging is now enabled\n             * 171 message      Configuration change    Inform occupants that room logging is now disabled\n             * 172 message      Configuration change    Inform occupants that the room is now non-anonymous\n             * 173 message      Configuration change    Inform occupants that the room is now semi-anonymous\n             * 174 message      Configuration change    Inform occupants that the room is now fully-anonymous\n             * 201 presence     Entering a room         Inform user that a new room has been created\n             * 210 presence     Entering a room         Inform user that the service has assigned or modified the occupant's roomnick\n             * 301 presence     Removal from room       Inform user that he or she has been banned from the room\n             * 303 presence     Exiting a room          Inform all occupants of new room nickname\n             * 307 presence     Removal from room       Inform user that he or she has been kicked from the room\n             * 321 presence     Removal from room       Inform user that he or she is being removed from the room because of an affiliation change\n             * 322 presence     Removal from room       Inform user that he or she is being removed from the room because the room has been changed to members-only and the user is not a member\n             * 332 presence     Removal from room       Inform user that he or she is being removed from the room because of a system shutdown\n             */\n            _converse.muc = {\n                info_messages: {\n                    100: __('This room is not anonymous'),\n                    102: __('This room now shows unavailable members'),\n                    103: __('This room does not show unavailable members'),\n                    104: __('The room configuration has changed'),\n                    170: __('Room logging is now enabled'),\n                    171: __('Room logging is now disabled'),\n                    172: __('This room is now no longer anonymous'),\n                    173: __('This room is now semi-anonymous'),\n                    174: __('This room is now fully-anonymous'),\n                    201: __('A new room has been created')\n                },\n\n                disconnect_messages: {\n                    301: __('You have been banned from this room'),\n                    307: __('You have been kicked from this room'),\n                    321: __(\"You have been removed from this room because of an affiliation change\"),\n                    322: __(\"You have been removed from this room because the room has changed to members-only and you're not a member\"),\n                    332: __(\"You have been removed from this room because the MUC (Multi-user chat) service is being shut down.\")\n                },\n\n                action_info_messages: {\n                    /* XXX: Note the triple underscore function and not double\n                    * underscore.\n                    *\n                    * This is a hack. We can't pass the strings to __ because we\n                    * don't yet know what the variable to interpolate is.\n                    *\n                    * Triple underscore will just return the string again, but we\n                    * can then at least tell gettext to scan for it so that these\n                    * strings are picked up by the translation machinery.\n                    */\n                    301: ___(\"%1$s has been banned\"),\n                    303: ___(\"%1$s's nickname has changed\"),\n                    307: ___(\"%1$s has been kicked out\"),\n                    321: ___(\"%1$s has been removed because of an affiliation change\"),\n                    322: ___(\"%1$s has been removed for not being a member\")\n                },\n\n                new_nickname_messages: {\n                    210: ___('Your nickname has been automatically set to: %1$s'),\n                    303: ___('Your nickname has been changed to: %1$s')\n                }\n            };\n\n            // Configuration values for this plugin\n            // ====================================\n            // Refer to docs/source/configuration.rst for explanations of these\n            // configuration settings.\n            _converse.api.settings.update({\n                allow_muc: true,\n                allow_muc_invitations: true,\n                auto_join_on_invite: false,\n                auto_join_rooms: [],\n                auto_list_rooms: false,\n                hide_muc_server: false,\n                muc_disable_moderator_commands: false,\n                muc_domain: undefined,\n                muc_history_max_stanzas: undefined,\n                muc_instant_rooms: true,\n                muc_nickname_from_jid: false,\n                muc_show_join_leave: true,\n                visible_toolbar_buttons: {\n                    'toggle_occupants': true\n                },\n            });\n            _converse.api.promises.add('roomsPanelRendered');\n\n            _converse.openChatRoom = function (settings, bring_to_foreground) {\n                /* Opens a chat room, making sure that certain attributes\n                 * are correct, for example that the \"type\" is set to\n                 * \"chatroom\".\n                 */\n                if (_.isUndefined(settings.jid)) {\n                    throw new Error(\"openChatRoom needs to be called with a JID\");\n                }\n                settings.type = CHATROOMS_TYPE;\n                settings.id = settings.jid;\n                settings.box_id = b64_sha1(settings.jid)\n                return _converse.chatboxviews.showChat(settings, bring_to_foreground);\n            };\n\n            _converse.ChatRoom = _converse.ChatBox.extend({\n\n                defaults () {\n                    return _.assign(\n                        _.clone(_converse.ChatBox.prototype.defaults),\n                        _.zipObject(ROOM_FEATURES, _.map(ROOM_FEATURES, _.stubFalse)),\n                        {\n                          // For group chats, we distinguish between generally unread\n                          // messages and those ones that specifically mention the\n                          // user.\n                          //\n                          // To keep things simple, we reuse `num_unread` from\n                          // _converse.ChatBox to indicate unread messages which\n                          // mention the user and `num_unread_general` to indicate\n                          // generally unread messages (which *includes* mentions!).\n                          'num_unread_general': 0,\n\n                          'affiliation': null,\n                          'connection_status': converse.ROOMSTATUS.DISCONNECTED,\n                          'name': '',\n                          'description': '',\n                          'features_fetched': false,\n                          'roomconfig': {},\n                          'type': CHATROOMS_TYPE,\n                        }\n                    );\n                },\n\n                isUserMentioned (message) {\n                    /* Returns a boolean to indicate whether the current user\n                     * was mentioned in a message.\n                     *\n                     * Parameters:\n                     *  (String): The text message\n                     */\n                    return (new RegExp(`\\\\b${this.get('nick')}\\\\b`)).test(message);\n                },\n\n                incrementUnreadMsgCounter (stanza) {\n                    /* Given a newly received message, update the unread counter if\n                     * necessary.\n                     *\n                     * Parameters:\n                     *  (XMLElement): The <messsage> stanza\n                     */\n                    const body = stanza.querySelector('body');\n                    if (_.isNull(body)) {\n                        return; // The message has no text\n                    }\n                    if (utils.isNewMessage(stanza) && this.newMessageWillBeHidden()) {\n                        this.save({'num_unread_general': this.get('num_unread_general') + 1});\n                        if (this.isUserMentioned(body.textContent)) {\n                            this.save({'num_unread': this.get('num_unread') + 1});\n                            _converse.incrementMsgCounter();\n                        }\n                    }\n                },\n\n                clearUnreadMsgCounter() {\n                    utils.safeSave(this, {\n                        'num_unread': 0,\n                        'num_unread_general': 0\n                    });\n                }\n            });\n\n            _converse.ChatRoomView = _converse.ChatBoxView.extend({\n                /* Backbone View which renders a chat room, based upon the view\n                 * for normal one-on-one chat boxes.\n                 */\n                length: 300,\n                tagName: 'div',\n                className: 'chatbox chatroom hidden',\n                is_chatroom: true,\n                events: {\n                    'click .close-chatbox-button': 'close',\n                    'click .configure-chatroom-button': 'getAndRenderConfigurationForm',\n                    'click .toggle-smiley': 'toggleEmojiMenu',\n                    'click .toggle-smiley ul.emoji-picker li': 'insertEmoji',\n                    'click .toggle-clear': 'clearChatRoomMessages',\n                    'click .toggle-call': 'toggleCall',\n                    'click .toggle-occupants a': 'toggleOccupants',\n                    'click .new-msgs-indicator': 'viewUnreadMessages',\n                    'click .occupant': 'onOccupantClicked',\n                    'keypress .chat-textarea': 'keyPressed',\n                    'click .send-button': 'onSendButtonClicked'\n                },\n\n                initialize () {\n                    this.model.messages.on('add', this.onMessageAdded, this);\n                    this.model.on('show', this.show, this);\n                    this.model.on('destroy', this.hide, this);\n                    this.model.on('change:connection_status', this.afterConnected, this);\n                    this.model.on('change:affiliation', this.renderHeading, this);\n                    this.model.on('change:chat_state', this.sendChatState, this);\n                    this.model.on('change:description', this.renderHeading, this);\n                    this.model.on('change:name', this.renderHeading, this);\n\n                    this.createEmojiPicker();\n                    this.createOccupantsView();\n                    this.render().insertIntoDOM();\n                    this.registerHandlers();\n\n                    if (this.model.get('connection_status') !==  converse.ROOMSTATUS.ENTERED) {\n                        const handler = () => {\n                            this.join();\n                            this.fetchMessages();\n                            _converse.emit('chatRoomOpened', this);\n                        }\n                        this.getRoomFeatures().then(handler, handler);\n                    } else {\n                        this.fetchMessages();\n                        _converse.emit('chatRoomOpened', this);\n                    }\n                },\n\n                render () {\n                    this.el.setAttribute('id', this.model.get('box_id'));\n                    this.el.innerHTML = tpl_chatroom();\n                    this.renderHeading();\n                    this.renderChatArea();\n                    if (this.model.get('connection_status') !== converse.ROOMSTATUS.ENTERED) {\n                        this.showSpinner();\n                    }\n                    utils.refreshWebkit();\n                    return this;\n                },\n\n                renderHeading () {\n                    /* Render the heading UI of the chat room. */\n                    this.el.querySelector('.chat-head-chatroom').innerHTML = this.generateHeadingHTML();\n                },\n\n                renderChatArea () {\n                    /* Render the UI container in which chat room messages will\n                     * appear.\n                     */\n                    if (!this.$('.chat-area').length) {\n                        this.$('.chatroom-body').empty()\n                            .append(tpl_chatarea({\n                                    'label_message': __('Message'),\n                                    'label_send': __('Send'),\n                                    'show_send_button': _converse.show_send_button,\n                                    'show_toolbar': _converse.show_toolbar,\n                                    'unread_msgs': __('You have unread messages')\n                                }))\n                            .append(this.occupantsview.$el);\n                        this.renderToolbar(tpl_chatroom_toolbar);\n                        this.$content = this.$el.find('.chat-content');\n                    }\n                    this.toggleOccupants(null, true);\n                    return this;\n                },\n\n                createOccupantsView () {\n                    /* Create the ChatRoomOccupantsView Backbone.View\n                     */\n                    const model = new _converse.ChatRoomOccupants();\n                    model.chatroomview = this;\n                    this.occupantsview = new _converse.ChatRoomOccupantsView({'model': model});\n                    const id = b64_sha1(`converse.occupants${_converse.bare_jid}${this.model.get('jid')}`);\n                    this.occupantsview.model.browserStorage = new Backbone.BrowserStorage.session(id);\n                    this.occupantsview.render();\n                    this.occupantsview.model.fetch({add:true});\n                    return this;\n                },\n\n                generateHeadingHTML () {\n                    /* Returns the heading HTML to be rendered.\n                     */\n                    return tpl_chatroom_head(\n                        _.extend(this.model.toJSON(), {\n                            Strophe: Strophe,\n                            info_close: __('Close and leave this room'),\n                            info_configure: __('Configure this room'),\n                            description: this.model.get('description') || ''\n                    }));\n                },\n\n                afterShown () {\n                    /* Override from converse-chatview, specifically to avoid\n                     * the 'active' chat state from being sent out prematurely.\n                     *\n                     * This is instead done in `afterConnected` below.\n                     */\n                    if (this.model.collection && this.model.collection.browserStorage) {\n                        // Without a connection, we haven't yet initialized\n                        // localstorage\n                        this.model.save();\n                    }\n                    this.occupantsview.setOccupantsHeight();\n                },\n\n                afterConnected () {\n                    if (this.model.get('connection_status') === converse.ROOMSTATUS.ENTERED) {\n                        this.setChatState(_converse.ACTIVE);\n                        this.scrollDown();\n                        this.focus();\n                    }\n                },\n\n                getExtraMessageClasses (attrs) {\n                    let extra_classes = _converse.ChatBoxView.prototype\n                            .getExtraMessageClasses.apply(this, arguments);\n\n                    if (this.is_chatroom && attrs.sender === 'them' &&\n                            this.model.isUserMentioned(attrs.message)) {\n                        // Add special class to mark groupchat messages\n                        // in which we are mentioned.\n                        extra_classes += ' mentioned';\n                    }\n                    return extra_classes;\n                },\n\n                getToolbarOptions () {\n                    return _.extend(\n                        _converse.ChatBoxView.prototype.getToolbarOptions.apply(this, arguments),\n                        {\n                          label_hide_occupants: __('Hide the list of occupants'),\n                          show_occupants_toggle: this.is_chatroom && _converse.visible_toolbar_buttons.toggle_occupants\n                        }\n                    );\n                },\n\n                close (ev) {\n                    /* Close this chat box, which implies leaving the room as\n                     * well.\n                     */\n                    this.leave();\n                },\n\n                toggleOccupants (ev, preserve_state) {\n                    /* Show or hide the right sidebar containing the chat\n                     * occupants (and the invite widget).\n                     */\n                    if (ev) {\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                    if (preserve_state) {\n                        // Bit of a hack, to make sure that the sidebar's state doesn't change\n                        this.model.set({hidden_occupants: !this.model.get('hidden_occupants')});\n                    }\n                    if (!this.model.get('hidden_occupants')) {\n                        this.model.save({hidden_occupants: true});\n                        this.$('.icon-hide-users').removeClass('icon-hide-users').addClass('icon-show-users');\n                        this.$('.occupants').addClass('hidden');\n                        this.$('.chat-area').addClass('full');\n                        this.scrollDown();\n                    } else {\n                        this.model.save({hidden_occupants: false});\n                        this.$('.icon-show-users').removeClass('icon-show-users').addClass('icon-hide-users');\n                        this.$('.chat-area').removeClass('full');\n                        this.$('div.occupants').removeClass('hidden');\n                        this.scrollDown();\n                    }\n                },\n\n                onOccupantClicked (ev) {\n                    /* When an occupant is clicked, insert their nickname into\n                     * the chat textarea input.\n                     */\n                    this.insertIntoTextArea(ev.target.textContent);\n                },\n\n                requestMemberList (chatroom_jid, affiliation) {\n                    /* Send an IQ stanza to the server, asking it for the\n                     * member-list of this room.\n                     *\n                     * See: http://xmpp.org/extensions/xep-0045.html#modifymember\n                     *\n                     * Parameters:\n                     *  (String) chatroom_jid: The JID of the chatroom for\n                     *      which the member-list is being requested\n                     *  (String) affiliation: The specific member list to\n                     *      fetch. 'admin', 'owner' or 'member'.\n                     *\n                     * Returns:\n                     *  A promise which resolves once the list has been\n                     *  retrieved.\n                     */\n                    return new Promise((resolve, reject) => {\n                        affiliation = affiliation || 'member';\n                        const iq = $iq({to: chatroom_jid, type: \"get\"})\n                            .c(\"query\", {xmlns: Strophe.NS.MUC_ADMIN})\n                                .c(\"item\", {'affiliation': affiliation});\n                        _converse.connection.sendIQ(iq, resolve, reject);\n                    });\n                },\n\n                parseMemberListIQ (iq) {\n                    /* Given an IQ stanza with a member list, create an array of member\n                     * objects.\n                     */\n                    return _.map(\n                        $(iq).find(`query[xmlns=\"${Strophe.NS.MUC_ADMIN}\"] item`),\n                        (item) => ({\n                            'jid': item.getAttribute('jid'),\n                            'affiliation': item.getAttribute('affiliation'),\n                        })\n                    );\n                },\n\n                computeAffiliationsDelta (exclude_existing, remove_absentees, new_list, old_list) {\n                    /* Given two lists of objects with 'jid', 'affiliation' and\n                     * 'reason' properties, return a new list containing\n                     * those objects that are new, changed or removed\n                     * (depending on the 'remove_absentees' boolean).\n                     *\n                     * The affiliations for new and changed members stay the\n                     * same, for removed members, the affiliation is set to 'none'.\n                     *\n                     * The 'reason' property is not taken into account when\n                     * comparing whether affiliations have been changed.\n                     *\n                     * Parameters:\n                     *  (Boolean) exclude_existing: Indicates whether JIDs from\n                     *      the new list which are also in the old list\n                     *      (regardless of affiliation) should be excluded\n                     *      from the delta. One reason to do this\n                     *      would be when you want to add a JID only if it\n                     *      doesn't have *any* existing affiliation at all.\n                     *  (Boolean) remove_absentees: Indicates whether JIDs\n                     *      from the old list which are not in the new list\n                     *      should be considered removed and therefore be\n                     *      included in the delta with affiliation set\n                     *      to 'none'.\n                     *  (Array) new_list: Array containing the new affiliations\n                     *  (Array) old_list: Array containing the old affiliations\n                     */\n                    const new_jids = _.map(new_list, 'jid');\n                    const old_jids = _.map(old_list, 'jid');\n\n                    // Get the new affiliations\n                    let delta = _.map(\n                        _.difference(new_jids, old_jids),\n                        (jid) => new_list[_.indexOf(new_jids, jid)]\n                    );\n                    if (!exclude_existing) {\n                        // Get the changed affiliations\n                        delta = delta.concat(_.filter(new_list, function (item) {\n                            const idx = _.indexOf(old_jids, item.jid);\n                            if (idx >= 0) {\n                                return item.affiliation !== old_list[idx].affiliation;\n                            }\n                            return false;\n                        }));\n                    }\n                    if (remove_absentees) {\n                        // Get the removed affiliations\n                        delta = delta.concat(\n                            _.map(\n                                _.difference(old_jids, new_jids),\n                                (jid) => ({'jid': jid, 'affiliation': 'none'})\n                            )\n                        );\n                    }\n                    return delta;\n                },\n\n                sendAffiliationIQ (chatroom_jid, affiliation, member) {\n                    /* Send an IQ stanza specifying an affiliation change.\n                     *\n                     * Paremeters:\n                     *  (String) chatroom_jid: JID of the relevant room\n                     *  (String) affiliation: affiliation (could also be stored\n                     *      on the member object).\n                     *  (Object) member: Map containing the member's jid and\n                     *      optionally a reason and affiliation.\n                     */\n                    return new Promise((resolve, reject) => {\n                        const iq = $iq({to: chatroom_jid, type: \"set\"})\n                            .c(\"query\", {xmlns: Strophe.NS.MUC_ADMIN})\n                            .c(\"item\", {\n                                'affiliation': member.affiliation || affiliation,\n                                'jid': member.jid\n                            });\n                        if (!_.isUndefined(member.reason)) {\n                            iq.c(\"reason\", member.reason);\n                        }\n                        _converse.connection.sendIQ(iq, resolve, reject);\n                    });\n                },\n\n                setAffiliation (affiliation, members) {\n                    /* Send IQ stanzas to the server to set an affiliation for\n                     * the provided JIDs.\n                     *\n                     * See: http://xmpp.org/extensions/xep-0045.html#modifymember\n                     *\n                     * XXX: Prosody doesn't accept multiple JIDs' affiliations\n                     * being set in one IQ stanza, so as a workaround we send\n                     * a separate stanza for each JID.\n                     * Related ticket: https://prosody.im/issues/issue/795\n                     *\n                     * Parameters:\n                     *  (String) affiliation: The affiliation\n                     *  (Object) members: A map of jids, affiliations and\n                     *      optionally reasons. Only those entries with the\n                     *      same affiliation as being currently set will be\n                     *      considered.\n                     *\n                     * Returns:\n                     *  A promise which resolves and fails depending on the\n                     *  XMPP server response.\n                     */\n                    members = _.filter(members, (member) =>\n                        // We only want those members who have the right\n                        // affiliation (or none, which implies the provided\n                        // one).\n                        _.isUndefined(member.affiliation) ||\n                                member.affiliation === affiliation\n                    );\n                    const promises = _.map(\n                        members,\n                        _.partial(this.sendAffiliationIQ, this.model.get('jid'), affiliation)\n                    );\n                    return Promise.all(promises);\n                },\n\n                setAffiliations (members) {\n                    /* Send IQ stanzas to the server to modify the\n                     * affiliations in this room.\n                     *\n                     * See: http://xmpp.org/extensions/xep-0045.html#modifymember\n                     *\n                     * Parameters:\n                     *  (Object) members: A map of jids, affiliations and optionally reasons\n                     *  (Function) onSuccess: callback for a succesful response\n                     *  (Function) onError: callback for an error response\n                     */\n                    const affiliations = _.uniq(_.map(members, 'affiliation'));\n                    _.each(affiliations, _.partial(this.setAffiliation.bind(this), _, members));\n                },\n\n                marshallAffiliationIQs () {\n                    /* Marshall a list of IQ stanzas into a map of JIDs and\n                     * affiliations.\n                     *\n                     * Parameters:\n                     *  Any amount of XMLElement objects, representing the IQ\n                     *  stanzas.\n                     */\n                    return _.flatMap(arguments, this.parseMemberListIQ);\n                },\n\n                getJidsWithAffiliations (affiliations) {\n                    /* Returns a map of JIDs that have the affiliations\n                     * as provided.\n                     */\n                    if (_.isString(affiliations)) {\n                        affiliations = [affiliations];\n                    }\n                    return new Promise((resolve, reject) => {\n                        const promises = _.map(affiliations, _.partial(this.requestMemberList, this.model.get('jid')));\n                        Promise.all(promises).then(\n                            _.flow(this.marshallAffiliationIQs.bind(this), resolve),\n                            _.flow(this.marshallAffiliationIQs.bind(this), resolve)\n                        );\n                    });\n                },\n\n                updateMemberLists (members, affiliations, deltaFunc) {\n                    /* Fetch the lists of users with the given affiliations.\n                     * Then compute the delta between those users and\n                     * the passed in members, and if it exists, send the delta\n                     * to the XMPP server to update the member list.\n                     *\n                     * Parameters:\n                     *  (Object) members: Map of member jids and affiliations.\n                     *  (String|Array) affiliation: An array of affiliations or\n                     *      a string if only one affiliation.\n                     *  (Function) deltaFunc: The function to compute the delta\n                     *      between old and new member lists.\n                     *\n                     * Returns:\n                     *  A promise which is resolved once the list has been\n                     *  updated or once it's been established there's no need\n                     *  to update the list.\n                     */\n                    this.getJidsWithAffiliations(affiliations).then((old_members) => {\n                        this.setAffiliations(deltaFunc(members, old_members));\n                    });\n                },\n\n                directInvite (recipient, reason) {\n                    /* Send a direct invitation as per XEP-0249\n                     *\n                     * Parameters:\n                     *    (String) recipient - JID of the person being invited\n                     *    (String) reason - Optional reason for the invitation\n                     */\n                    if (this.model.get('membersonly')) {\n                        // When inviting to a members-only room, we first add\n                        // the person to the member list by giving them an\n                        // affiliation of 'member' (if they're not affiliated\n                        // already), otherwise they won't be able to join.\n                        const map = {}; map[recipient] = 'member';\n                        const deltaFunc = _.partial(this.computeAffiliationsDelta, true, false);\n                        this.updateMemberLists(\n                            [{'jid': recipient, 'affiliation': 'member', 'reason': reason}],\n                            ['member', 'owner', 'admin'],\n                            deltaFunc\n                        );\n                    }\n                    const attrs = {\n                        'xmlns': 'jabber:x:conference',\n                        'jid': this.model.get('jid')\n                    };\n                    if (reason !== null) { attrs.reason = reason; }\n                    if (this.model.get('password')) { attrs.password = this.model.get('password'); }\n                    const invitation = $msg({\n                        from: _converse.connection.jid,\n                        to: recipient,\n                        id: _converse.connection.getUniqueId()\n                    }).c('x', attrs);\n                    _converse.connection.send(invitation);\n                    _converse.emit('roomInviteSent', {\n                        'room': this,\n                        'recipient': recipient,\n                        'reason': reason\n                    });\n                },\n\n                handleChatStateMessage (message) {\n                    /* Override the method on the ChatBoxView base class to\n                     * ignore <gone/> notifications in groupchats.\n                     *\n                     * As laid out in the business rules in XEP-0085\n                     * http://xmpp.org/extensions/xep-0085.html#bizrules-groupchat\n                     */\n                    if (message.get('fullname') === this.model.get('nick')) {\n                        // Don't know about other servers, but OpenFire sends\n                        // back to you your own chat state notifications.\n                        // We ignore them here...\n                        return;\n                    }\n                    if (message.get('chat_state') !== _converse.GONE) {\n                        _converse.ChatBoxView.prototype.handleChatStateMessage.apply(this, arguments);\n                    }\n                },\n\n                sendChatState () {\n                    /* Sends a message with the status of the user in this chat session\n                     * as taken from the 'chat_state' attribute of the chat box.\n                     * See XEP-0085 Chat State Notifications.\n                     */\n                    if (this.model.get('connection_status') !==  converse.ROOMSTATUS.ENTERED) {\n                        return;\n                    }\n                    const chat_state = this.model.get('chat_state');\n                    if (chat_state === _converse.GONE) {\n                        // <gone/> is not applicable within MUC context\n                        return;\n                    }\n                    _converse.connection.send(\n                        $msg({'to':this.model.get('jid'), 'type': 'groupchat'})\n                            .c(chat_state, {'xmlns': Strophe.NS.CHATSTATES}).up()\n                            .c('no-store', {'xmlns': Strophe.NS.HINTS}).up()\n                            .c('no-permanent-store', {'xmlns': Strophe.NS.HINTS})\n                    );\n                },\n\n                sendChatRoomMessage (text) {\n                    /* Constuct a message stanza to be sent to this chat room,\n                     * and send it to the server.\n                     *\n                     * Parameters:\n                     *  (String) text: The message text to be sent.\n                     */\n                    const msgid = _converse.connection.getUniqueId();\n                    const msg = $msg({\n                        to: this.model.get('jid'),\n                        from: _converse.connection.jid,\n                        type: 'groupchat',\n                        id: msgid\n                    }).c(\"body\").t(text).up()\n                    .c(\"x\", {xmlns: \"jabber:x:event\"}).c(_converse.COMPOSING);\n                    _converse.connection.send(msg);\n                    this.model.messages.create({\n                        fullname: this.model.get('nick'),\n                        sender: 'me',\n                        time: moment().format(),\n                        message: text,\n                        msgid\n                    });\n                },\n\n                modifyRole(room, nick, role, reason, onSuccess, onError) {\n                    const item = $build(\"item\", {nick, role});\n                    const iq = $iq({to: room, type: \"set\"}).c(\"query\", {xmlns: Strophe.NS.MUC_ADMIN}).cnode(item.node);\n                    if (reason !== null) { iq.c(\"reason\", reason); }\n                    return _converse.connection.sendIQ(iq.tree(), onSuccess, onError);\n                },\n\n                validateRoleChangeCommand (command, args) {\n                    /* Check that a command to change a chat room user's role or\n                     * affiliation has anough arguments.\n                     */\n                    // TODO check if first argument is valid\n                    if (args.length < 1 || args.length > 2) {\n                        this.showStatusNotification(\n                            __('Error: the \"%1$s\" command takes two arguments, the user\\'s nickname and optionally a reason.',\n                                command),\n                            true\n                        );\n                        return false;\n                    }\n                    return true;\n                },\n\n                clearChatRoomMessages (ev) {\n                    /* Remove all messages from the chat room UI.\n                     */\n                    if (!_.isUndefined(ev)) { ev.stopPropagation(); }\n                    const result = confirm(__(\"Are you sure you want to clear the messages from this room?\"));\n                    if (result === true) {\n                        this.$content.empty();\n                    }\n                    return this;\n                },\n\n                onCommandError () {\n                    this.showStatusNotification(__(\"Error: could not execute the command\"), true);\n                },\n\n                onMessageSubmitted (text) {\n                    /* Gets called when the user presses enter to send off a\n                     * message in a chat room.\n                     *\n                     * Parameters:\n                     *    (String) text - The message text.\n                     */\n                    if (_converse.muc_disable_moderator_commands) {\n                        return this.sendChatRoomMessage(text);\n                    }\n                    const match = text.replace(/^\\s*/, \"\").match(/^\\/(.*?)(?: (.*))?$/) || [false, '', ''],\n                        args = match[2] && match[2].splitOnce(' ') || [],\n                        command = match[1].toLowerCase();\n                    switch (command) {\n                        case 'admin':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.setAffiliation('admin',\n                                    [{ 'jid': args[0],\n                                       'reason': args[1]\n                                    }]).then(null, this.onCommandError.bind(this));\n                            break;\n                        case 'ban':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.setAffiliation('outcast',\n                                    [{ 'jid': args[0],\n                                       'reason': args[1]\n                                    }]).then(null, this.onCommandError.bind(this));\n                            break;\n                        case 'clear':\n                            this.clearChatRoomMessages();\n                            break;\n                        case 'deop':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.modifyRole(\n                                    this.model.get('jid'), args[0], 'occupant', args[1],\n                                    undefined, this.onCommandError.bind(this));\n                            break;\n                        case 'help':\n                            this.showHelpMessages([\n                                `<strong>/admin</strong>: ${__(\"Change user's affiliation to admin\")}`,\n                                `<strong>/ban</strong>: ${__('Ban user from room')}`,\n                                `<strong>/clear</strong>: ${__('Remove messages')}`,\n                                `<strong>/deop</strong>: ${__('Change user role to occupant')}`,\n                                `<strong>/help</strong>: ${__('Show this menu')}`,\n                                `<strong>/kick</strong>: ${__('Kick user from room')}`,\n                                `<strong>/me</strong>: ${__('Write in 3rd person')}`,\n                                `<strong>/member</strong>: ${__('Grant membership to a user')}`,\n                                `<strong>/mute</strong>: ${__(\"Remove user's ability to post messages\")}`,\n                                `<strong>/nick</strong>: ${__('Change your nickname')}`,\n                                `<strong>/op</strong>: ${__('Grant moderator role to user')}`,\n                                `<strong>/owner</strong>: ${__('Grant ownership of this room')}`,\n                                `<strong>/revoke</strong>: ${__(\"Revoke user's membership\")}`,\n                                `<strong>/subject</strong>: ${__('Set room subject')}`,\n                                `<strong>/topic</strong>: ${__('Set room subject (alias for /subject)')}`,\n                                `<strong>/voice</strong>: ${__('Allow muted user to post messages')}`\n                            ]);\n                            break;\n                        case 'kick':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.modifyRole(\n                                    this.model.get('jid'), args[0], 'none', args[1],\n                                    undefined, this.onCommandError.bind(this));\n                            break;\n                        case 'mute':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.modifyRole(\n                                    this.model.get('jid'), args[0], 'visitor', args[1],\n                                    undefined, this.onCommandError.bind(this));\n                            break;\n                        case 'member':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.setAffiliation('member',\n                                    [{ 'jid': args[0],\n                                       'reason': args[1]\n                                    }]).then(null, this.onCommandError.bind(this));\n                            break;\n                        case 'nick':\n                            _converse.connection.send($pres({\n                                from: _converse.connection.jid,\n                                to: this.getRoomJIDAndNick(match[2]),\n                                id: _converse.connection.getUniqueId()\n                            }).tree());\n                            break;\n                        case 'owner':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.setAffiliation('owner',\n                                    [{ 'jid': args[0],\n                                       'reason': args[1]\n                                    }]).then(null, this.onCommandError.bind(this));\n                            break;\n                        case 'op':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.modifyRole(\n                                    this.model.get('jid'), args[0], 'moderator', args[1],\n                                    undefined, this.onCommandError.bind(this));\n                            break;\n                        case 'revoke':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.setAffiliation('none',\n                                    [{ 'jid': args[0],\n                                       'reason': args[1]\n                                    }]).then(null, this.onCommandError.bind(this));\n                            break;\n                        case 'topic':\n                        case 'subject':\n                            _converse.connection.send(\n                                $msg({\n                                    to: this.model.get('jid'),\n                                    from: _converse.connection.jid,\n                                    type: \"groupchat\"\n                                }).c(\"subject\", {xmlns: \"jabber:client\"}).t(match[2]).tree()\n                            );\n                            break;\n                        case 'voice':\n                            if (!this.validateRoleChangeCommand(command, args)) { break; }\n                            this.modifyRole(\n                                    this.model.get('jid'), args[0], 'occupant', args[1],\n                                    undefined, this.onCommandError.bind(this));\n                            break;\n                        default:\n                            this.sendChatRoomMessage(text);\n                        break;\n                    }\n                },\n\n                handleMUCMessage (stanza) {\n                    /* Handler for all MUC messages sent to this chat room.\n                     *\n                     * Parameters:\n                     *  (XMLElement) stanza: The message stanza.\n                     */\n                    const configuration_changed = stanza.querySelector(\"status[code='104']\");\n                    const logging_enabled = stanza.querySelector(\"status[code='170']\");\n                    const logging_disabled = stanza.querySelector(\"status[code='171']\");\n                    const room_no_longer_anon = stanza.querySelector(\"status[code='172']\");\n                    const room_now_semi_anon = stanza.querySelector(\"status[code='173']\");\n                    const room_now_fully_anon = stanza.querySelector(\"status[code='173']\");\n                    if (configuration_changed || logging_enabled || logging_disabled ||\n                            room_no_longer_anon || room_now_semi_anon || room_now_fully_anon) {\n                        this.getRoomFeatures();\n                    }\n                    _.flow(this.showStatusMessages.bind(this), this.onChatRoomMessage.bind(this))(stanza);\n                    return true;\n                },\n\n                getRoomJIDAndNick (nick) {\n                    /* Utility method to construct the JID for the current user\n                     * as occupant of the room.\n                     *\n                     * This is the room JID, with the user's nick added at the\n                     * end.\n                     *\n                     * For example: room@conference.example.org/nickname\n                     */\n                    if (nick) {\n                        this.model.save({'nick': nick});\n                    } else {\n                        nick = this.model.get('nick');\n                    }\n                    const room = this.model.get('jid');\n                    const node = Strophe.getNodeFromJid(room);\n                    const domain = Strophe.getDomainFromJid(room);\n                    return node + \"@\" + domain + (nick !== null ? `/${nick}` : \"\");\n                },\n\n                registerHandlers () {\n                    /* Register presence and message handlers for this chat\n                     * room\n                     */\n                    const room_jid = this.model.get('jid');\n                    this.removeHandlers();\n                    this.presence_handler = _converse.connection.addHandler(\n                        this.onChatRoomPresence.bind(this),\n                        Strophe.NS.MUC, 'presence', null, null, room_jid,\n                        {'ignoreNamespaceFragment': true, 'matchBareFromJid': true}\n                    );\n                    this.message_handler = _converse.connection.addHandler(\n                        this.handleMUCMessage.bind(this),\n                        null, 'message', 'groupchat', null, room_jid,\n                        {'matchBareFromJid': true}\n                    );\n                },\n\n                removeHandlers () {\n                    /* Remove the presence and message handlers that were\n                     * registered for this chat room.\n                     */\n                    if (this.message_handler) {\n                        _converse.connection.deleteHandler(this.message_handler);\n                        delete this.message_handler;\n                    }\n                    if (this.presence_handler) {\n                        _converse.connection.deleteHandler(this.presence_handler);\n                        delete this.presence_handler;\n                    }\n                    return this;\n                },\n\n                join (nick, password) {\n                    /* Join the chat room.\n                     *\n                     * Parameters:\n                     *  (String) nick: The user's nickname\n                     *  (String) password: Optional password, if required by\n                     *      the room.\n                     */\n                    nick = nick ? nick : this.model.get('nick');\n                    if (!nick) {\n                        return this.checkForReservedNick();\n                    }\n                    if (this.model.get('connection_status') === converse.ROOMSTATUS.ENTERED) {\n                        // We have restored a chat room from session storage,\n                        // so we don't send out a presence stanza again.\n                        return this;\n                    }\n                    const stanza = $pres({\n                        'from': _converse.connection.jid,\n                        'to': this.getRoomJIDAndNick(nick)\n                    }).c(\"x\", {'xmlns': Strophe.NS.MUC})\n                      .c(\"history\", {'maxstanzas': _converse.muc_history_max_stanzas}).up();\n                    if (password) {\n                        stanza.cnode(Strophe.xmlElement(\"password\", [], password));\n                    }\n                    this.model.save('connection_status', converse.ROOMSTATUS.CONNECTING);\n                    _converse.connection.send(stanza);\n                    return this;\n                },\n\n                sendUnavailablePresence (exit_msg) {\n                    const presence = $pres({\n                        type: \"unavailable\",\n                        from: _converse.connection.jid,\n                        to: this.getRoomJIDAndNick()\n                    });\n                    if (exit_msg !== null) {\n                        presence.c(\"status\", exit_msg);\n                    }\n                    _converse.connection.sendPresence(presence);\n                },\n\n                leave(exit_msg) {\n                    /* Leave the chat room.\n                     *\n                     * Parameters:\n                     *  (String) exit_msg: Optional message to indicate your\n                     *      reason for leaving.\n                     */\n                    this.hide();\n                    this.occupantsview.model.reset();\n                    this.occupantsview.model.browserStorage._clear();\n                    if (_converse.connection.connected) {\n                        this.sendUnavailablePresence(exit_msg);\n                    }\n                    utils.safeSave(\n                        this.model,\n                        {'connection_status': converse.ROOMSTATUS.DISCONNECTED}\n                    );\n                    this.removeHandlers();\n                    _converse.ChatBoxView.prototype.close.apply(this, arguments);\n                },\n\n                renderConfigurationForm (stanza) {\n                    /* Renders a form given an IQ stanza containing the current\n                     * room configuration.\n                     *\n                     * Returns a promise which resolves once the user has\n                     * either submitted the form, or canceled it.\n                     *\n                     * Parameters:\n                     *  (XMLElement) stanza: The IQ stanza containing the room\n                     *      config.\n                     */\n                    const $body = this.$('.chatroom-body');\n                    $body.children().addClass('hidden');\n                    // Remove any existing forms\n                    $body.find('form.chatroom-form').remove();\n                    $body.append(tpl_chatroom_form());\n\n                    const $form = $body.find('form.chatroom-form');\n                    let $fieldset = $form.children('fieldset:first');\n                    const $stanza = $(stanza),\n                          $fields = $stanza.find('field'),\n                          title = $stanza.find('title').text(),\n                          instructions = $stanza.find('instructions').text();\n                    $fieldset.find('span.spinner').remove();\n                    $fieldset.append($('<legend>').text(title));\n                    if (instructions && instructions !== title) {\n                        $fieldset.append($('<p class=\"instructions\">').text(instructions));\n                    }\n                    _.each($fields, function (field) {\n                        $fieldset.append(utils.xForm2webForm(field, stanza));\n                    });\n                    $form.append('<fieldset></fieldset>');\n                    $fieldset = $form.children('fieldset:last');\n                    $fieldset.append(`<input type=\"submit\" class=\"pure-button button-primary\" value=\"${__('Save')}\"/>`);\n                    $fieldset.append(`<input type=\"button\" class=\"pure-button button-cancel\" value=\"${__('Cancel')}\"/>`);\n                    $fieldset.find('input[type=button]').on('click', (ev) => {\n                        ev.preventDefault();\n                        this.cancelConfiguration();\n                    });\n                    $form.on('submit', (ev) => {\n                        ev.preventDefault();\n                        this.saveConfiguration(ev.target).then(\n                            this.getRoomFeatures.bind(this)\n                        );\n                    });\n                },\n\n                sendConfiguration(config, onSuccess, onError) {\n                    /* Send an IQ stanza with the room configuration.\n                     *\n                     * Parameters:\n                     *  (Array) config: The room configuration\n                     *  (Function) onSuccess: Callback upon succesful IQ response\n                     *      The first parameter passed in is IQ containing the\n                     *      room configuration.\n                     *      The second is the response IQ from the server.\n                     *  (Function) onError: Callback upon error IQ response\n                     *      The first parameter passed in is IQ containing the\n                     *      room configuration.\n                     *      The second is the response IQ from the server.\n                     */\n                    const iq = $iq({to: this.model.get('jid'), type: \"set\"})\n                        .c(\"query\", {xmlns: Strophe.NS.MUC_OWNER})\n                        .c(\"x\", {xmlns: Strophe.NS.XFORM, type: \"submit\"});\n                    _.each(config || [], function (node) { iq.cnode(node).up(); });\n                    onSuccess = _.isUndefined(onSuccess) ? _.noop : _.partial(onSuccess, iq.nodeTree);\n                    onError = _.isUndefined(onError) ? _.noop : _.partial(onError, iq.nodeTree);\n                    return _converse.connection.sendIQ(iq, onSuccess, onError);\n                },\n\n                saveConfiguration (form) {\n                    /* Submit the room configuration form by sending an IQ\n                     * stanza to the server.\n                     *\n                     * Returns a promise which resolves once the XMPP server\n                     * has return a response IQ.\n                     *\n                     * Parameters:\n                     *  (HTMLElement) form: The configuration form DOM element.\n                     */\n                    return new Promise((resolve, reject) => {\n                        const $inputs = $(form).find(':input:not([type=button]):not([type=submit])'),\n                            configArray = [];\n                        $inputs.each(function () {\n                            configArray.push(utils.webForm2xForm(this));\n                        });\n                        this.sendConfiguration(configArray, resolve, reject);\n                        this.$el.find('div.chatroom-form-container').hide((el) => {\n                            $(el).remove();\n                            this.renderAfterTransition();\n                        });\n                    });\n                },\n\n                autoConfigureChatRoom () {\n                    /* Automatically configure room based on the\n                     * 'roomconfig' data on this view's model.\n                     *\n                     * Returns a promise which resolves once a response IQ has\n                     * been received.\n                     *\n                     * Parameters:\n                     *  (XMLElement) stanza: IQ stanza from the server,\n                     *       containing the configuration.\n                     */\n                    const that = this;\n                    return new Promise((resolve, reject) => {\n                        this.fetchRoomConfiguration().then(function (stanza) {\n                            const configArray = [],\n                                fields = stanza.querySelectorAll('field'),\n                                config = that.model.get('roomconfig');\n                            let count = fields.length;\n\n                            _.each(fields, function (field) {\n                                const fieldname = field.getAttribute('var').replace('muc#roomconfig_', ''),\n                                    type = field.getAttribute('type');\n                                let value;\n                                if (fieldname in config) {\n                                    switch (type) {\n                                        case 'boolean':\n                                            value = config[fieldname] ? 1 : 0;\n                                            break;\n                                        case 'list-multi':\n                                            // TODO: we don't yet handle \"list-multi\" types\n                                            value = field.innerHTML;\n                                            break;\n                                        default:\n                                            value = config[fieldname];\n                                    }\n                                    field.innerHTML = $build('value').t(value);\n                                }\n                                configArray.push(field);\n                                if (!--count) {\n                                    that.sendConfiguration(configArray, resolve, reject);\n                                }\n                            });\n                        });\n                    });\n                },\n\n                cancelConfiguration () {\n                    /* Remove the configuration form without submitting and\n                     * return to the chat view.\n                     */\n                    this.$el.find('div.chatroom-form-container').hide(\n                        (el) => {\n                            $(el).remove();\n                            this.renderAfterTransition();\n                        });\n                },\n\n                fetchRoomConfiguration (handler) {\n                    /* Send an IQ stanza to fetch the room configuration data.\n                     * Returns a promise which resolves once the response IQ\n                     * has been received.\n                     *\n                     * Parameters:\n                     *  (Function) handler: The handler for the response IQ\n                     */\n                    return new Promise((resolve, reject) => {\n                        _converse.connection.sendIQ(\n                            $iq({\n                                'to': this.model.get('jid'),\n                                'type': \"get\"\n                            }).c(\"query\", {xmlns: Strophe.NS.MUC_OWNER}),\n                            (iq) => {\n                                if (handler) {\n                                    handler.apply(this, arguments);\n                                }\n                                resolve(iq);\n                            },\n                            reject // errback\n                        );\n                    });\n                },\n\n                parseRoomFeatures (iq) {\n                    /* See http://xmpp.org/extensions/xep-0045.html#disco-roominfo\n                     *\n                     *  <identity\n                     *      category='conference'\n                     *      name='A Dark Cave'\n                     *      type='text'/>\n                     *  <feature var='http://jabber.org/protocol/muc'/>\n                     *  <feature var='muc_passwordprotected'/>\n                     *  <feature var='muc_hidden'/>\n                     *  <feature var='muc_temporary'/>\n                     *  <feature var='muc_open'/>\n                     *  <feature var='muc_unmoderated'/>\n                     *  <feature var='muc_nonanonymous'/>\n                     *  <feature var='urn:xmpp:mam:0'/>\n                     */\n                    const features = {\n                        'features_fetched': true,\n                        'name': iq.querySelector('identity').getAttribute('name')\n                    }\n                    _.each(iq.querySelectorAll('feature'), function (field) {\n                        const fieldname = field.getAttribute('var');\n                        if (!fieldname.startsWith('muc_')) {\n                            if (fieldname === Strophe.NS.MAM) {\n                                features.mam_enabled = true;\n                            }\n                            return;\n                        }\n                        features[fieldname.replace('muc_', '')] = true;\n                    });\n                    const desc_field = iq.querySelector('field[var=\"muc#roominfo_description\"] value');\n                    if (!_.isNull(desc_field)) {\n                        features.description = desc_field.textContent;\n                    }\n                    this.model.save(features);\n                },\n\n                getRoomFeatures () {\n                    /* Fetch the room disco info, parse it and then\n                     * save it on the Backbone.Model of this chat rooms.\n                     */\n                    return new Promise((resolve, reject) => {\n                        _converse.connection.disco.info(\n                            this.model.get('jid'),\n                            null,\n                            _.flow(this.parseRoomFeatures.bind(this), resolve),\n                            () => { reject(new Error(\"Could not parse the room features\")) },\n                            5000\n                        );\n                    });\n                },\n\n                getAndRenderConfigurationForm (ev) {\n                    /* Start the process of configuring a chat room, either by\n                     * rendering a configuration form, or by auto-configuring\n                     * based on the \"roomconfig\" data stored on the\n                     * Backbone.Model.\n                     *\n                     * Stores the new configuration on the Backbone.Model once\n                     * completed.\n                     *\n                     * Paremeters:\n                     *  (Event) ev: DOM event that might be passed in if this\n                     *      method is called due to a user action. In this\n                     *      case, auto-configure won't happen, regardless of\n                     *      the settings.\n                     */\n                    this.showSpinner();\n                    this.fetchRoomConfiguration().then(\n                        this.renderConfigurationForm.bind(this));\n                },\n\n                submitNickname (ev) {\n                    /* Get the nickname value from the form and then join the\n                     * chat room with it.\n                     */\n                    ev.preventDefault();\n                    const nick_el = ev.target.nick;\n                    const nick = nick_el.value;\n                    if (!nick) {\n                        nick_el.classList.add('error');\n                        return;\n                    }\n                    else {\n                        nick_el.classList.remove('error');\n                    }\n                    this.$el.find('.chatroom-form-container')\n                        .replaceWith(tpl_spinner);\n                    this.join(nick);\n                },\n\n                checkForReservedNick () {\n                    /* User service-discovery to ask the XMPP server whether\n                     * this user has a reserved nickname for this room.\n                     * If so, we'll use that, otherwise we render the nickname\n                     * form.\n                     */\n                    this.showSpinner();\n                    _converse.connection.sendIQ(\n                        $iq({\n                            'to': this.model.get('jid'),\n                            'from': _converse.connection.jid,\n                            'type': \"get\"\n                        }).c(\"query\", {\n                            'xmlns': Strophe.NS.DISCO_INFO,\n                            'node': 'x-roomuser-item'\n                        }),\n                        this.onNickNameFound.bind(this),\n                        this.onNickNameNotFound.bind(this)\n                    );\n                    return this;\n                },\n\n                onNickNameFound (iq) {\n                    /* We've received an IQ response from the server which\n                     * might contain the user's reserved nickname.\n                     * If no nickname is found we either render a form for\n                     * them to specify one, or we try to join the room with the\n                     * node of the user's JID.\n                     *\n                     * Parameters:\n                     *  (XMLElement) iq: The received IQ stanza\n                     */\n                    const nick = $(iq)\n                        .find('query[node=\"x-roomuser-item\"] identity')\n                        .attr('name');\n                    if (!nick) {\n                        this.onNickNameNotFound();\n                    } else {\n                        this.join(nick);\n                    }\n                },\n\n                onNickNameNotFound (message) {\n                    if (_converse.muc_nickname_from_jid) {\n                        // We try to enter the room with the node part of\n                        // the user's JID.\n                        this.join(this.getDefaultNickName());\n                    } else {\n                        this.renderNicknameForm(message);\n                    }\n                },\n\n                getDefaultNickName () {\n                    /* The default nickname (used when muc_nickname_from_jid is true)\n                     * is the node part of the user's JID.\n                     * We put this in a separate method so that it can be\n                     * overridden by plugins.\n                     */\n                    return Strophe.unescapeNode(Strophe.getNodeFromJid(_converse.bare_jid));\n                },\n\n                onNicknameClash (presence) {\n                    /* When the nickname is already taken, we either render a\n                     * form for the user to choose a new nickname, or we\n                     * try to make the nickname unique by adding an integer to\n                     * it. So john will become john-2, and then john-3 and so on.\n                     *\n                     * Which option is take depends on the value of\n                     * muc_nickname_from_jid.\n                     */\n                    if (_converse.muc_nickname_from_jid) {\n                        const nick = presence.getAttribute('from').split('/')[1];\n                        if (nick === this.getDefaultNickName()) {\n                            this.join(nick + '-2');\n                        } else {\n                            const del= nick.lastIndexOf(\"-\");\n                            const num = nick.substring(del+1, nick.length);\n                            this.join(nick.substring(0, del+1) + String(Number(num)+1));\n                        }\n                    } else {\n                        this.renderNicknameForm(\n                            __(\"The nickname you chose is reserved or \"+\n                               \"currently in use, please choose a different one.\")\n                        );\n                    }\n                },\n\n                renderNicknameForm (message) {\n                    /* Render a form which allows the user to choose their\n                     * nickname.\n                     */\n                    this.$('.chatroom-body').children().addClass('hidden');\n                    this.$('span.centered.spinner').remove();\n                    if (!_.isString(message)) {\n                        message = '';\n                    }\n                    this.$('.chatroom-body').append(\n                        tpl_chatroom_nickname_form({\n                            heading: __('Please choose your nickname'),\n                            label_nickname: __('Nickname'),\n                            label_join: __('Enter room'),\n                            validation_message: message\n                        }));\n                    this.model.save('connection_status', converse.ROOMSTATUS.NICKNAME_REQUIRED);\n                    this.$('.chatroom-form').on('submit', this.submitNickname.bind(this));\n                },\n\n                submitPassword (ev) {\n                    ev.preventDefault();\n                    const password = this.$el.find('.chatroom-form').find('input[type=password]').val();\n                    this.$el.find('.chatroom-form-container').replaceWith(tpl_spinner);\n                    this.join(this.model.get('nick'), password);\n                },\n\n                renderPasswordForm () {\n                    this.$('.chatroom-body').children().addClass('hidden');\n                    this.$('span.centered.spinner').remove();\n                    this.$('.chatroom-body').append(\n                        tpl_chatroom_password_form({\n                            heading: __('This chatroom requires a password'),\n                            label_password: __('Password: '),\n                            label_submit: __('Submit')\n                        }));\n                    this.model.save('connection_status', converse.ROOMSTATUS.PASSWORD_REQUIRED);\n                    this.$('.chatroom-form').on('submit', this.submitPassword.bind(this));\n                },\n\n                showDisconnectMessage (msg) {\n                    this.$('.chat-area').addClass('hidden');\n                    this.$('.occupants').addClass('hidden');\n                    this.$('span.centered.spinner').remove();\n                    this.$('.chatroom-body').append(tpl_chatroom_disconnect({\n                        'disconnect_message': msg\n                    }));\n                },\n\n                getMessageFromStatus (stat, stanza, is_self) {\n                    /* Parameters:\n                     *  (XMLElement) stat: A <status> element.\n                     *  (Boolean) is_self: Whether the element refers to the\n                     *                     current user.\n                     *  (XMLElement) stanza: The original stanza received.\n                     */\n                    const code = stat.getAttribute('code');\n                    if (code === '110') { return; }\n                    if (code in _converse.muc.info_messages) {\n                        return _converse.muc.info_messages[code];\n                    }\n                    let nick;\n                    if (!is_self) {\n                        if (code in _converse.muc.action_info_messages) {\n                            nick = Strophe.getResourceFromJid(stanza.getAttribute('from'));\n                            return __(_converse.muc.action_info_messages[code], nick);\n                        }\n                    } else if (code in _converse.muc.new_nickname_messages) {\n                        if (is_self && code === \"210\") {\n                            nick = Strophe.getResourceFromJid(stanza.getAttribute('from'));\n                        } else if (is_self && code === \"303\") {\n                            nick = stanza.querySelector('x item').getAttribute('nick');\n                        }\n                        return __(_converse.muc.new_nickname_messages[code], nick);\n                    }\n                    return;\n                },\n\n                saveAffiliationAndRole (pres) {\n                    /* Parse the presence stanza for the current user's\n                     * affiliation.\n                     *\n                     * Parameters:\n                     *  (XMLElement) pres: A <presence> stanza.\n                     */\n                    const item = sizzle(`x[xmlns=\"${Strophe.NS.MUC_USER}\"] item`, pres).pop();\n                    const is_self = pres.querySelector(\"status[code='110']\");\n                    if (is_self && !_.isNil(item)) {\n                        const affiliation = item.getAttribute('affiliation');\n                        const role = item.getAttribute('role');\n                        if (affiliation) {\n                            this.model.save({'affiliation': affiliation});\n                        }\n                        if (role) {\n                            this.model.save({'role': role});\n                        }\n                    }\n                },\n\n                parseXUserElement (x, stanza, is_self) {\n                    /* Parse the passed-in <x xmlns='http://jabber.org/protocol/muc#user'>\n                     * element and construct a map containing relevant\n                     * information.\n                     */\n                    // 1. Get notification messages based on the <status> elements.\n                    const statuses = x.querySelectorAll('status');\n                    const mapper = _.partial(this.getMessageFromStatus, _, stanza, is_self);\n                    const notification = {};\n                    const messages = _.reject(_.map(statuses, mapper), _.isUndefined);\n                    if (messages.length) {\n                        notification.messages = messages;\n                    }\n                    // 2. Get disconnection messages based on the <status> elements\n                    const codes = _.invokeMap(statuses, Element.prototype.getAttribute, 'code');\n                    const disconnection_codes = _.intersection(codes, _.keys(_converse.muc.disconnect_messages));\n                    const disconnected = is_self && disconnection_codes.length > 0;\n                    if (disconnected) {\n                        notification.disconnected = true;\n                        notification.disconnection_message = _converse.muc.disconnect_messages[disconnection_codes[0]];\n                    }\n                    // 3. Find the reason and actor from the <item> element\n                    const item = x.querySelector('item');\n                    // By using querySelector above, we assume here there is\n                    // one <item> per <x xmlns='http://jabber.org/protocol/muc#user'>\n                    // element. This appears to be a safe assumption, since\n                    // each <x/> element pertains to a single user.\n                    if (!_.isNull(item)) {\n                        const reason = item.querySelector('reason');\n                        if (reason) {\n                            notification.reason = reason ? reason.textContent : undefined;\n                        }\n                        const actor = item.querySelector('actor');\n                        if (actor) {\n                            notification.actor = actor ? actor.getAttribute('nick') : undefined;\n                        }\n                    }\n                    return notification;\n                },\n\n                displayNotificationsforUser (notification) {\n                    /* Given the notification object generated by\n                     * parseXUserElement, display any relevant messages and\n                     * information to the user.\n                     */\n                    if (notification.disconnected) {\n                        this.showDisconnectMessage(notification.disconnection_message);\n                        if (notification.actor) {\n                            this.showDisconnectMessage(__('This action was done by %1$s.', notification.actor));\n                        }\n                        if (notification.reason) {\n                            this.showDisconnectMessage(__('The reason given is: \"%1$s\".', notification.reason));\n                        }\n                        this.model.save('connection_status', converse.ROOMSTATUS.DISCONNECTED);\n                        return;\n                    }\n                    _.each(notification.messages, (message) => {\n                        this.$content.append(tpl_info({'message': message}));\n                    });\n                    if (notification.reason) {\n                        this.showStatusNotification(__('The reason given is: \"%1$s \"', notification.reason), true);\n                    }\n                    if (notification.messages.length) {\n                        this.scrollDown();\n                    }\n                },\n\n                getJoinLeaveMessages (stanza) {\n                    /* Parse the given stanza and return notification messages\n                     * for join/leave events.\n                     */\n                    // XXX: some mangling required to make the returned\n                    // result look like the structure returned by\n                    // parseXUserElement. Not nice...\n                    const nick = Strophe.getResourceFromJid(stanza.getAttribute('from'));\n                    const stat = stanza.querySelector('status');\n                    if (stanza.getAttribute('type') === 'unavailable') {\n                        if (!_.isNull(stat) && stat.textContent) {\n                            return [{'messages': [__(nick+' has left the room. \"'+stat.textContent+'\"')]}];\n                        } else {\n                            return [{'messages': [__(nick+' has left the room')]}];\n                        }\n                    }\n                    if (!this.occupantsview.model.find({'nick': nick})) {\n                        // Only show join message if we don't already have the\n                        // occupant model. Doing so avoids showing duplicate\n                        // join messages.\n                        if (!_.isNull(stat) && stat.textContent) {\n                            return [{'messages': [__(nick+' has joined the room. \"'+stat.textContent+'\"')]}];\n                        } else {\n                            return [{'messages': [__(nick+' has joined the room.')]}];\n                        }\n                    }\n                },\n\n                showStatusMessages (stanza) {\n                    /* Check for status codes and communicate their purpose to the user.\n                     * See: http://xmpp.org/registrar/mucstatus.html\n                     *\n                     * Parameters:\n                     *  (XMLElement) stanza: The message or presence stanza\n                     *      containing the status codes.\n                     */\n                    const elements = sizzle(`x[xmlns=\"${Strophe.NS.MUC_USER}\"]`, stanza);\n                    const is_self = stanza.querySelectorAll(\"status[code='110']\").length;\n                    const iteratee = _.partial(this.parseXUserElement.bind(this), _, stanza, is_self);\n                    let notifications = _.reject(_.map(elements, iteratee), _.isEmpty);\n                    if (_.isEmpty(notifications) &&\n                            _converse.muc_show_join_leave &&\n                            stanza.nodeName === 'presence' &&\n                            this.model.get('connection_status') === converse.ROOMSTATUS.ENTERED\n                        ) {\n                        notifications = this.getJoinLeaveMessages(stanza);\n                    }\n                    _.each(notifications, this.displayNotificationsforUser.bind(this));\n                    return stanza;\n                },\n\n                showErrorMessage (presence) {\n                    // We didn't enter the room, so we must remove it from the MUC add-on\n                    const error = presence.querySelector('error');\n                    if (error.getAttribute('type') === 'auth') {\n                        if (!_.isNull(error.querySelector('not-authorized'))) {\n                            this.renderPasswordForm();\n                        } else if (!_.isNull(error.querySelector('registration-required'))) {\n                            this.showDisconnectMessage(__('You are not on the member list of this room.'));\n                        } else if (!_.isNull(error.querySelector('forbidden'))) {\n                            this.showDisconnectMessage(__('You have been banned from this room.'));\n                        }\n                    } else if (error.getAttribute('type') === 'modify') {\n                        if (!_.isNull(error.querySelector('jid-malformed'))) {\n                            this.showDisconnectMessage(__('No nickname was specified.'));\n                        }\n                    } else if (error.getAttribute('type') === 'cancel') {\n                        if (!_.isNull(error.querySelector('not-allowed'))) {\n                            this.showDisconnectMessage(__('You are not allowed to create new rooms.'));\n                        } else if (!_.isNull(error.querySelector('not-acceptable'))) {\n                            this.showDisconnectMessage(__(\"Your nickname doesn't conform to this room's policies.\"));\n                        } else if (!_.isNull(error.querySelector('conflict'))) {\n                            this.onNicknameClash(presence);\n                        } else if (!_.isNull(error.querySelector('item-not-found'))) {\n                            this.showDisconnectMessage(__(\"This room does not (yet) exist.\"));\n                        } else if (!_.isNull(error.querySelector('service-unavailable'))) {\n                            this.showDisconnectMessage(__(\"This room has reached its maximum number of occupants.\"));\n                        }\n                    }\n                },\n\n                renderAfterTransition () {\n                    /* Rerender the room after some kind of transition. For\n                     * example after the spinner has been removed or after a\n                     * form has been submitted and removed.\n                     */\n                    if (this.model.get('connection_status') == converse.ROOMSTATUS.NICKNAME_REQUIRED) {\n                        this.renderNicknameForm();\n                    } else if (this.model.get('connection_status') == converse.ROOMSTATUS.PASSWORD_REQUIRED) {\n                        this.renderPasswordForm();\n                    } else {\n                        this.$el.find('.chat-area').removeClass('hidden');\n                        this.$el.find('.occupants').removeClass('hidden');\n                        this.occupantsview.setOccupantsHeight();\n                        this.scrollDown();\n                    }\n                },\n\n                showSpinner () {\n                    this.$('.chatroom-body').children().addClass('hidden');\n                    this.$el.find('.chatroom-body').prepend(tpl_spinner);\n                },\n\n                hideSpinner () {\n                    /* Check if the spinner is being shown and if so, hide it.\n                     * Also make sure then that the chat area and occupants\n                     * list are both visible.\n                     */\n                    const spinner = this.el.querySelector('.spinner');\n                    if (!_.isNull(spinner)) {\n                        spinner.parentNode.removeChild(spinner);\n                        this.renderAfterTransition();\n                    }\n                    return this;\n                },\n\n                onOwnChatRoomPresence (pres) {\n                    /* Handles a received presence relating to the current\n                     * user.\n                     *\n                     * For locked rooms (which are by definition \"new\"), the\n                     * room will either be auto-configured or created instantly\n                     * (with default config) or a configuration room will be\n                     * rendered.\n                     *\n                     * If the room is not locked, then the room will be\n                     * auto-configured only if applicable and if the current\n                     * user is the room's owner.\n                     *\n                     * Parameters:\n                     *  (XMLElement) pres: The stanza\n                     */\n                    this.saveAffiliationAndRole(pres);\n\n                    const locked_room = pres.querySelector(\"status[code='201']\");\n                    if (locked_room) {\n                        if (this.model.get('auto_configure')) {\n                            this.autoConfigureChatRoom().then(this.getRoomFeatures.bind(this));\n                        } else if (_converse.muc_instant_rooms) {\n                            // Accept default configuration\n                            this.saveConfiguration().then(this.getRoomFeatures.bind(this));\n                        } else {\n                            this.getAndRenderConfigurationForm();\n                            return; // We haven't yet entered the room, so bail here.\n                        }\n                    } else if (!this.model.get('features_fetched')) {\n                        // The features for this room weren't fetched.\n                        // That must mean it's a new room without locking\n                        // (in which case Prosody doesn't send a 201 status),\n                        // otherwise the features would have been fetched in\n                        // the \"initialize\" method already.\n                        if (this.model.get('affiliation') === 'owner' && this.model.get('auto_configure')) {\n                            this.autoConfigureChatRoom().then(this.getRoomFeatures.bind(this));\n                        } else {\n                            this.getRoomFeatures();\n                        }\n                    }\n                    this.model.save('connection_status', converse.ROOMSTATUS.ENTERED);\n                },\n\n                onChatRoomPresence (pres) {\n                    /* Handles all MUC presence stanzas.\n                     *\n                     * Parameters:\n                     *  (XMLElement) pres: The stanza\n                     */\n                    if (pres.getAttribute('type') === 'error') {\n                        this.model.save('connection_status', converse.ROOMSTATUS.DISCONNECTED);\n                        this.showErrorMessage(pres);\n                        return true;\n                    }\n                    const is_self = pres.querySelector(\"status[code='110']\");\n                    if (is_self && pres.getAttribute('type') !== 'unavailable') {\n                        this.onOwnChatRoomPresence(pres);\n                    }\n                    this.hideSpinner().showStatusMessages(pres);\n                    // This must be called after showStatusMessages so that\n                    // \"join\" messages are correctly shown.\n                    this.occupantsview.updateOccupantsOnPresence(pres);\n                    if (this.model.get('role') !== 'none' &&\n                            this.model.get('connection_status') === converse.ROOMSTATUS.CONNECTING) {\n                        this.model.save('connection_status', converse.ROOMSTATUS.CONNECTED);\n                    }\n                    return true;\n                },\n\n                setChatRoomSubject (sender, subject) {\n                    // For translators: the %1$s and %2$s parts will get\n                    // replaced by the user and topic text respectively\n                    // Example: Topic set by JC Brand to: Hello World!\n                    this.$content.append(\n                        tpl_info({'message': __('Topic set by %1$s to: %2$s', sender, subject)}));\n                    this.scrollDown();\n                },\n\n                isDuplicateBasedOnTime (message) {\n                    /* Checks whether a received messages is actually a\n                     * duplicate based on whether it has a \"ts\" attribute\n                     * with a unix timestamp.\n                     *\n                     * This is used for better integration with Slack's XMPP\n                     * gateway, which doesn't use message IDs but instead the\n                     * aforementioned \"ts\" attributes.\n                     */\n                    const entity = _converse.disco_entities.get(_converse.domain);\n                    if (entity.identities.where({'name': \"Slack-XMPP\"})) {\n                        const ts = message.getAttribute('ts');\n                        if (_.isNull(ts)) {\n                            return false;\n                        } else {\n                            return this.model.messages.where({\n                                'sender': 'me',\n                                'message': this.model.getMessageBody(message)\n                            }).filter(\n                                (msg) => Math.abs(moment(msg.get('time')).diff(moment.unix(ts))) < 5000\n                            ).length > 0;\n                        }\n                    }\n                    return false;\n                },\n\n                isDuplicate (message) {\n                    const msgid = message.getAttribute('id'),\n                          jid = message.getAttribute('from'),\n                          resource = Strophe.getResourceFromJid(jid),\n                          sender = resource && Strophe.unescapeNode(resource) || '';\n                    if (msgid) {\n                        return this.model.messages.filter(\n                            // Some bots (like HAL in the prosody chatroom)\n                            // respond to commands with the same ID as the\n                            // original message. So we also check the sender.\n                            (msg) => msg.get('msgid') === msgid && msg.get('fullname') === sender\n                        ).length > 0;\n                    }\n                    return this.isDuplicateBasedOnTime(message);\n                },\n\n                onChatRoomMessage (message) {\n                    /* Given a <message> stanza, create a message\n                     * Backbone.Model if appropriate.\n                     *\n                     * Parameters:\n                     *  (XMLElement) msg: The received message stanza\n                     */\n                    const original_stanza = message,\n                        forwarded = message.querySelector('forwarded');\n                    let delay;\n                    if (!_.isNull(forwarded)) {\n                        message = forwarded.querySelector('message');\n                        delay = forwarded.querySelector('delay');\n                    }\n                    const jid = message.getAttribute('from'),\n                        resource = Strophe.getResourceFromJid(jid),\n                        sender = resource && Strophe.unescapeNode(resource) || '',\n                        subject = _.propertyOf(message.querySelector('subject'))('textContent');\n\n                    if (this.isDuplicate(message)) {\n                        return true;\n                    }\n                    if (subject) {\n                        this.setChatRoomSubject(sender, subject);\n                    }\n                    if (sender === '') {\n                        return true;\n                    }\n                    this.model.incrementUnreadMsgCounter(original_stanza);\n                    this.model.createMessage(message, delay, original_stanza);\n                    if (sender !== this.model.get('nick')) {\n                        // We only emit an event if it's not our own message\n                        _converse.emit(\n                            'message',\n                            {'stanza': original_stanza, 'chatbox': this.model}\n                        );\n                    }\n                    return true;\n                }\n            });\n\n            _converse.ChatRoomOccupant = Backbone.Model.extend({\n                initialize (attributes) {\n                    this.set(_.extend({\n                        'id': _converse.connection.getUniqueId(),\n                    }, attributes));\n                }\n            });\n\n            _converse.ChatRoomOccupantView = Backbone.View.extend({\n                tagName: 'li',\n                initialize () {\n                    this.model.on('change', this.render, this);\n                    this.model.on('destroy', this.destroy, this);\n                },\n\n                render () {\n                    const show = this.model.get('show') || 'online';\n                    const new_el = tpl_occupant(\n                        _.extend(\n                            { 'jid': '',\n                              'show': show,\n                              'hint_show': _converse.PRETTY_CHAT_STATUS[show],\n                              'hint_occupant': __('Click to mention %1$s in your message.', this.model.get('nick')),\n                              'desc_moderator': __('This user is a moderator.'),\n                              'desc_occupant': __('This user can send messages in this room.'),\n                              'desc_visitor': __('This user can NOT send messages in this room.')\n                            }, this.model.toJSON()\n                        )\n                    );\n                    const $parents = this.$el.parents();\n                    if ($parents.length) {\n                        this.$el.replaceWith(new_el);\n                        this.setElement($parents.first().children(`#${this.model.get('id')}`), true);\n                        this.delegateEvents();\n                    } else {\n                        this.$el.replaceWith(new_el);\n                        this.setElement(new_el, true);\n                    }\n                    return this;\n                },\n\n                destroy () {\n                    this.$el.remove();\n                }\n            });\n\n            _converse.ChatRoomOccupants = Backbone.Collection.extend({\n                model: _converse.ChatRoomOccupant\n            });\n\n            _converse.ChatRoomOccupantsView = Backbone.Overview.extend({\n                tagName: 'div',\n                className: 'occupants',\n\n                initialize () {\n                    this.model.on(\"add\", this.onOccupantAdded, this);\n                    this.chatroomview = this.model.chatroomview;\n                    this.chatroomview.model.on('change:open', this.renderInviteWidget, this);\n                    this.chatroomview.model.on('change:affiliation', this.renderInviteWidget, this);\n                    this.chatroomview.model.on('change:hidden', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:mam_enabled', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:membersonly', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:moderated', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:nonanonymous', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:open', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:passwordprotected', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:persistent', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:public', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:semianonymous', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:temporary', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:unmoderated', this.onFeatureChanged, this);\n                    this.chatroomview.model.on('change:unsecured', this.onFeatureChanged, this);\n                },\n\n                render () {\n                    this.el.innerHTML = tpl_chatroom_sidebar(\n                        _.extend(this.chatroomview.model.toJSON(), {\n                            'allow_muc_invitations': _converse.allow_muc_invitations,\n                            'label_occupants': __('Occupants')\n                        })\n                    );\n                    if (_converse.allow_muc_invitations) {\n                        _converse.api.waitUntil('rosterContactsFetched').then(\n                            this.renderInviteWidget.bind(this)\n                        );\n                    }\n                    return this.renderRoomFeatures();\n                },\n\n                renderInviteWidget () {\n                    let form = this.el.querySelector('form.room-invite');\n                    if (this.shouldInviteWidgetBeShown()) {\n                        if (_.isNull(form)) {\n                            const heading = this.el.querySelector('.occupants-heading');\n                            form = tpl_chatroom_invite({\n                                'error_message': null,\n                                'label_invitation': __('Invite'),\n                            });\n                            heading.insertAdjacentHTML('afterend', form);\n                            this.initInviteWidget();\n                        }\n                    } else {\n                        if (!_.isNull(form)) {\n                            form.remove();\n                        }\n                    }\n                    return this;\n                },\n\n                renderRoomFeatures () {\n                    const picks = _.pick(this.chatroomview.model.attributes, ROOM_FEATURES),\n                        iteratee = (a, v) => a || v,\n                        el = this.el.querySelector('.chatroom-features');\n\n                    el.innerHTML = tpl_chatroom_features(\n                            _.extend(this.chatroomview.model.toJSON(), {\n                                'has_features': _.reduce(_.values(picks), iteratee),\n                                'label_features': __('Features'),\n                                'label_hidden': __('Hidden'),\n                                'label_mam_enabled': __('Message archiving'),\n                                'label_membersonly': __('Members only'),\n                                'label_moderated': __('Moderated'),\n                                'label_nonanonymous': __('Non-anonymous'),\n                                'label_open': __('Open'),\n                                'label_passwordprotected': __('Password protected'),\n                                'label_persistent': __('Persistent'),\n                                'label_public': __('Public'),\n                                'label_semianonymous': __('Semi-anonymous'),\n                                'label_temporary': __('Temporary'),\n                                'label_unmoderated': __('Unmoderated'),\n                                'label_unsecured': __('Unsecured'),\n                                'tt_hidden': __('This room is not publicly searchable'),\n                                'tt_mam_enabled': __('Messages are archived on the server'),\n                                'tt_membersonly': __('This room is restricted to members only'),\n                                'tt_moderated': __('This room is being moderated'),\n                                'tt_nonanonymous': __('All other room occupants can see your XMPP username'),\n                                'tt_open': __('Anyone can join this room'),\n                                'tt_passwordprotected': __('This room requires a password before entry'),\n                                'tt_persistent': __('This room persists even if it\\'s unoccupied'),\n                                'tt_public': __('This room is publicly searchable'),\n                                'tt_semianonymous': __('Only moderators can see your XMPP username'),\n                                'tt_temporary': __('This room will disappear once the last person leaves'),\n                                'tt_unmoderated': __('This room is not being moderated'),\n                                'tt_unsecured': __('This room does not require a password upon entry')\n                            }));\n                    this.setOccupantsHeight();\n                    return this;\n                },\n\n                onFeatureChanged (model) {\n                    /* When a feature has been changed, it's logical opposite\n                     * must be set to the opposite value.\n                     *\n                     * So for example, if \"temporary\" was set to \"false\", then\n                     * \"persistent\" will be set to \"true\" in this method.\n                     *\n                     * Additionally a debounced render method is called to make\n                     * sure the features widget gets updated.\n                     */\n                    if (_.isUndefined(this.debouncedRenderRoomFeatures)) {\n                        this.debouncedRenderRoomFeatures = _.debounce(\n                            this.renderRoomFeatures, 100, {'leading': false}\n                        );\n                    }\n                    const changed_features = {};\n                    _.each(_.keys(model.changed), function (k) {\n                        if (!_.isNil(ROOM_FEATURES_MAP[k])) {\n                            changed_features[ROOM_FEATURES_MAP[k]] = !model.changed[k];\n                        }\n                    });\n                    this.chatroomview.model.save(changed_features, {'silent': true});\n                    this.debouncedRenderRoomFeatures();\n                },\n\n\n                setOccupantsHeight () {\n                    const el = this.el.querySelector('.chatroom-features');\n                    this.el.querySelector('.occupant-list').style.cssText =\n                        `height: calc(100% - ${el.offsetHeight}px - 5em);`;\n                },\n\n                onOccupantAdded (item) {\n                    let view = this.get(item.get('id'));\n                    if (!view) {\n                        view = this.add(\n                            item.get('id'),\n                            new _converse.ChatRoomOccupantView({model: item})\n                        );\n                    } else {\n                        delete view.model; // Remove ref to old model to help garbage collection\n                        view.model = item;\n                        view.initialize();\n                    }\n                    this.$('.occupant-list').append(view.render().$el);\n                },\n\n                parsePresence (pres) {\n                    const id = Strophe.getResourceFromJid(pres.getAttribute(\"from\"));\n                    const data = {\n                        nick: id,\n                        type: pres.getAttribute(\"type\"),\n                        states: []\n                    };\n                    _.each(pres.childNodes, function (child) {\n                        switch (child.nodeName) {\n                            case \"status\":\n                                data.status = child.textContent || null;\n                                break;\n                            case \"show\":\n                                data.show = child.textContent || 'online';\n                                break;\n                            case \"x\":\n                                if (child.getAttribute(\"xmlns\") === Strophe.NS.MUC_USER) {\n                                    _.each(child.childNodes, function (item) {\n                                        switch (item.nodeName) {\n                                            case \"item\":\n                                                data.affiliation = item.getAttribute(\"affiliation\");\n                                                data.role = item.getAttribute(\"role\");\n                                                data.jid = item.getAttribute(\"jid\");\n                                                data.nick = item.getAttribute(\"nick\") || data.nick;\n                                                break;\n                                            case \"status\":\n                                                if (item.getAttribute(\"code\")) {\n                                                    data.states.push(item.getAttribute(\"code\"));\n                                                }\n                                        }\n                                    });\n                                }\n                        }\n                    });\n                    return data;\n                },\n\n                findOccupant (data) {\n                    /* Try to find an existing occupant based on the passed in\n                     * data object.\n                     *\n                     * If we have a JID, we use that as lookup variable,\n                     * otherwise we use the nick. We don't always have both,\n                     * but should have at least one or the other.\n                     */\n                    const jid = Strophe.getBareJidFromJid(data.jid);\n                    if (jid !== null) {\n                        return this.model.where({'jid': jid}).pop();\n                    } else {\n                        return this.model.where({'nick': data.nick}).pop();\n                    }\n                },\n\n                updateOccupantsOnPresence (pres) {\n                    /* Given a presence stanza, update the occupant models\n                     * based on its contents.\n                     *\n                     * Parameters:\n                     *  (XMLElement) pres: The presence stanza\n                     */\n                    const data = this.parsePresence(pres);\n                    if (data.type === 'error') {\n                        return true;\n                    }\n                    const occupant = this.findOccupant(data);\n                    if (data.type === 'unavailable') {\n                        if (occupant) { occupant.destroy(); }\n                    } else {\n                        const jid = Strophe.getBareJidFromJid(data.jid);\n                        const attributes = _.extend(data, {\n                            'jid': jid ? jid : undefined,\n                            'resource': data.jid ? Strophe.getResourceFromJid(data.jid) : undefined\n                        });\n                        if (occupant) {\n                            occupant.save(attributes);\n                        } else {\n                            this.model.create(attributes);\n                        }\n                    }\n                },\n\n                promptForInvite (suggestion) {\n                    const reason = prompt(\n                        __('You are about to invite %1$s to the chat room \"%2$s\". ', suggestion.text.label, this.model.get('id')) +\n                        __(\"You may optionally include a message, explaining the reason for the invitation.\")\n                    );\n                    if (reason !== null) {\n                        this.chatroomview.directInvite(suggestion.text.value, reason);\n                    }\n                    const form = suggestion.target.form,\n                          error = form.querySelector('.pure-form-message.error');\n                    if (!_.isNull(error)) {\n                        error.parentNode.removeChild(error);\n                    }\n                    suggestion.target.value = '';\n                },\n\n                inviteFormSubmitted (evt) {\n                    evt.preventDefault();\n                    const el = evt.target.querySelector('input.invited-contact'),\n                          jid = el.value;\n                    if (!jid || _.filter(jid.split('@')).length < 2) {\n                        evt.target.outerHTML = tpl_chatroom_invite({\n                            'error_message': __('Please enter a valid XMPP username'),\n                            'label_invitation': __('Invite'),\n                        });\n                        this.initInviteWidget();\n                        return;\n                    }\n                    this.promptForInvite({\n                        'target': el,\n                        'text': {\n                            'label': jid,\n                            'value': jid\n                        }});\n                },\n\n                shouldInviteWidgetBeShown () {\n                    return _converse.allow_muc_invitations &&\n                        (this.chatroomview.model.get('open') ||\n                            this.chatroomview.model.get('affiliation') === \"owner\"\n                        );\n                },\n\n                initInviteWidget () {\n                    const form = this.el.querySelector('form.room-invite');\n                    if (_.isNull(form)) {\n                        return;\n                    }\n                    form.addEventListener('submit', this.inviteFormSubmitted.bind(this));\n                    const el = this.el.querySelector('input.invited-contact');\n                    const list = _converse.roster.map(function (item) {\n                            const label = item.get('fullname') || item.get('jid');\n                            return {'label': label, 'value':item.get('jid')};\n                        });\n                    const awesomplete = new Awesomplete(el, {\n                        'minChars': 1,\n                        'list': list\n                    });\n                    el.addEventListener('awesomplete-selectcomplete',\n                        this.promptForInvite.bind(this));\n                }\n            });\n\n            _converse.RoomsPanel = Backbone.View.extend({\n                /* Backbone View which renders the \"Rooms\" tab and accompanying\n                 * panel in the control box.\n                 *\n                 * In this panel, chat rooms can be listed, joined and new rooms\n                 * can be created.\n                 */\n                tagName: 'div',\n                className: 'controlbox-pane',\n                id: 'chatrooms',\n                events: {\n                    'submit form.add-chatroom': 'openChatRoom',\n                    'click input#show-rooms': 'showRooms',\n                    'click a.open-room': 'openChatRoom',\n                    'click a.room-info': 'toggleRoomInfo',\n                    'change input[name=server]': 'setDomain',\n                    'change input[name=nick]': 'setNick'\n                },\n\n                initialize (cfg) {\n                    this.parent_el = cfg.$parent[0];\n                    this.tab_el = document.createElement('li');\n                    this.model.on('change:muc_domain', this.onDomainChange, this);\n                    this.model.on('change:nick', this.onNickChange, this);\n                    _converse.chatboxes.on('change:num_unread', this.renderTab, this);\n                    _converse.chatboxes.on('add', _.debounce(this.renderTab, 100), this);\n                },\n\n                render () {\n                    this.el.innerHTML = tpl_room_panel({\n                        'server_input_type': _converse.hide_muc_server && 'hidden' || 'text',\n                        'server_label_global_attr': _converse.hide_muc_server && ' hidden' || '',\n                        'label_room_name': __('Room name'),\n                        'label_nickname': __('Nickname'),\n                        'label_server': __('Server'),\n                        'label_join': __('Join Room'),\n                        'label_show_rooms': __('Show rooms')\n                    });\n                    this.renderTab();\n                    const controlbox = _converse.chatboxes.get('controlbox');\n                    if (controlbox.get('active-panel') !== ROOMS_PANEL_ID) {\n                        this.el.classList.add('hidden');\n                    }\n                    return this;\n                },\n\n                renderTab () {\n                    const controlbox = _converse.chatboxes.get('controlbox');\n                    const chatrooms = fp.filter(\n                        _.partial(utils.isOfType, CHATROOMS_TYPE),\n                        _converse.chatboxes.models\n                    );\n                    this.tab_el.innerHTML = tpl_chatrooms_tab({\n                        'label_rooms': __('Rooms'),\n                        'is_current': controlbox.get('active-panel') === ROOMS_PANEL_ID,\n                        'num_unread': fp.sum(fp.map(fp.curry(utils.getAttribute)('num_unread'), chatrooms))\n                    });\n                },\n\n                insertIntoDOM () {\n                    this.parent_el.appendChild(this.render().el);\n                    this.tabs = this.parent_el.parentNode.querySelector('#controlbox-tabs');\n                    this.tabs.appendChild(this.tab_el);\n                    return this;\n                },\n\n                onDomainChange (model) {\n                    const $server = this.$el.find('input.new-chatroom-server');\n                    $server.val(model.get('muc_domain'));\n                    if (_converse.auto_list_rooms) {\n                        this.updateRoomsList();\n                    }\n                },\n\n                onNickChange (model) {\n                    const $nick = this.$el.find('input.new-chatroom-nick');\n                    $nick.val(model.get('nick'));\n                },\n\n                informNoRoomsFound () {\n                    const $available_chatrooms = this.$el.find('#available-chatrooms');\n                    // For translators: %1$s is a variable and will be replaced with the XMPP server name\n                    $available_chatrooms.html(`<dt>${__('No rooms on %1$s', this.model.get('muc_domain'))}</dt>`);\n                    $('input#show-rooms').show().siblings('span.spinner').remove();\n                },\n\n                onRoomsFound (iq) {\n                    /* Handle the IQ stanza returned from the server, containing\n                     * all its public rooms.\n                     */\n                    const $available_chatrooms = this.$el.find('#available-chatrooms');\n                    this.rooms = $(iq).find('query').find('item');\n                    if (this.rooms.length) {\n                        // For translators: %1$s is a variable and will be\n                        // replaced with the XMPP server name\n                        $available_chatrooms.html(`<dt>${__('Rooms on %1$s',this.model.get('muc_domain'))}</dt>`);\n                        const fragment = document.createDocumentFragment();\n                        for (let i=0; i<this.rooms.length; i++) {\n                            const name = Strophe.unescapeNode(\n                                $(this.rooms[i]).attr('name')||$(this.rooms[i]).attr('jid')\n                            );\n                            const jid = $(this.rooms[i]).attr('jid');\n                            fragment.appendChild($(\n                                tpl_room_item({\n                                    'name':name,\n                                    'jid':jid,\n                                    'open_title': __('Click to open this room'),\n                                    'info_title': __('Show more information on this room')\n                                    })\n                                )[0]);\n                        }\n                        $available_chatrooms.append(fragment);\n                        $('input#show-rooms').show().siblings('span.spinner').remove();\n                    } else {\n                        this.informNoRoomsFound();\n                    }\n                    return true;\n                },\n\n                updateRoomsList () {\n                    /* Send and IQ stanza to the server asking for all rooms\n                     */\n                    _converse.connection.sendIQ(\n                        $iq({\n                            to: this.model.get('muc_domain'),\n                            from: _converse.connection.jid,\n                            type: \"get\"\n                        }).c(\"query\", {xmlns: Strophe.NS.DISCO_ITEMS}),\n                        this.onRoomsFound.bind(this),\n                        this.informNoRoomsFound.bind(this)\n                    );\n                },\n\n                showRooms () {\n                    const $available_chatrooms = this.$el.find('#available-chatrooms');\n                    const $server = this.$el.find('input.new-chatroom-server');\n                    const server = $server.val();\n                    if (!server) {\n                        $server.addClass('error');\n                        return;\n                    }\n                    this.$el.find('input.new-chatroom-name').removeClass('error');\n                    $server.removeClass('error');\n                    $available_chatrooms.empty();\n                    $('input#show-rooms').hide().after(tpl_spinner);\n                    this.model.save({muc_domain: server});\n                    this.updateRoomsList();\n                },\n\n                insertRoomInfo (el, stanza) {\n                    /* Insert room info (based on returned #disco IQ stanza)\n                     *\n                     * Parameters:\n                     *  (HTMLElement) el: The HTML DOM element that should\n                     *      contain the info.\n                     *  (XMLElement) stanza: The IQ stanza containing the room\n                     *      info.\n                     */\n                    const $stanza = $(stanza);\n                    // All MUC features found here: http://xmpp.org/registrar/disco-features.html\n                    el.querySelector('span.spinner').outerHTML =\n                        tpl_room_description({\n                            'jid': stanza.getAttribute('from'),\n                            'desc': $stanza.find('field[var=\"muc#roominfo_description\"] value').text(),\n                            'occ': $stanza.find('field[var=\"muc#roominfo_occupants\"] value').text(),\n                            'hidden': $stanza.find('feature[var=\"muc_hidden\"]').length,\n                            'membersonly': $stanza.find('feature[var=\"muc_membersonly\"]').length,\n                            'moderated': $stanza.find('feature[var=\"muc_moderated\"]').length,\n                            'nonanonymous': $stanza.find('feature[var=\"muc_nonanonymous\"]').length,\n                            'open': $stanza.find('feature[var=\"muc_open\"]').length,\n                            'passwordprotected': $stanza.find('feature[var=\"muc_passwordprotected\"]').length,\n                            'persistent': $stanza.find('feature[var=\"muc_persistent\"]').length,\n                            'publicroom': $stanza.find('feature[var=\"muc_public\"]').length,\n                            'semianonymous': $stanza.find('feature[var=\"muc_semianonymous\"]').length,\n                            'temporary': $stanza.find('feature[var=\"muc_temporary\"]').length,\n                            'unmoderated': $stanza.find('feature[var=\"muc_unmoderated\"]').length,\n                            'label_desc': __('Description:'),\n                            'label_jid': __('Room Address (JID):'),\n                            'label_occ': __('Occupants:'),\n                            'label_features': __('Features:'),\n                            'label_requires_auth': __('Requires authentication'),\n                            'label_hidden': __('Hidden'),\n                            'label_requires_invite': __('Requires an invitation'),\n                            'label_moderated': __('Moderated'),\n                            'label_non_anon': __('Non-anonymous'),\n                            'label_open_room': __('Open room'),\n                            'label_permanent_room': __('Permanent room'),\n                            'label_public': __('Public'),\n                            'label_semi_anon':  __('Semi-anonymous'),\n                            'label_temp_room':  __('Temporary room'),\n                            'label_unmoderated': __('Unmoderated')\n                        })\n                },\n\n                toggleRoomInfo (ev) {\n                    /* Show/hide extra information about a room in the listing.\n                     */\n                    const { target } = ev,\n                        $parent = $(target).parent('dd'),\n                        $div = $parent.find('div.room-info');\n                    if ($div.length) {\n                        $div.remove();\n                    } else {\n                        $parent.find('span.spinner').remove();\n                        $parent.append(tpl_spinner);\n                        _converse.connection.disco.info(\n                            $(target).attr('data-room-jid'), null, _.partial(this.insertRoomInfo, $parent[0])\n                        );\n                    }\n                },\n\n                parseRoomDataFromEvent (ev) {\n                    let name, $name, server, $server, jid;\n                    if (ev.type === 'click') {\n                        name = $(ev.target).text();\n                        jid = $(ev.target).attr('data-room-jid');\n                    } else {\n                        const $name = this.$el.find('input.new-chatroom-name');\n                        const $server= this.$el.find('input.new-chatroom-server');\n                        const server = $server.val();\n                        name = $name.val().trim();\n                        $name.val(''); // Clear the input\n                        if (name && server) {\n                            jid = Strophe.escapeNode(name.toLowerCase()) + '@' + server.toLowerCase();\n                            $name.removeClass('error');\n                            $server.removeClass('error');\n                            this.model.save({muc_domain: server});\n                        } else {\n                            if (!name) { $name.addClass('error'); }\n                            if (!server) { $server.addClass('error'); }\n                            return;\n                        }\n                    }\n                    return {\n                        'jid': jid,\n                        'name': name || Strophe.unescapeNode(Strophe.getNodeFromJid(jid)),\n                    }\n                },\n\n                openChatRoom (ev) {\n                    ev.preventDefault();\n                    const data = this.parseRoomDataFromEvent(ev);\n                    if (!_.isUndefined(data)) {\n                        _converse.openChatRoom(data);\n                    }\n                },\n\n                setDomain (ev) {\n                    this.model.save({muc_domain: ev.target.value});\n                },\n\n                setNick (ev) {\n                    this.model.save({nick: ev.target.value});\n                }\n            });\n            /************************ End of ChatRoomView **********************/\n\n\n            _converse.onDirectMUCInvitation = function (message) {\n                /* A direct MUC invitation to join a room has been received\n                 * See XEP-0249: Direct MUC invitations.\n                 *\n                 * Parameters:\n                 *  (XMLElement) message: The message stanza containing the\n                 *        invitation.\n                 */\n                const $message = $(message),\n                    $x = $message.children('x[xmlns=\"jabber:x:conference\"]'),\n                    from = Strophe.getBareJidFromJid($message.attr('from')),\n                    room_jid = $x.attr('jid'),\n                    reason = $x.attr('reason');\n                let contact = _converse.roster.get(from),\n                    result;\n\n                if (_converse.auto_join_on_invite) {\n                    result = true;\n                } else {\n                    // Invite request might come from someone not your roster list\n                    contact = contact? contact.get('fullname'): Strophe.getNodeFromJid(from);\n                    if (!reason) {\n                        result = confirm(\n                            __(\"%1$s has invited you to join a chat room: %2$s\", contact, room_jid)\n                        );\n                    } else {\n                        result = confirm(\n                            __('%1$s has invited you to join a chat room: %2$s, and left the following reason: \"%3$s\"',\n                                contact, room_jid, reason)\n                        );\n                    }\n                }\n                if (result === true) {\n                    const chatroom = _converse.openChatRoom({\n                        'jid': room_jid,\n                        'password': $x.attr('password')\n                    });\n                    if (chatroom.get('connection_status') === converse.ROOMSTATUS.DISCONNECTED) {\n                        _converse.chatboxviews.get(room_jid).join();\n                    }\n                }\n            };\n\n            if (_converse.allow_muc_invitations) {\n                const registerDirectInvitationHandler = function () {\n                    _converse.connection.addHandler(\n                        function (message) {\n                            _converse.onDirectMUCInvitation(message);\n                            return true;\n                        }, 'jabber:x:conference', 'message');\n                };\n                _converse.on('connected', registerDirectInvitationHandler);\n                _converse.on('reconnected', registerDirectInvitationHandler);\n            }\n\n            function autoJoinRooms () {\n                /* Automatically join chat rooms, based on the\n                 * \"auto_join_rooms\" configuration setting, which is an array\n                 * of strings (room JIDs) or objects (with room JID and other\n                 * settings).\n                 */\n                _.each(_converse.auto_join_rooms, function (room) {\n                    if (_.isString(room)) {\n                        _converse.api.rooms.open(room);\n                    } else if (_.isObject(room)) {\n                        _converse.api.rooms.open(room.jid, room.nick);\n                    } else {\n                        _converse.log(\n                            'Invalid room criteria specified for \"auto_join_rooms\"',\n                            Strophe.LogLevel.ERROR);\n                    }\n                });\n            }\n            _converse.on('chatBoxesFetched', autoJoinRooms);\n\n            _converse.getChatRoom = function (jid, attrs, fetcher) {\n                jid = jid.toLowerCase();\n                return _converse.getViewForChatBox(fetcher(_.extend({\n                    'id': jid,\n                    'jid': jid,\n                    'name': Strophe.unescapeNode(Strophe.getNodeFromJid(jid)),\n                    'type': CHATROOMS_TYPE,\n                    'box_id': b64_sha1(jid)\n                }, attrs)));\n            };\n\n            /* We extend the default converse.js API to add methods specific to MUC\n             * chat rooms.\n             */\n            _.extend(_converse.api, {\n                'rooms': {\n                    'close' (jids) {\n                        if (_.isUndefined(jids)) {\n                            _converse.chatboxviews.each(function (view) {\n                                if (view.is_chatroom && view.model) {\n                                    view.close();\n                                }\n                            });\n                        } else if (_.isString(jids)) {\n                            const view = _converse.chatboxviews.get(jids);\n                            if (view) { view.close(); }\n                        } else {\n                            _.each(jids, function (jid) {\n                                const view = _converse.chatboxviews.get(jid);\n                                if (view) { view.close(); }\n                            });\n                        }\n                    },\n                    'open' (jids, attrs) {\n                        if (_.isString(attrs)) {\n                            attrs = {'nick': attrs};\n                        } else if (_.isUndefined(attrs)) {\n                            attrs = {};\n                        }\n                        if (_.isUndefined(attrs.maximize)) {\n                            attrs.maximize = false;\n                        }\n                        if (!attrs.nick && _converse.muc_nickname_from_jid) {\n                            attrs.nick = Strophe.getNodeFromJid(_converse.bare_jid);\n                        }\n                        if (_.isUndefined(jids)) {\n                            throw new TypeError('rooms.open: You need to provide at least one JID');\n                        } else if (_.isString(jids)) {\n                            return _converse.getChatRoom(jids, attrs, _converse.openChatRoom);\n                        }\n                        return _.map(jids, _.partial(_converse.getChatRoom, _, attrs, _converse.openChatRoom));\n                    },\n                    'get' (jids, attrs, create) {\n                        if (_.isString(attrs)) {\n                            attrs = {'nick': attrs};\n                        } else if (_.isUndefined(attrs)) {\n                            attrs = {};\n                        }\n                        if (_.isUndefined(jids)) {\n                            const result = [];\n                            _converse.chatboxes.each(function (chatbox) {\n                                if (chatbox.get('type') === CHATROOMS_TYPE) {\n                                    result.push(_converse.getViewForChatBox(chatbox));\n                                }\n                            });\n                            return result;\n                        }\n                        const fetcher = _.partial(_converse.chatboxviews.getChatBox.bind(_converse.chatboxviews), _, create);\n                        if (!attrs.nick) {\n                            attrs.nick = Strophe.getNodeFromJid(_converse.bare_jid);\n                        }\n                        if (_.isString(jids)) {\n                            return _converse.getChatRoom(jids, attrs, fetcher);\n                        }\n                        return _.map(jids, _.partial(_converse.getChatRoom, _, attrs, fetcher));\n                    }\n                }\n            });\n\n            /* Event handlers */\n            _converse.on('addClientFeatures', () => {\n                if (_converse.allow_muc) {\n                    _converse.connection.disco.addFeature(Strophe.NS.MUC);\n                }\n                if (_converse.allow_muc_invitations) {\n                    _converse.connection.disco.addFeature('jabber:x:conference'); // Invites\n                }\n            });\n\n            _converse.on('reconnected', function reconnectToChatRooms () {\n                /* Upon a reconnection event from converse, join again\n                 * all the open chat rooms.\n                 */\n                _converse.chatboxviews.each(function (view) {\n                    if (view.model.get('type') === CHATROOMS_TYPE) {\n                        view.model.save('connection_status', converse.ROOMSTATUS.DISCONNECTED);\n                        view.registerHandlers();\n                        view.join();\n                        view.fetchMessages();\n                    }\n                });\n            });\n\n            function disconnectChatRooms () {\n                /* When disconnecting, or reconnecting, mark all chat rooms as\n                 * disconnected, so that they will be properly entered again\n                 * when fetched from session storage.\n                 */\n                _converse.chatboxes.each(function (model) {\n                    if (model.get('type') === CHATROOMS_TYPE) {\n                        model.save('connection_status', converse.ROOMSTATUS.DISCONNECTED);\n                    }\n                });\n            }\n            _converse.on('reconnecting', disconnectChatRooms);\n            _converse.on('disconnecting', disconnectChatRooms);\n        }\n    });\n}));\n"]}