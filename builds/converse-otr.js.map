{"version":3,"sources":["../src/converse-otr.js"],"names":["root","factory","define","$","converse","tpl_toolbar_otr","otr","env","Strophe","utils","b64_sha1","_","HAS_CSPRNG","isUndefined","window","crypto","isFunction","randomBytes","getRandomValues","HAS_CRYPTO","OTR","DSA","UNENCRYPTED","UNVERIFIED","VERIFIED","FINISHED","OTR_TRANSLATED_MAPPING","OTR_CLASS_MAPPING","plugins","add","overrides","ChatBox","initialize","__super__","apply","arguments","get","save","shouldPlayNotification","$message","isOTRMessage","includes","createMessage","message","delay","original_stanza","_converse","text","propertyOf","querySelector","allow_otr","isNewMessage","match","initiateOTR","receiveMsg","generatePrivateKey","instance_tag","key","jid","connection","cache_otr_key","packPrivate","getSession","callback","__","saved_key","encrypted_key","isString","parsePrivate","trigger","that","setTimeout","makeInstanceTag","updateOTRStatus","state","CONST","STATUS_AKE_SUCCESS","msgstate","MSGSTATE_ENCRYPTED","STATUS_END_OTR","MSGSTATE_FINISHED","MSGSTATE_PLAINTEXT","onSMP","type","data","smpSecret","prompt","TypeError","query_msg","session","fragment_size","send_interval","priv","debug","on","bind","msg","Message","sendQueryMsg","endOTR","endOtr","ChatBoxView","events","model","onOTRStatusChanged","showOTRError","showMessage","use_otr_by_default","createMessageStanza","stanza","nodeTree","c","NS","CARBONS","up","HINTS","onMessageSubmitted","authenticated","showHelpMessages","replace","sendMsg","renderToolbar","informOTRChange","toJSON","msgs","otr_status","push","log","LogLevel","ERROR","startOTRFromToolbar","ev","stopPropagation","preventDefault","authOTR","target","scheme","result","question","answer","confirm","xmppstatus","bare_jid","fingerprint","their_priv_pk","alert","toggleOTRMenu","menu","el","elements","difference","document","querySelectorAll","slideInAllElements","then","partial","slideToggleElement","getOTRTooltip","toolbar","options","show_toolbar","extend","is_chatroom","label_end_encrypted_conversation","label_refresh_encrypted_conversation","label_start_encrypted_conversation","label_verify_with_fingerprints","label_verify_with_smp","label_whats_this","otr_status_class","otr_tooltip","otr_translated_status","$el","find","append","api","settings","update"],"mappings":"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","file":"converse-otr.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define, window, crypto, CryptoJS */\n\n/* This is a Converse.js plugin which add support Off-the-record (OTR)\n * encryption of one-on-one chat messages.\n */\n(function (root, factory) {\n\n    define([\"jquery.noconflict\",\n            \"converse-chatview\",\n            \"tpl!toolbar_otr\",\n            'otr'\n    ], factory);\n}(this, function ($, converse, tpl_toolbar_otr, otr) {\n    \"use strict\";\n\n    const { Strophe, utils, b64_sha1, _ } = converse.env;\n\n    const HAS_CSPRNG = _.isUndefined(window.crypto) ? false : (\n        _.isFunction(window.crypto.randomBytes) ||\n        _.isFunction(window.crypto.getRandomValues)\n    );\n\n    const HAS_CRYPTO = HAS_CSPRNG && (\n        (!_.isUndefined(otr.OTR)) &&\n        (!_.isUndefined(otr.DSA))\n    );\n\n    const UNENCRYPTED = 0;\n    const UNVERIFIED= 1;\n    const VERIFIED= 2;\n    const FINISHED = 3;\n\n    const OTR_TRANSLATED_MAPPING  = {}; // Populated in initialize\n    const OTR_CLASS_MAPPING = {};\n    OTR_CLASS_MAPPING[UNENCRYPTED] = 'unencrypted';\n    OTR_CLASS_MAPPING[UNVERIFIED] = 'unverified';\n    OTR_CLASS_MAPPING[VERIFIED] = 'verified';\n    OTR_CLASS_MAPPING[FINISHED] = 'finished';\n\n\n    converse.plugins.add('converse-otr', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n \n            ChatBox: {\n                initialize () {\n                    this.__super__.initialize.apply(this, arguments);\n                    if (this.get('box_id') !== 'controlbox') {\n                        this.save({'otr_status': this.get('otr_status') || UNENCRYPTED});\n                    }\n                },\n\n                shouldPlayNotification ($message) {\n                    /* Don't play a notification if this is an OTR message but\n                     * encryption is not yet set up. That would mean that the\n                     * OTR session is still being established, so there are no\n                     * \"visible\" OTR messages being exchanged.\n                     */\n                    return this.__super__.shouldPlayNotification.apply(this, arguments) &&\n                        !(utils.isOTRMessage($message[0]) && !_.includes([UNVERIFIED, VERIFIED], this.get('otr_status')));\n                },\n\n                createMessage (message, delay, original_stanza) {\n                    const { _converse } = this.__super__,\n                        text = _.propertyOf(message.querySelector('body'))('textContent');\n\n                    if ((!text) || (!_converse.allow_otr)) {\n                        return this.__super__.createMessage.apply(this, arguments);\n                    }\n\n                    if (utils.isNewMessage(original_stanza)) {\n                        if (text.match(/^\\?OTRv23?/)) {\n                            return this.initiateOTR(text);\n                        } else if (_.includes([UNVERIFIED, VERIFIED], this.get('otr_status'))) {\n                            return this.otr.receiveMsg(text);\n                        } else if (text.match(/^\\?OTR/)) {\n                            if (!this.otr) {\n                                return this.initiateOTR(text);\n                            } else {\n                                return this.otr.receiveMsg(text);\n                            }\n                        }\n                    }\n                    // Normal unencrypted message (or archived message)\n                    return this.__super__.createMessage.apply(this, arguments);\n                },\n\n                generatePrivateKey (instance_tag) {\n                    const { _converse } = this.__super__;\n                    const key = new otr.DSA();\n                    const { jid } = _converse.connection;\n                    if (_converse.cache_otr_key) {\n                        this.save({\n                            'otr_priv_key': key.packPrivate(),\n                            'otr_instance_tag': instance_tag\n                        });\n                    }\n                    return key;\n                },\n                \n                getSession (callback) {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse;\n                    let instance_tag, saved_key, encrypted_key;\n                    if (_converse.cache_otr_key) {\n                        encrypted_key = this.get('otr_priv_key');\n                        if (_.isString(encrypted_key)) {\n                            instance_tag = this.get('otr_instance_tag');\n                            saved_key = otr.DSA.parsePrivate(encrypted_key);\n                            if (saved_key && instance_tag) {\n                                this.trigger('showHelpMessages', [__('Re-establishing encrypted session')]);\n                                callback({\n                                    'key': saved_key,\n                                    'instance_tag': instance_tag\n                                });\n                                return; // Our work is done here\n                            }\n                        }\n                    }\n                    // We need to generate a new key and instance tag\n                    this.trigger('showHelpMessages', [\n                        __('Generating private key.'),\n                        __('Your browser might become unresponsive.')],\n                        null,\n                        true // show spinner\n                    );\n                    const that = this;\n                    window.setTimeout(function () {\n                        callback({\n                            'key': that.generatePrivateKey(instance_tag),\n                            'instance_tag': otr.OTR.makeInstanceTag()\n                        });\n                    }, 500);\n                },\n\n                updateOTRStatus (state) {\n                    switch (state) {\n                        case otr.OTR.CONST.STATUS_AKE_SUCCESS:\n                            if (this.otr.msgstate === otr.OTR.CONST.MSGSTATE_ENCRYPTED) {\n                                this.save({'otr_status': UNVERIFIED});\n                            }\n                            break;\n                        case otr.OTR.CONST.STATUS_END_OTR:\n                            if (this.otr.msgstate === otr.OTR.CONST.MSGSTATE_FINISHED) {\n                                this.save({'otr_status': FINISHED});\n                            } else if (this.otr.msgstate === otr.OTR.CONST.MSGSTATE_PLAINTEXT) {\n                                this.save({'otr_status': UNENCRYPTED});\n                            }\n                            break;\n                    }\n                },\n\n                onSMP (type, data) {\n                    // Event handler for SMP (Socialist's Millionaire Protocol)\n                    // used by OTR (off-the-record).\n                    const { _converse } = this.__super__,\n                        { __ } = _converse;\n                    switch (type) {\n                        case 'question':\n                            this.otr.smpSecret(prompt(__(\n                                'Authentication request from %1$s\\n\\nYour chat contact is attempting to verify your identity, by asking you the question below.\\n\\n%2$s',\n                                [this.get('fullname'), data])));\n                            break;\n                        case 'trust':\n                            if (data === true) {\n                                this.save({'otr_status': VERIFIED});\n                            } else {\n                                this.trigger(\n                                    'showHelpMessages',\n                                    [__(\"Could not verify this user's identify.\")],\n                                    'error');\n                                this.save({'otr_status': UNVERIFIED});\n                            }\n                            break;\n                        default:\n                            throw new TypeError('ChatBox.onSMP: Unknown type for SMP');\n                    }\n                },\n\n                initiateOTR (query_msg) {\n                    // Sets up an OTR object through which we can send and receive\n                    // encrypted messages.\n                    //\n                    // If 'query_msg' is passed in, it means there is an alread incoming\n                    // query message from our contact. Otherwise, it is us who will\n                    // send the query message to them.\n                    const { _converse } = this.__super__,\n                        { __ } = _converse;\n                    this.save({'otr_status': UNENCRYPTED});\n                    this.getSession((session) => {\n                        const { _converse } = this.__super__;\n                        this.otr = new otr.OTR({\n                            fragment_size: 140,\n                            send_interval: 200,\n                            priv: session.key,\n                            instance_tag: session.instance_tag,\n                            debug: this.debug\n                        });\n                        this.otr.on('status', this.updateOTRStatus.bind(this));\n                        this.otr.on('smp', this.onSMP.bind(this));\n\n                        this.otr.on('ui', (msg) => {\n                            this.trigger('showReceivedOTRMessage', msg);\n                        });\n                        this.otr.on('io', (msg) => {\n                            this.trigger('sendMessage', new _converse.Message({ message: msg }));\n                        });\n                        this.otr.on('error', (msg) => {\n                            this.trigger('showOTRError', msg);\n                        });\n\n                        this.trigger('showHelpMessages', [__('Exchanging private key with contact.')]);\n                        if (query_msg) {\n                            this.otr.receiveMsg(query_msg);\n                        } else {\n                            this.otr.sendQueryMsg();\n                        }\n                    });\n                },\n\n                endOTR () {\n                    if (this.otr) {\n                        this.otr.endOtr();\n                    }\n                    this.save({'otr_status': UNENCRYPTED});\n                }\n            },\n\n            ChatBoxView:  {\n                events: {\n                    'click .toggle-otr': 'toggleOTRMenu',\n                    'click .start-otr': 'startOTRFromToolbar',\n                    'click .end-otr': 'endOTR',\n                    'click .auth-otr': 'authOTR'\n                },\n\n                initialize () {\n                    const { _converse } = this.__super__;\n                    this.__super__.initialize.apply(this, arguments);\n                    this.model.on('change:otr_status', this.onOTRStatusChanged, this);\n                    this.model.on('showOTRError', this.showOTRError, this);\n                    this.model.on('showSentOTRMessage', function (text) {\n                        this.showMessage({'message': text, 'sender': 'me'});\n                    }, this);\n                    this.model.on('showReceivedOTRMessage', function (text) {\n                        this.showMessage({'message': text, 'sender': 'them'});\n                    }, this);\n                    if ((_.includes([UNVERIFIED, VERIFIED], this.model.get('otr_status'))) || _converse.use_otr_by_default) {\n                        this.model.initiateOTR();\n                    }\n                },\n\n                createMessageStanza () {\n                    const stanza = this.__super__.createMessageStanza.apply(this, arguments);\n                    if (this.model.get('otr_status') !== UNENCRYPTED || utils.isOTRMessage(stanza.nodeTree)) {\n                        // OTR messages aren't carbon copied\n                        stanza.c('private', {'xmlns': Strophe.NS.CARBONS}).up()\n                              .c('no-store', {'xmlns': Strophe.NS.HINTS}).up()\n                              .c('no-permanent-store', {'xmlns': Strophe.NS.HINTS}).up()\n                              .c('no-copy', {'xmlns': Strophe.NS.HINTS});\n                    }\n                    return stanza;\n                },\n\n                onMessageSubmitted (text) {\n                    const { _converse } = this.__super__;\n                    if (!_converse.connection.authenticated) {\n                        return this.showHelpMessages(\n                            ['Sorry, the connection has been lost, '+\n                              'and your message could not be sent'],\n                            'error'\n                        );\n                    }\n                    const match = text.replace(/^\\s*/, \"\").match(/^\\/(.*)\\s*$/);\n                    if (match) {\n                        if ((_converse.allow_otr) && (match[1] === \"endotr\")) {\n                            return this.endOTR();\n                        } else if ((_converse.allow_otr) && (match[1] === \"otr\")) {\n                            return this.model.initiateOTR();\n                        }\n                    }\n                    if (_.includes([UNVERIFIED, VERIFIED], this.model.get('otr_status'))) {\n                        // Off-the-record encryption is active\n                        this.model.otr.sendMsg(text);\n                        this.model.trigger('showSentOTRMessage', text);\n                    } else {\n                        this.__super__.onMessageSubmitted.apply(this, arguments);\n                    }\n                },\n\n                onOTRStatusChanged () {\n                    this.renderToolbar().informOTRChange();\n                },\n\n                informOTRChange () {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse,\n                        data = this.model.toJSON(),\n                        msgs = [];\n                    if (data.otr_status === UNENCRYPTED) {\n                        msgs.push(__(\"Your messages are not encrypted anymore\"));\n                    } else if (data.otr_status === UNVERIFIED) {\n                        msgs.push(__(\"Your messages are now encrypted but your contact's identity has not been verified.\"));\n                    } else if (data.otr_status === VERIFIED) {\n                        msgs.push(__(\"Your contact's identify has been verified.\"));\n                    } else if (data.otr_status === FINISHED) {\n                        msgs.push(__(\"Your contact has ended encryption on their end, you should do the same.\"));\n                    }\n                    return this.showHelpMessages(msgs, 'info', false);\n                },\n\n                showOTRError (msg) {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse;\n                    if (msg === 'Message cannot be sent at this time.') {\n                        this.showHelpMessages(\n                            [__('Your message could not be sent')], 'error');\n                    } else if (msg === 'Received an unencrypted message.') {\n                        this.showHelpMessages(\n                            [__('We received an unencrypted message')], 'error');\n                    } else if (msg === 'Received an unreadable encrypted message.') {\n                        this.showHelpMessages(\n                            [__('We received an unreadable encrypted message')],\n                            'error');\n                    } else {\n                        this.showHelpMessages([`Encryption error occured: ${msg}`], 'error');\n                    }\n                    _converse.log(`OTR ERROR:${msg}`, Strophe.LogLevel.ERROR);\n                },\n\n                startOTRFromToolbar (ev) {\n                    ev.stopPropagation();\n                    this.model.initiateOTR();\n                },\n\n                endOTR (ev) {\n                    if (!_.isUndefined(ev)) {\n                        ev.preventDefault();\n                        ev.stopPropagation();\n                    }\n                    this.model.endOTR();\n                },\n\n                authOTR (ev) {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse,\n                        { scheme } = $(ev.target).data();\n                    let result, question, answer;\n                    if (scheme === 'fingerprint') {\n                        result = confirm(__('Here are the fingerprints, please confirm them with %1$s, outside of this chat.\\n\\nFingerprint for you, %2$s: %3$s\\n\\nFingerprint for %1$s: %4$s\\n\\nIf you have confirmed that the fingerprints match, click OK, otherwise click Cancel.', [\n                                this.model.get('fullname'),\n                                _converse.xmppstatus.get('fullname')||_converse.bare_jid,\n                                this.model.otr.priv.fingerprint(),\n                                this.model.otr.their_priv_pk.fingerprint()\n                            ]\n                        ));\n                        if (result === true) {\n                            this.model.save({'otr_status': VERIFIED});\n                        } else {\n                            this.model.save({'otr_status': UNVERIFIED});\n                        }\n                    } else if (scheme === 'smp') {\n                        alert(__('You will be prompted to provide a security question and then an answer to that question.\\n\\nYour contact will then be prompted the same question and if they type the exact same answer (case sensitive), their identity will be verified.'));\n                        question = prompt(__('What is your security question?'));\n                        if (question) {\n                            answer = prompt(__('What is the answer to the security question?'));\n                            this.model.otr.smpSecret(answer, question);\n                        }\n                    } else {\n                        this.showHelpMessages([__('Invalid authentication scheme provided')], 'error');\n                    }\n                },\n\n                toggleOTRMenu (ev) {\n                    ev.stopPropagation();\n                    const menu = this.el.querySelector('.toggle-otr ul');\n                    const elements = _.difference(\n                        document.querySelectorAll('.toolbar-menu'),\n                        [menu]\n                    );\n                    utils.slideInAllElements(elements).then(\n                        _.partial(\n                            utils.slideToggleElement,\n                            menu\n                        )\n                    );\n                },\n                \n                getOTRTooltip () {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse,\n                        data = this.model.toJSON();\n                    if (data.otr_status === UNENCRYPTED) {\n                        return __('Your messages are not encrypted. Click here to enable OTR encryption.');\n                    } else if (data.otr_status === UNVERIFIED) {\n                        return __('Your messages are encrypted, but your contact has not been verified.');\n                    } else if (data.otr_status === VERIFIED) {\n                        return __('Your messages are encrypted and your contact verified.');\n                    } else if (data.otr_status === FINISHED) {\n                        return __('Your contact has closed their end of the private session, you should do the same');\n                    }\n                },\n\n                renderToolbar (toolbar, options) {\n                    const { _converse } = this.__super__,\n                        { __ } = _converse;\n                    if (!_converse.show_toolbar) {\n                        return;\n                    }\n                    const data = this.model.toJSON();\n                    options = _.extend(options || {}, {\n                        FINISHED,\n                        UNENCRYPTED,\n                        UNVERIFIED,\n                        VERIFIED,\n                        // FIXME: Leaky abstraction MUC\n                        allow_otr: _converse.allow_otr && !this.is_chatroom,\n                        label_end_encrypted_conversation: __('End encrypted conversation'),\n                        label_refresh_encrypted_conversation: __('Refresh encrypted conversation'),\n                        label_start_encrypted_conversation: __('Start encrypted conversation'),\n                        label_verify_with_fingerprints: __('Verify with fingerprints'),\n                        label_verify_with_smp: __('Verify with SMP'),\n                        label_whats_this: __(\"What\\'s this?\"),\n                        otr_status_class: OTR_CLASS_MAPPING[data.otr_status],\n                        otr_tooltip: this.getOTRTooltip(),\n                        otr_translated_status: OTR_TRANSLATED_MAPPING[data.otr_status],\n                    });\n                    this.__super__.renderToolbar.apply(this, arguments);\n                    this.$el.find('.chat-toolbar').append(\n                        tpl_toolbar_otr(\n                            _.extend(this.model.toJSON(), options || {})\n                        ));\n                    return this;\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __ } = _converse;\n\n            _converse.api.settings.update({\n                allow_otr: true,\n                cache_otr_key: false,\n                use_otr_by_default: false\n            });\n\n            // Translation aware constants\n            // ---------------------------\n            // We can only call the __ translation method *after* converse.js\n            // has been initialized and with it the i18n machinery. That's why\n            // we do it here in the \"initialize\" method and not at the top of\n            // the module.\n            OTR_TRANSLATED_MAPPING[UNENCRYPTED] = __('unencrypted');\n            OTR_TRANSLATED_MAPPING[UNVERIFIED] = __('unverified');\n            OTR_TRANSLATED_MAPPING[VERIFIED] = __('verified');\n            OTR_TRANSLATED_MAPPING[FINISHED] = __('finished');\n\n            // Only allow OTR if we have the capability\n            _converse.allow_otr = _converse.allow_otr && HAS_CRYPTO;\n            // Only use OTR by default if allow OTR is enabled to begin with\n            _converse.use_otr_by_default = _converse.use_otr_by_default && _converse.allow_otr;\n        }\n    });\n}));\n"]}