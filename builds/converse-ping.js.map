{"version":3,"sources":["../src/converse-ping.js"],"names":["root","factory","define","converse","env","Strophe","_","plugins","add","initialize","_converse","api","settings","update","ping_interval","ping","jid","success","error","timeout","lastStanzaDate","Date","isNil","getDomainFromJid","bare_jid","isUndefined","connection","pong","registerPongHandler","disco","addFeature","NS","PING","addPingHandler","registerPingHandler","addHandler","addTimedHandler","now","onConnected","on"],"mappings":"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","file":"converse-ping.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n/* This is a Converse.js plugin which add support for application-level pings\n * as specified in XEP-0199 XMPP Ping.\n */\n(function (root, factory) {\n    define([\"converse-core\", \"strophe.ping\"], factory);\n}(this, function (converse) {\n    \"use strict\";\n    // Strophe methods for building stanzas\n    const { Strophe, _ } = converse.env;\n    \n    converse.plugins.add('converse-ping', {\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this;\n\n            _converse.api.settings.update({\n                ping_interval: 180 //in seconds\n            });\n\n            _converse.ping = function (jid, success, error, timeout) {\n                // XXX: We could first check here if the server advertised that\n                // it supports PING.\n                // However, some servers don't advertise while still keeping the\n                // connection option due to pings.\n                //\n                // var feature = _converse.disco_entities[_converse.domain].features.findWhere({'var': Strophe.NS.PING});\n                _converse.lastStanzaDate = new Date();\n                if (_.isNil(jid)) {\n                    jid = Strophe.getDomainFromJid(_converse.bare_jid);\n                }\n                if (_.isUndefined(timeout) ) { timeout = null; }\n                if (_.isUndefined(success) ) { success = null; }\n                if (_.isUndefined(error) ) { error = null; }\n                if (_converse.connection) {\n                    _converse.connection.ping.ping(jid, success, error, timeout);\n                    return true;\n                }\n                return false;\n            };\n\n            _converse.pong = function (ping) {\n                _converse.lastStanzaDate = new Date();\n                _converse.connection.ping.pong(ping);\n                return true;\n            };\n\n            _converse.registerPongHandler = function () {\n                if (!_.isUndefined(_converse.connection.disco)) {\n                    _converse.connection.disco.addFeature(Strophe.NS.PING);\n                }\n                _converse.connection.ping.addPingHandler(_converse.pong);\n            };\n\n            _converse.registerPingHandler = function () {\n                _converse.registerPongHandler();\n                if (_converse.ping_interval > 0) {\n                    _converse.connection.addHandler(function () {\n                        /* Handler on each stanza, saves the received date\n                         * in order to ping only when needed.\n                         */\n                        _converse.lastStanzaDate = new Date();\n                        return true;\n                    });\n                    _converse.connection.addTimedHandler(1000, function () {\n                        const now = new Date();\n                        if (!_converse.lastStanzaDate) {\n                            _converse.lastStanzaDate = now;\n                        }\n                        if ((now - _converse.lastStanzaDate)/1000 > _converse.ping_interval) {\n                            return _converse.ping();\n                        }\n                        return true;\n                    });\n                }\n            };\n\n            const onConnected = function () {\n                // Wrapper so that we can spy on registerPingHandler in tests\n                _converse.registerPingHandler();\n            };\n            _converse.on('connected', onConnected);\n            _converse.on('reconnected', onConnected);\n        }\n    });\n}));\n"]}