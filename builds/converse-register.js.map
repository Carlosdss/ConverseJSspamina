{"version":3,"sources":["../src/converse-register.js"],"names":["root","factory","define","$","utils","converse","tpl_form_username","tpl_register_panel","tpl_register_tab","tpl_registration_form","tpl_registration_request","tpl_spinner","env","Strophe","Backbone","$iq","_","addNamespace","i","each","keys","Status","key","Math","max","REGIFAIL","REGISTERED","CONFLICT","NOTACCEPTABLE","plugins","add","overrides","ControlBoxView","switchTab","ev","_converse","__super__","result","apply","arguments","registration_domain","target","getAttribute","model","get","registerpanel","fetchRegistrationForm","renderRegistrationPanel","allow_registration","RegisterPanel","$el","find","render","addClass","renderLoginPanel","initialize","__","templates","form_username","register_panel","register_tab","registration_form","registration_request","api","settings","update","domain_placeholder","providers_link","View","extend","tagName","id","className","events","cfg","reset","$parent","$tabs","parent","registerHooks","set","append","html","label_register","conn","connection","connect_cb","_connect_cb","bind","req","callback","raw","_registering","getRegistrationFields","_callback","connected","body","_proto","_reqToData","CONNFAIL","register","getElementsByTagName","mechanisms","length","_no_auth_received","_changeConnectStatus","_addSysHandler","onRegistrationFields","send","type","c","xmlns","NS","REGISTER","tree","stanza","setFields","renderRegistrationForm","defaults","fields","urls","title","instructions","registered","domain","form_type","pick","onProviderChosen","preventDefault","$form","$domain_input","val","hide","domain_name","cancel_label","renderRegistrationRequest","getDomainFromJid","connect","onRegistering","form","el","querySelector","markup","appendChild","createFragmentFromText","cancel_button","document","addEventListener","cancelRegistration","giveFeedback","message","klass","attr","text","status","error","that","log","includes","DISCONNECTED","LogLevel","ERROR","replaceWith","password","username","toLowerCase","onConnectStatusChanged","chatboxviews","$stanza","$fields","$input","empty","field","xForm2webForm","name","label","value","required","url","on","submitRegistrationForm","reportErrors","$errmsgs","$flash","flash","prepend","idx","txt","show","onclick","has_empty_inputs","reduce","querySelectorAll","input","classList","$inputs","iq","XFORM","cnode","webForm2xForm","up","_onRegisterIQ","$query","$xform","_setFieldsFromXForm","_setFieldsFromLegacy","children","$field","getText","push","_var","WARN","query","firstChild","remove"],"mappings":"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","file":"converse-register.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n/* This is a Converse.js plugin which add support for in-band registration\n * as specified in XEP-0077.\n */\n(function (root, factory) {\n    define([\"jquery.noconflict\",\n            \"form-utils\",\n            \"converse-core\",\n            \"tpl!form_username\",\n            \"tpl!register_panel\",\n            \"tpl!register_tab\",\n            \"tpl!registration_form\",\n            \"tpl!registration_request\",\n            \"tpl!spinner\",\n            \"converse-controlbox\"\n    ], factory);\n}(this, function (\n            $,\n            utils,\n            converse,\n            tpl_form_username,\n            tpl_register_panel,\n            tpl_register_tab,\n            tpl_registration_form,\n            tpl_registration_request,\n            tpl_spinner\n        ) {\n\n    \"use strict\";\n\n    // Strophe methods for building stanzas\n    const { Strophe, Backbone, $iq, _ } = converse.env;\n\n    // Add Strophe Namespaces\n    Strophe.addNamespace('REGISTER', 'jabber:iq:register');\n\n    // Add Strophe Statuses\n    let i = 0;\n    _.each(_.keys(Strophe.Status), function (key) {\n        i = Math.max(i, Strophe.Status[key]);\n    });\n    Strophe.Status.REGIFAIL        = i + 1;\n    Strophe.Status.REGISTERED      = i + 2;\n    Strophe.Status.CONFLICT        = i + 3;\n    Strophe.Status.NOTACCEPTABLE   = i + 5;\n\n    converse.plugins.add('converse-register', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            ControlBoxView: {\n\n                switchTab (ev) {\n                    const { _converse } = this.__super__;\n                    const result = this.__super__.switchTab.apply(this, arguments);\n                    if (_converse.registration_domain &&\n                            ev.target.getAttribute('data-id') === \"register\" &&\n                            !this.model.get('registration_form_rendered')) {\n                        this.registerpanel.fetchRegistrationForm(_converse.registration_domain);\n                    }\n                    return result;\n                },\n\n                renderRegistrationPanel () {\n                    const { _converse } = this.__super__;\n                    if (_converse.allow_registration) {\n                        this.registerpanel = new _converse.RegisterPanel({\n                            '$parent': this.$el.find('.controlbox-panes'),\n                            'model': this.model\n                        });\n                        this.registerpanel.render().$el.addClass('hidden');\n                    }\n                    return this;\n                },\n\n                renderLoginPanel () {\n                    /* Also render a registration panel, when rendering the\n                     * login panel.\n                     */\n                    this.__super__.renderLoginPanel.apply(this, arguments);\n                    this.renderRegistrationPanel();\n                    return this;\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __ } = _converse;\n\n            // Add new templates\n            _converse.templates.form_username = tpl_form_username;\n            _converse.templates.register_panel = tpl_register_panel;\n            _converse.templates.register_tab = tpl_register_tab;\n            _converse.templates.registration_form = tpl_registration_form;\n            _converse.templates.registration_request = tpl_registration_request;\n\n            _converse.api.settings.update({\n                allow_registration: true,\n                domain_placeholder: __(\" e.g. conversejs.org\"),  // Placeholder text shown in the domain input on the registration form\n                providers_link: 'https://xmpp.net/directory.php', // Link to XMPP providers shown on registration page\n            });\n\n            _converse.RegisterPanel = Backbone.View.extend({\n                tagName: 'div',\n                id: \"register\",\n                className: 'controlbox-pane',\n                events: {\n                    'submit form#converse-register': 'onProviderChosen'\n                },\n\n                initialize (cfg) {\n                    this.reset();\n                    this.$parent = cfg.$parent;\n                    this.$tabs = cfg.$parent.parent().find('#controlbox-tabs');\n                    this.registerHooks();\n                },\n\n                render () {\n                    this.model.set('registration_form_rendered', false);\n                    this.$parent.append(this.$el.html(\n                        tpl_register_panel({\n                            'default_domain': _converse.registration_domain,\n                            'label_domain': __(\"Your XMPP provider's domain name:\"),\n                            'label_register': __('Fetch registration form'),\n                            'help_providers': __('Tip: A list of public XMPP providers is available'),\n                            'help_providers_link': __('here'),\n                            'href_providers': _converse.providers_link,\n                            'domain_placeholder': _converse.domain_placeholder\n                        })\n                    ));\n                    this.$tabs.append(tpl_register_tab({label_register: __('Register')}));\n                    return this;\n                },\n\n                registerHooks () {\n                    /* Hook into Strophe's _connect_cb, so that we can send an IQ\n                     * requesting the registration fields.\n                     */\n                    const conn = _converse.connection;\n                    const connect_cb = conn._connect_cb.bind(conn);\n                    conn._connect_cb = (req, callback, raw) => {\n                        if (!this._registering) {\n                            connect_cb(req, callback, raw);\n                        } else {\n                            if (this.getRegistrationFields(req, callback, raw)) {\n                                this._registering = false;\n                            }\n                        }\n                    };\n                },\n\n                getRegistrationFields (req, _callback, raw) {\n                    /*  Send an IQ stanza to the XMPP server asking for the\n                     *  registration fields.\n                     *  Parameters:\n                     *    (Strophe.Request) req - The current request\n                     *    (Function) callback\n                     */\n                    const conn = _converse.connection;\n                    conn.connected = true;\n\n                    const body = conn._proto._reqToData(req);\n                    if (!body) { return; }\n                    if (conn._proto._connect_cb(body) === Strophe.Status.CONNFAIL) {\n                        return false;\n                    }\n                    const register = body.getElementsByTagName(\"register\");\n                    const mechanisms = body.getElementsByTagName(\"mechanism\");\n                    if (register.length === 0 && mechanisms.length === 0) {\n                        conn._proto._no_auth_received(_callback);\n                        return false;\n                    }\n                    if (register.length === 0) {\n                        conn._changeConnectStatus(\n                            Strophe.Status.REGIFAIL,\n                            __(\"Sorry, the given provider does not support in \"+\n                               \"band account registration. Please try with a \"+\n                               \"different provider.\")\n                        );\n                        return true;\n                    }\n                    // Send an IQ stanza to get all required data fields\n                    conn._addSysHandler(this.onRegistrationFields.bind(this), null, \"iq\", null, null);\n                    conn.send($iq({type: \"get\"}).c(\"query\", {xmlns: Strophe.NS.REGISTER}).tree());\n                    conn.connected = false;\n                    return true;\n                },\n\n                onRegistrationFields (stanza) {\n                    /*  Handler for Registration Fields Request.\n                     *\n                     *  Parameters:\n                     *    (XMLElement) elem - The query stanza.\n                     */\n                    if (stanza.getElementsByTagName(\"query\").length !== 1) {\n                        _converse.connection._changeConnectStatus(Strophe.Status.REGIFAIL, \"unknown\");\n                        return false;\n                    }\n                    this.setFields(stanza);\n                    this.renderRegistrationForm(stanza);\n                    return false;\n                },\n\n                reset (settings) {\n                    const defaults = {\n                        fields: {},\n                        urls: [],\n                        title: \"\",\n                        instructions: \"\",\n                        registered: false,\n                        _registering: false,\n                        domain: null,\n                        form_type: null\n                    };\n                    _.extend(this, defaults);\n                    if (settings) {\n                        _.extend(this, _.pick(settings, _.keys(defaults)));\n                    }\n                },\n\n                onProviderChosen (ev) {\n                    /* Callback method that gets called when the user has chosen an\n                     * XMPP provider.\n                     *\n                     * Parameters:\n                     *      (Submit Event) ev - Form submission event.\n                     */\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const $form = $(ev.target),\n                        $domain_input = $form.find('input[name=domain]'),\n                        domain = $domain_input.val();\n                    if (!domain) {\n                        $domain_input.addClass('error');\n                        return;\n                    }\n                    $form.find('input[type=submit]').hide();\n                    this.fetchRegistrationForm(domain, __('Cancel'));\n                },\n\n                fetchRegistrationForm (domain_name, cancel_label) {\n                    /* This is called with a domain name based on which, it fetches a\n                     * registration form from the requested domain.\n                     *\n                     * Parameters:\n                     *      (Domain name) domain_name - XMPP server domain\n                     */\n                    this.renderRegistrationRequest(cancel_label);\n                    this.reset({\n                        domain: Strophe.getDomainFromJid(domain_name),\n                        _registering: true\n                    });\n                    _converse.connection.connect(this.domain, \"\", this.onRegistering.bind(this));\n                    return false;\n                },\n\n                renderRegistrationRequest (cancel_label) {\n                    const form = this.el.querySelector('#converse-register');\n                    const markup = tpl_registration_request({\n                        'cancel': cancel_label,\n                        'info_message': _converse.__('Requesting a registration form from the XMPP server')\n                    });\n                    form.appendChild(utils.createFragmentFromText(markup));\n                    if (!_converse.registration_domain) {\n                        const cancel_button = document.querySelector('button.button-cancel');\n                        cancel_button.addEventListener('click', this.cancelRegistration.bind(this));\n                    }\n                },\n\n                giveFeedback (message, klass) {\n                    this.$('.reg-feedback').attr('class', 'reg-feedback').text(message);\n                    if (klass) {\n                        $('.reg-feedback').addClass(klass);\n                    }\n                },\n\n                onRegistering (status, error) {\n                    let that;\n                    _converse.log('onRegistering');\n                    if (_.includes([\n                                Strophe.Status.DISCONNECTED,\n                                Strophe.Status.CONNFAIL,\n                                Strophe.Status.REGIFAIL,\n                                Strophe.Status.NOTACCEPTABLE,\n                                Strophe.Status.CONFLICT\n                            ], status)) {\n\n                        _converse.log(\n                            `Problem during registration: Strophe.Status is: ${status}`,\n                            Strophe.LogLevel.ERROR\n                        );\n                        this.cancelRegistration();\n                        if (error) {\n                            this.giveFeedback(error, 'error');\n                        } else {\n                            this.giveFeedback(__(\n                                'Something went wrong while establishing a connection with \"%1$s\". Are you sure it exists?',\n                                this.domain\n                            ), 'error');\n                        }\n                    } else if (status === Strophe.Status.REGISTERED) {\n                        _converse.log(\"Registered successfully.\");\n                        _converse.connection.reset();\n                        that = this;\n                        this.$('form').hide(function () {\n                            $(this).replaceWith(tpl_spinner);\n                            if (that.fields.password && that.fields.username) {\n                                // automatically log the user in\n                                _converse.connection.connect(\n                                    that.fields.username.toLowerCase()+'@'+that.domain.toLowerCase(),\n                                    that.fields.password,\n                                    _converse.onConnectStatusChanged\n                                );\n                                _converse.chatboxviews.get('controlbox')\n                                    .switchTab({'target': that.$tabs.find('.current')});\n                                _converse.giveFeedback(__('Now logging you in'));\n                            } else {\n                                _converse.chatboxviews.get('controlbox').renderLoginPanel();\n                                _converse.giveFeedback(__('Registered successfully'));\n                            }\n                            that.reset();\n                        });\n                    }\n                },\n\n                renderRegistrationForm (stanza) {\n                    /* Renders the registration form based on the XForm fields\n                     * received from the XMPP server.\n                     *\n                     * Parameters:\n                     *      (XMLElement) stanza - The IQ stanza received from the XMPP server.\n                     */\n                    this.model.set('registration_form_rendered', true);\n\n                    const $form = this.$('form'),\n                        $stanza = $(stanza);\n                    let $fields, $input;\n                    $form.empty().append(tpl_registration_form({\n                        'domain': this.domain,\n                        'title': this.title,\n                        'instructions': this.instructions\n                    }));\n                    if (this.form_type === 'xform') {\n                        $fields = $stanza.find('field');\n                        _.each($fields, (field) => {\n                            $form.append(utils.xForm2webForm.bind(this, field, stanza));\n                        });\n                    } else {\n                        // Show fields\n                        _.each(_.keys(this.fields), (key) => {\n                            if (key === \"username\") {\n                                $input = tpl_form_username({\n                                    domain: ` @${this.domain}`,\n                                    name: key,\n                                    type: \"text\",\n                                    label: key,\n                                    value: '',\n                                    required: 1\n                                });\n                            } else {\n                                $form.append(`<label>${key}</label>`);\n                                $input = $(`<input placeholder=\"${key}\" name=\"${key}\"></input>`);\n                                if (key === 'password' || key === 'email') {\n                                    $input.attr('type', key);\n                                }\n                            }\n                            $form.append($input);\n                        });\n                        // Show urls\n                        _.each(this.urls, (url) => {\n                            $form.append($('<a target=\"blank\"></a>').attr('href', url).text(url));\n                        });\n                    }\n                    if (this.fields) {\n                        $form.append(`<input type=\"submit\" class=\"pure-button button-primary\" value=\"${__('Register')}\"/>`);\n                        $form.on('submit', this.submitRegistrationForm.bind(this));\n                        $form.append(`<input type=\"button\" class=\"pure-button button-cancel\" value=\"${__('Cancel')}\"/>`);\n                        $form.find('input[type=button]').on('click', this.cancelRegistration.bind(this));\n                    } else {\n                        $form.append(`<input type=\"button\" class=\"submit\" value=\"${__('Return')}\"/>`);\n                        $form.find('input[type=button]').on('click', this.cancelRegistration.bind(this));\n                    }\n                    if (_converse.registration_domain) {\n                        $form.find('input[type=button]').hide();\n                    }\n                },\n\n                reportErrors (stanza) {\n                    /* Report back to the user any error messages received from the\n                     * XMPP server after attempted registration.\n                     *\n                     * Parameters:\n                     *      (XMLElement) stanza - The IQ stanza received from the\n                     *      XMPP server.\n                     */\n                    const $form= this.$('form'),\n                          $errmsgs = $(stanza).find('error text');\n\n                    let $flash = $form.find('.form-errors');\n                    if (!$flash.length) {\n                    const flash = '<legend class=\"form-errors\"></legend>';\n                        if ($form.find('p.instructions').length) {\n                            $form.find('p.instructions').append(flash);\n                        } else {\n                            $form.prepend(flash);\n                        }\n                        $flash = $form.find('.form-errors');\n                    } else {\n                        $flash.empty();\n                    }\n                    $errmsgs.each(function (idx, txt) {\n                        $flash.append($('<p>').text($(txt).text()));\n                    });\n                    if (!$errmsgs.length) {\n                        $flash.append($('<p>').text(\n                            __('The provider rejected your registration attempt. '+\n                            'Please check the values you entered for correctness.')));\n                    }\n                    $flash.show();\n                },\n\n                cancelRegistration (ev) {\n                    /* Handler, when the user cancels the registration form.\n                     */\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    _converse.connection.reset();\n                    this.model.set('registration_form_rendered', false);\n                    this.render();\n                    if (_converse.registration_domain) {\n                        document.querySelector('button.button-cancel').onclick = \n                            _.bind(\n                                this.fetchRegistrationForm, this,\n                                _converse.registration_domain, __('Retry')\n                            );\n                    }\n                },\n\n                submitRegistrationForm (ev) {\n                    /* Handler, when the user submits the registration form.\n                     * Provides form error feedback or starts the registration\n                     * process.\n                     *\n                     * Parameters:\n                     *      (Event) ev - the submit event.\n                     */\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const has_empty_inputs = _.reduce(this.el.querySelectorAll('input.required'),\n                        function (result, input) {\n                            if (input.value === '') {\n                                input.classList.add('error');\n                                return result + 1;\n                            }\n                            return result;\n                        }, 0);\n                    if (has_empty_inputs) { return; }\n                    const $inputs = $(ev.target).find(':input:not([type=button]):not([type=submit])'),\n                        iq = $iq({type: \"set\"}).c(\"query\", {xmlns:Strophe.NS.REGISTER});\n\n                    if (this.form_type === 'xform') {\n                        iq.c(\"x\", {xmlns: Strophe.NS.XFORM, type: 'submit'});\n                        $inputs.each(function () {\n                            iq.cnode(utils.webForm2xForm(this)).up();\n                        });\n                    } else {\n                        $inputs.each(function () {\n                            const $input = $(this);\n                            iq.c($input.attr('name'), {}, $input.val());\n                        });\n                    }\n                    this.model.set('registration_form_rendered', false);\n                    _converse.connection._addSysHandler(this._onRegisterIQ.bind(this), null, \"iq\", null, null);\n                    _converse.connection.send(iq);\n                    this.setFields(iq.tree());\n                },\n\n                setFields (stanza) {\n                    /* Stores the values that will be sent to the XMPP server\n                     * during attempted registration.\n                     *\n                     * Parameters:\n                     *      (XMLElement) stanza - the IQ stanza that will be sent to the XMPP server.\n                     */\n                    const $query = $(stanza).find('query');\n                    if ($query.length > 0) {\n                        const $xform = $query.find(`x[xmlns=\"${Strophe.NS.XFORM}\"]`);\n                        if ($xform.length > 0) {\n                            this._setFieldsFromXForm($xform);\n                        } else {\n                            this._setFieldsFromLegacy($query);\n                        }\n                    }\n                },\n\n                _setFieldsFromLegacy ($query) {\n                    $query.children().each((idx, field) => {\n                        const $field = $(field);\n                        if (field.tagName.toLowerCase() === 'instructions') {\n                            this.instructions = Strophe.getText(field);\n                            return;\n                        } else if (field.tagName.toLowerCase() === 'x') {\n                            if ($field.attr('xmlns') === 'jabber:x:oob') {\n                                $field.find('url').each((idx, url) => {\n                                    this.urls.push($(url).text());\n                                });\n                            }\n                            return;\n                        }\n                        this.fields[field.tagName.toLowerCase()] = Strophe.getText(field);\n                    });\n                    this.form_type = 'legacy';\n                },\n\n                _setFieldsFromXForm ($xform) {\n                    this.title = $xform.find('title').text();\n                    this.instructions = $xform.find('instructions').text();\n                    $xform.find('field').each((idx, field) => {\n                        const _var = field.getAttribute('var');\n                        if (_var) {\n                            this.fields[_var.toLowerCase()] = $(field).children('value').text();\n                        } else {\n                            // TODO: other option seems to be type=\"fixed\"\n                            _converse.log(\"Found field we couldn't parse\", Strophe.LogLevel.WARN);\n                        }\n                    });\n                    this.form_type = 'xform';\n                },\n\n                _onRegisterIQ (stanza) {\n                    /* Callback method that gets called when a return IQ stanza\n                     * is received from the XMPP server, after attempting to\n                     * register a new user.\n                     *\n                     * Parameters:\n                     *      (XMLElement) stanza - The IQ stanza.\n                     */\n                    let error = null,\n                        query = stanza.getElementsByTagName(\"query\");\n                    if (query.length > 0) {\n                        query = query[0];\n                    }\n                    if (stanza.getAttribute(\"type\") === \"error\") {\n                        _converse.log(\"Registration failed.\", Strophe.LogLevel.ERROR);\n                        error = stanza.getElementsByTagName(\"error\");\n                        if (error.length !== 1) {\n                            _converse.connection._changeConnectStatus(Strophe.Status.REGIFAIL, \"unknown\");\n                            return false;\n                        }\n                        error = error[0].firstChild.tagName.toLowerCase();\n                        if (error === 'conflict') {\n                            _converse.connection._changeConnectStatus(Strophe.Status.CONFLICT, error);\n                        } else if (error === 'not-acceptable') {\n                            _converse.connection._changeConnectStatus(Strophe.Status.NOTACCEPTABLE, error);\n                        } else {\n                            _converse.connection._changeConnectStatus(Strophe.Status.REGIFAIL, error);\n                        }\n                        this.reportErrors(stanza);\n                    } else {\n                        _converse.connection._changeConnectStatus(Strophe.Status.REGISTERED, null);\n                    }\n                    return false;\n                },\n\n                remove () {\n                    this.$tabs.empty();\n                    this.$el.parent().empty();\n                }\n            });\n        }\n    });\n}));\n"]}