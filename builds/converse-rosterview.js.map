{"version":3,"sources":["../src/converse-rosterview.js"],"names":["root","factory","define","$","converse","tpl_group_header","tpl_pending_contact","tpl_requesting_contact","tpl_roster","tpl_roster_filter","tpl_roster_item","env","Backbone","utils","Strophe","$iq","b64_sha1","sizzle","_","plugins","add","overrides","afterReconnected","__super__","apply","arguments","_tearDown","isUndefined","rosterview","remove","RosterGroups","comparator","_converse","RosterGroupsComparator","initialize","__","___","api","settings","update","allow_chat_pending_contacts","allow_contact_removal","show_toolbar","promises","STATUSES","LABEL_CONTACTS","LABEL_GROUPS","HEADER_CURRENT_CONTACTS","HEADER_PENDING_CONTACTS","HEADER_REQUESTING_CONTACTS","HEADER_UNGROUPED","HEADER_WEIGHTS","a","b","get","special_groups","keys","a_is_special","includes","b_is_special","toLowerCase","RosterFilter","Model","extend","set","RosterFilterView","View","tagName","events","model","on","render","renderClearButton","el","innerHTML","toJSON","placeholder","label_contacts","label_groups","label_state","label_any","label_unread_messages","label_online","label_chatty","label_busy","label_away","label_xa","label_offline","$el","roster_filter","querySelector","isNull","classList","tog","value","v","toggleX","ev","preventDefault","target","offsetWidth","clientX","getBoundingClientRect","left","changeChatStateFilter","save","changeTypeFilter","type","liveFilter","debounce","submitFilter","isActive","show","is","hide","length","clearFilter","removeClass","val","RosterView","Overview","id","roster","onContactAdd","onContactChange","onGroupAdd","reset","positionFetchedGroups","createRosterFilter","renderRoster","html","filter_view","allow_contact_requests","$roster","bare_jid","browserStorage","BrowserStorage","local","filter","updateFilter","fetch","parentElement","append","showHideFilter","animate","query","each","getAll","view","contacts","idx","removeAll","group","RosterGroupView","positionGroup","contact","addRosterContact","updateChatBox","has","changed","subscription","addContactToGroup","addExistingContact","ask","requesting","chatbox","chatboxes","changes","chat_status","status","that","sort","appendGroup","$groups","find","index","indexOf","prepend","eq","before","$last","last","$siblings","siblings","after","getGroup","name","create","groups","roster_groups","bind","RosterContactView","openChat","mayBeShown","item","classes_to_remove","concat","cls","className","addClass","data","without","renderRosterItem","isGroupCollapsed","prevAll","head","where","toString","CLOSED","chatStatus","show_only_online_users","hide_offline_users","chatboxviews","showChat","attributes","removeContact","result","confirm","iq","c","xmlns","NS","ROSTER","jid","connection","sendIQ","destroy","err","alert","log","LogLevel","ERROR","acceptRequest","sendContactAddIQ","authorize","subscribe","declineRequest","unauthorize","addContact","onContactSubscriptionChange","onContactRequestChange","positionContact","onRemove","onContactGroupChange","setAttribute","label_group","desc_group_toggle","toggle_state","style","display","detach","nextUntil","addBack","q","matches","OPENED","showIfNecessary","contains","not","reject","toggle","hasClass","slideUp","state","in_this_group","cid","in_this_overview","onChatBoxMaximized","chatboxview","isScrolledUp","onMessageReceived","stanza","isNewMessage","newMessageWillBeHidden","onChatBoxScrolledDown","initRoster","rostergroups","emit","listen"],"mappings":"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","file":"converse-rosterview.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n(function (root, factory) {\n    define([\"jquery.noconflict\",\n            \"converse-core\",\n            \"tpl!group_header\",\n            \"tpl!pending_contact\",\n            \"tpl!requesting_contact\",\n            \"tpl!roster\",\n            \"tpl!roster_filter\",\n            \"tpl!roster_item\",\n            \"converse-chatboxes\"\n    ], factory);\n}(this, function (\n            $,\n            converse, \n            tpl_group_header,\n            tpl_pending_contact,\n            tpl_requesting_contact,\n            tpl_roster,\n            tpl_roster_filter,\n            tpl_roster_item) {\n    \"use strict\";\n    const { Backbone, utils, Strophe, $iq, b64_sha1, sizzle, _ } = converse.env;\n\n\n    converse.plugins.add('converse-rosterview', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n            afterReconnected () {\n                this.__super__.afterReconnected.apply(this, arguments);\n            },\n\n            _tearDown () {\n                /* Remove the rosterview when tearing down. It gets created\n                 * anew when reconnecting or logging in.\n                 */\n                this.__super__._tearDown.apply(this, arguments);\n                if (!_.isUndefined(this.rosterview)) {\n                    this.rosterview.remove();\n                }\n            },\n\n            RosterGroups: {\n                comparator () {\n                    // RosterGroupsComparator only gets set later (once i18n is\n                    // set up), so we need to wrap it in this nameless function.\n                    const { _converse } = this.__super__;\n                    return _converse.RosterGroupsComparator.apply(this, arguments);\n                }\n            }\n        },\n\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this,\n                { __,\n                ___ } = _converse;\n\n            _converse.api.settings.update({\n                allow_chat_pending_contacts: true,\n                allow_contact_removal: true,\n                show_toolbar: true,\n            });\n            _converse.api.promises.add('rosterViewInitialized');\n\n            const STATUSES = {\n                'dnd': __('This contact is busy'),\n                'online': __('This contact is online'),\n                'offline': __('This contact is offline'),\n                'unavailable': __('This contact is unavailable'),\n                'xa': __('This contact is away for an extended period'),\n                'away': __('This contact is away')\n            };\n            const LABEL_CONTACTS = __('Contacts');\n            const LABEL_GROUPS = __('Groups');\n            const HEADER_CURRENT_CONTACTS =  __('My contacts');\n            const HEADER_PENDING_CONTACTS = __('Pending contacts');\n            const HEADER_REQUESTING_CONTACTS = __('Contact requests');\n            const HEADER_UNGROUPED = __('Ungrouped');\n            const HEADER_WEIGHTS = {};\n            HEADER_WEIGHTS[HEADER_REQUESTING_CONTACTS] = 0;\n            HEADER_WEIGHTS[HEADER_CURRENT_CONTACTS]    = 1;\n            HEADER_WEIGHTS[HEADER_UNGROUPED]           = 2;\n            HEADER_WEIGHTS[HEADER_PENDING_CONTACTS]    = 3;\n\n            _converse.RosterGroupsComparator = function (a, b) {\n                /* Groups are sorted alphabetically, ignoring case.\n                 * However, Ungrouped, Requesting Contacts and Pending Contacts\n                 * appear last and in that order.\n                 */\n                a = a.get('name');\n                b = b.get('name');\n                const special_groups = _.keys(HEADER_WEIGHTS);\n                const a_is_special = _.includes(special_groups, a);\n                const b_is_special = _.includes(special_groups, b);\n                if (!a_is_special && !b_is_special ) {\n                    return a.toLowerCase() < b.toLowerCase() ? -1 : (a.toLowerCase() > b.toLowerCase() ? 1 : 0);\n                } else if (a_is_special && b_is_special) {\n                    return HEADER_WEIGHTS[a] < HEADER_WEIGHTS[b] ? -1 : (HEADER_WEIGHTS[a] > HEADER_WEIGHTS[b] ? 1 : 0);\n                } else if (!a_is_special && b_is_special) {\n                    return (b === HEADER_REQUESTING_CONTACTS) ? 1 : -1;\n                } else if (a_is_special && !b_is_special) {\n                    return (a === HEADER_REQUESTING_CONTACTS) ? -1 : 1;\n                }\n            };\n\n\n            _converse.RosterFilter = Backbone.Model.extend({\n                initialize () {\n                    this.set({\n                        'filter_text': '',\n                        'filter_type': 'contacts',\n                        'chat_state': ''\n                    });\n                },\n            });\n\n            _converse.RosterFilterView = Backbone.View.extend({\n                tagName: 'span',\n                events: {\n                    \"keydown .roster-filter\": \"liveFilter\",\n                    \"submit form.roster-filter-form\": \"submitFilter\",\n                    \"click .onX\": \"clearFilter\",\n                    \"mousemove .x\": \"toggleX\",\n                    \"change .filter-type\": \"changeTypeFilter\",\n                    \"change .state-type\": \"changeChatStateFilter\"\n                },\n\n                initialize () {\n                    this.model.on('change:filter_type', this.render, this);\n                    this.model.on('change:filter_text', this.renderClearButton, this);\n                },\n\n                render () {\n                    this.el.innerHTML = tpl_roster_filter(\n                        _.extend(this.model.toJSON(), {\n                            placeholder: __('Filter'),\n                            label_contacts: LABEL_CONTACTS,\n                            label_groups: LABEL_GROUPS,\n                            label_state: __('State'),\n                            label_any: __('Any'),\n                            label_unread_messages: __('Unread'),\n                            label_online: __('Online'),\n                            label_chatty: __('Chatty'),\n                            label_busy: __('Busy'),\n                            label_away: __('Away'),\n                            label_xa: __('Extended Away'),\n                            label_offline: __('Offline')\n                        }));\n                    this.renderClearButton();\n                    return this.$el;\n                },\n\n                renderClearButton () {\n                    const roster_filter = this.el.querySelector('.roster-filter');\n                    if (_.isNull(roster_filter)) {\n                        return;\n                    }\n                    roster_filter.classList[this.tog(roster_filter.value)]('x');\n                },\n\n                tog (v) {\n                    return v?'add':'remove';\n                },\n\n                toggleX (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const el = ev.target;\n                    el.classList[this.tog(el.offsetWidth-18 < ev.clientX-el.getBoundingClientRect().left)]('onX');\n                },\n\n                changeChatStateFilter (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    this.model.save({\n                        'chat_state': this.el.querySelector('.state-type').value\n                    });\n                },\n\n                changeTypeFilter (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const type = ev.target.value;\n                    if (type === 'state') {\n                        this.model.save({\n                            'filter_type': type,\n                            'chat_state': this.el.querySelector('.state-type').value\n                        });\n                    } else {\n                        this.model.save({\n                            'filter_type': type,\n                            'filter_text': this.el.querySelector('.roster-filter').value\n                        });\n                    }\n                },\n\n                liveFilter: _.debounce(function (ev) {\n                    this.model.save({\n                        'filter_type': this.el.querySelector('.filter-type').value,\n                        'filter_text': this.el.querySelector('.roster-filter').value\n                    });\n                }, 250),\n\n                submitFilter (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    this.liveFilter();\n                    this.render();\n                },\n\n                isActive () {\n                    /* Returns true if the filter is enabled (i.e. if the user\n                     * has added values to the filter).\n                     */\n                    if (this.model.get('filter_type') === 'state' ||\n                        this.model.get('filter_text')) {\n                        return true;\n                    }\n                    return false;\n                },\n\n                show () {\n                    if (this.$el.is(':visible')) { return this; }\n                    this.$el.show();\n                    return this;\n                },\n\n                hide () {\n                    if (!this.$el.is(':visible')) { return this; }\n                    if (this.el.querySelector('.roster-filter').value.length > 0) {\n                        // Don't hide if user is currently filtering.\n                        return;\n                    }\n                    this.model.save({\n                        'filter_text': '',\n                        'chat_state': ''\n                    });\n                    this.$el.hide();\n                    return this;\n                },\n\n                clearFilter (ev) {\n                    if (ev && ev.preventDefault) {\n                        ev.preventDefault();\n                        $(ev.target).removeClass('x onX').val('');\n                    }\n                    this.model.save({\n                        'filter_text': ''\n                    });\n                }\n            });\n\n            _converse.RosterView = Backbone.Overview.extend({\n                tagName: 'div',\n                id: 'converse-roster',\n\n                initialize () {\n                    _converse.roster.on(\"add\", this.onContactAdd, this);\n                    _converse.roster.on('change', this.onContactChange, this);\n                    _converse.roster.on(\"destroy\", this.update, this);\n                    _converse.roster.on(\"remove\", this.update, this);\n                    this.model.on(\"add\", this.onGroupAdd, this);\n                    this.model.on(\"reset\", this.reset, this);\n                    _converse.on('rosterGroupsFetched', this.positionFetchedGroups, this);\n                    _converse.on('rosterContactsFetched', this.update, this);\n                    this.createRosterFilter();\n                },\n\n                render () {\n                    this.renderRoster();\n                    this.$el.html(this.filter_view.render());\n                    if (!_converse.allow_contact_requests) {\n                        // XXX: if we ever support live editing of config then\n                        // we'll need to be able to remove this class on the fly.\n                        this.el.classList.add('no-contact-requests');\n                    }\n                    return this;\n                },\n\n                renderRoster () {\n                    this.$roster = $(tpl_roster());\n                    this.roster = this.$roster[0];\n                },\n\n                createRosterFilter () {\n                    // Create a model on which we can store filter properties\n                    const model = new _converse.RosterFilter();\n                    model.id = b64_sha1(`_converse.rosterfilter${_converse.bare_jid}`);\n                    model.browserStorage = new Backbone.BrowserStorage.local(this.filter.id);\n                    this.filter_view = new _converse.RosterFilterView({'model': model});\n                    this.filter_view.model.on('change', this.updateFilter, this);\n                    this.filter_view.model.fetch();\n                },\n\n                updateFilter: _.debounce(function () {\n                    /* Filter the roster again.\n                     * Called whenever the filter settings have been changed or\n                     * when contacts have been added, removed or changed.\n                     *\n                     * Debounced so that it doesn't get called for every\n                     * contact fetched from browser storage.\n                     */\n                    const type = this.filter_view.model.get('filter_type');\n                    if (type === 'state') {\n                        this.filter(this.filter_view.model.get('chat_state'), type);\n                    } else {\n                        this.filter(this.filter_view.model.get('filter_text'), type);\n                    }\n                }, 100),\n\n                update: _.debounce(function () {\n                    if (_.isNull(this.roster.parentElement)) {\n                        this.$el.append(this.$roster.show());\n                    }\n                    return this.showHideFilter();\n                }, _converse.animate ? 100 : 0),\n\n                showHideFilter () {\n                    if (!this.$el.is(':visible')) {\n                        return;\n                    }\n                    if (_converse.roster.length >= 10) {\n                        this.filter_view.show();\n                    } else if (!this.filter_view.isActive()) {\n                        this.filter_view.hide();\n                    }\n                    return this;\n                },\n\n                filter (query, type) {\n                    // First we make sure the filter is restored to its\n                    // original state\n                    _.each(this.getAll(), function (view) {\n                        if (view.model.contacts.length > 0) {\n                            view.show().filter('');\n                        }\n                    });\n                    // Now we can filter\n                    query = query.toLowerCase();\n                    if (type === 'groups') {\n                        _.each(this.getAll(), function (view, idx) {\n                            if (!_.includes(view.model.get('name').toLowerCase(), query.toLowerCase())) {\n                                view.hide();\n                            } else if (view.model.contacts.length > 0) {\n                                view.show();\n                            }\n                        });\n                    } else {\n                        _.each(this.getAll(), function (view) {\n                            view.filter(query, type);\n                        });\n                    }\n                },\n\n                reset () {\n                    _converse.roster.reset();\n                    this.removeAll();\n                    this.renderRoster();\n                    this.render().update();\n                    return this;\n                },\n\n                onGroupAdd (group) {\n                    const view = new _converse.RosterGroupView({model: group});\n                    this.add(group.get('name'), view.render());\n                    this.positionGroup(view);\n                },\n\n                onContactAdd (contact) {\n                    this.addRosterContact(contact).update();\n                    this.updateFilter();\n                },\n\n                onContactChange (contact) {\n                    this.updateChatBox(contact).update();\n                    if (_.has(contact.changed, 'subscription')) {\n                        if (contact.changed.subscription === 'from') {\n                            this.addContactToGroup(contact, HEADER_PENDING_CONTACTS);\n                        } else if (_.includes(['both', 'to'], contact.get('subscription'))) {\n                            this.addExistingContact(contact);\n                        }\n                    }\n                    if (_.has(contact.changed, 'ask') && contact.changed.ask === 'subscribe') {\n                        this.addContactToGroup(contact, HEADER_PENDING_CONTACTS);\n                    }\n                    if (_.has(contact.changed, 'subscription') && contact.changed.requesting === 'true') {\n                        this.addContactToGroup(contact, HEADER_REQUESTING_CONTACTS);\n                    }\n                    this.updateFilter();\n                },\n\n                updateChatBox (contact) {\n                    const chatbox = _converse.chatboxes.get(contact.get('jid')),\n                        changes = {};\n                    if (!chatbox) {\n                        return this;\n                    }\n                    if (_.has(contact.changed, 'chat_status')) {\n                        changes.chat_status = contact.get('chat_status');\n                    }\n                    if (_.has(contact.changed, 'status')) {\n                        changes.status = contact.get('status');\n                    }\n                    chatbox.save(changes);\n                    return this;\n                },\n\n                positionFetchedGroups () {\n                    /* Instead of throwing an add event for each group\n                     * fetched, we wait until they're all fetched and then\n                     * we position them.\n                     * Works around the problem of positionGroup not\n                     * working when all groups besides the one being\n                     * positioned aren't already in inserted into the\n                     * roster DOM element.\n                     */\n                    const that = this;\n                    this.model.sort();\n                    this.model.each(function (group, idx) {\n                        let view = that.get(group.get('name'));\n                        if (!view) {\n                            view = new _converse.RosterGroupView({model: group});\n                            that.add(group.get('name'), view.render());\n                        }\n                        if (idx === 0) {\n                            that.$roster.append(view.$el);\n                        } else {\n                            that.appendGroup(view);\n                        }\n                    });\n                },\n\n                positionGroup (view) {\n                    /* Place the group's DOM element in the correct alphabetical\n                     * position amongst the other groups in the roster.\n                     */\n                    const $groups = this.$roster.find('.roster-group'),\n                        index = $groups.length ? this.model.indexOf(view.model) : 0;\n                    if (index === 0) {\n                        this.$roster.prepend(view.$el);\n                    } else if (index === (this.model.length-1)) {\n                        this.appendGroup(view);\n                    } else {\n                        $($groups.eq(index)).before(view.$el);\n                    }\n                    return this;\n                },\n\n                appendGroup (view) {\n                    /* Add the group at the bottom of the roster\n                     */\n                    const $last = this.$roster.find('.roster-group').last();\n                    const $siblings = $last.siblings('dd');\n                    if ($siblings.length > 0) {\n                        $siblings.last().after(view.$el);\n                    } else {\n                        $last.after(view.$el);\n                    }\n                    return this;\n                },\n\n                getGroup (name) {\n                    /* Returns the group as specified by name.\n                     * Creates the group if it doesn't exist.\n                     */\n                    const view =  this.get(name);\n                    if (view) {\n                        return view.model;\n                    }\n                    return this.model.create({name, id: b64_sha1(name)});\n                },\n\n                addContactToGroup (contact, name) {\n                    this.getGroup(name).contacts.add(contact);\n                },\n\n                addExistingContact (contact) {\n                    let groups;\n                    if (_converse.roster_groups) {\n                        groups = contact.get('groups');\n                        if (groups.length === 0) {\n                            groups = [HEADER_UNGROUPED];\n                        }\n                    } else {\n                        groups = [HEADER_CURRENT_CONTACTS];\n                    }\n                    _.each(groups, _.bind(this.addContactToGroup, this, contact));\n                },\n\n                addRosterContact (contact) {\n                    if (contact.get('subscription') === 'both' || contact.get('subscription') === 'to') {\n                        this.addExistingContact(contact);\n                    } else {\n                        if ((contact.get('ask') === 'subscribe') || (contact.get('subscription') === 'from')) {\n                            this.addContactToGroup(contact, HEADER_PENDING_CONTACTS);\n                        } else if (contact.get('requesting') === true) {\n                            this.addContactToGroup(contact, HEADER_REQUESTING_CONTACTS);\n                        }\n                    }\n                    return this;\n                }\n            });\n\n\n            _converse.RosterContactView = Backbone.View.extend({\n                tagName: 'dd',\n\n                events: {\n                    \"click .accept-xmpp-request\": \"acceptRequest\",\n                    \"click .decline-xmpp-request\": \"declineRequest\",\n                    \"click .open-chat\": \"openChat\",\n                    \"click .remove-xmpp-contact\": \"removeContact\"\n                },\n\n                initialize () {\n                    this.model.on(\"change\", this.render, this);\n                    this.model.on(\"remove\", this.remove, this);\n                    this.model.on(\"destroy\", this.remove, this);\n                    this.model.on(\"open\", this.openChat, this);\n                },\n\n                render () {\n                    const that = this;\n                    if (!this.mayBeShown()) {\n                        this.$el.hide();\n                        return this;\n                    }\n                    const item = this.model,\n                        ask = item.get('ask'),\n                        chat_status = item.get('chat_status'),\n                        requesting  = item.get('requesting'),\n                        subscription = item.get('subscription');\n\n                    const classes_to_remove = [\n                        'current-xmpp-contact',\n                        'pending-xmpp-contact',\n                        'requesting-xmpp-contact'\n                        ].concat(_.keys(STATUSES));\n\n                    _.each(classes_to_remove,\n                        function (cls) {\n                            if (_.includes(that.el.className, cls)) {\n                                that.el.classList.remove(cls);\n                            }\n                        });\n                    this.$el.addClass(chat_status).data('status', chat_status);\n\n                    if ((ask === 'subscribe') || (subscription === 'from')) {\n                        /* ask === 'subscribe'\n                         *      Means we have asked to subscribe to them.\n                         *\n                         * subscription === 'from'\n                         *      They are subscribed to use, but not vice versa.\n                         *      We assume that there is a pending subscription\n                         *      from us to them (otherwise we're in a state not\n                         *      supported by converse.js).\n                         *\n                         *  So in both cases the user is a \"pending\" contact.\n                         */\n                        this.el.classList.add('pending-xmpp-contact');\n                        this.$el.html(tpl_pending_contact(\n                            _.extend(item.toJSON(), {\n                                'desc_remove': __(___('Click to remove %1$s as a contact'), item.get('fullname')),\n                                'allow_chat_pending_contacts': _converse.allow_chat_pending_contacts\n                            })\n                        ));\n                    } else if (requesting === true) {\n                        this.el.classList.add('requesting-xmpp-contact');\n                        this.$el.html(tpl_requesting_contact(\n                            _.extend(item.toJSON(), {\n                                'desc_accept': __(___(\"Click to accept the contact request from %1$s\"), item.get('fullname')),\n                                'desc_decline': __(___(\"Click to decline the contact request from %1$s\"), item.get('fullname')),\n                                'allow_chat_pending_contacts': _converse.allow_chat_pending_contacts\n                            })\n                        ));\n                    } else if (subscription === 'both' || subscription === 'to') {\n                        this.el.classList.add('current-xmpp-contact');\n                        this.el.classList.remove(_.without(['both', 'to'], subscription)[0]);\n                        this.el.classList.add(subscription);\n                        this.renderRosterItem(item);\n                    }\n                    return this;\n                },\n\n                renderRosterItem (item) {\n                    const chat_status = item.get('chat_status');\n                    this.$el.html(tpl_roster_item(\n                        _.extend(item.toJSON(), {\n                            'desc_status': STATUSES[chat_status||'offline'],\n                            'desc_chat': __('Click to chat with this contact'),\n                            'desc_remove': __(___('Click to remove %1$s as a contact'), item.get('fullname')),\n                            'title_fullname': __('Name'),\n                            'allow_contact_removal': _converse.allow_contact_removal,\n                            'num_unread': item.get('num_unread') || 0\n                        })\n                    ));\n                    return this;\n                },\n\n                isGroupCollapsed () {\n                    /* Check whether the group in which this contact appears is\n                     * collapsed.\n                     */\n                    // XXX: this sucks and is fragile.\n                    // It's because I tried to do the \"right thing\"\n                    // and use definition lists to represent roster groups.\n                    // If roster group items were inside the group elements, we\n                    // would simplify things by not having to check whether the\n                    // group is collapsed or not.\n                    const name = this.$el.prevAll('dt:first').data('group');\n                    const group = _.head(_converse.rosterview.model.where({'name': name.toString()}));\n                    if (group.get('state') === _converse.CLOSED) {\n                        return true;\n                    }\n                    return false;\n                },\n\n                mayBeShown () {\n                    /* Return a boolean indicating whether this contact should\n                     * generally be visible in the roster.\n                     *\n                     * It doesn't check for the more specific case of whether\n                     * the group it's in is collapsed (see isGroupCollapsed).\n                     */\n                    const chatStatus = this.model.get('chat_status');\n                    if ((_converse.show_only_online_users && chatStatus !== 'online') ||\n                        (_converse.hide_offline_users && chatStatus === 'offline')) {\n                        // If pending or requesting, show\n                        if ((this.model.get('ask') === 'subscribe') ||\n                                (this.model.get('subscription') === 'from') ||\n                                (this.model.get('requesting') === true)) {\n                            return true;\n                        }\n                        return false;\n                    }\n                    return true;\n                },\n\n                openChat (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    return _converse.chatboxviews.showChat(this.model.attributes, true);\n                },\n\n                removeContact (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    if (!_converse.allow_contact_removal) { return; }\n                    const result = confirm(__(\"Are you sure you want to remove this contact?\"));\n                    if (result === true) {\n                        const iq = $iq({type: 'set'})\n                            .c('query', {xmlns: Strophe.NS.ROSTER})\n                            .c('item', {jid: this.model.get('jid'), subscription: \"remove\"});\n                        _converse.connection.sendIQ(iq,\n                            (iq) => {\n                                this.model.destroy();\n                                this.remove();\n                            },\n                            function (err) {\n                                alert(__('Sorry, there was an error while trying to remove %1$s as a contact.', name));\n                                _converse.log(err, Strophe.LogLevel.ERROR);\n                            }\n                        );\n                    }\n                },\n\n                acceptRequest (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    _converse.roster.sendContactAddIQ(\n                        this.model.get('jid'),\n                        this.model.get('fullname'),\n                        [],\n                        () => { this.model.authorize().subscribe(); }\n                    );\n                },\n\n                declineRequest (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const result = confirm(__(\"Are you sure you want to decline this contact request?\"));\n                    if (result === true) {\n                        this.model.unauthorize().destroy();\n                    }\n                    return this;\n                }\n            });\n\n\n            _converse.RosterGroupView = Backbone.Overview.extend({\n                tagName: 'dt',\n                className: 'roster-group',\n                events: {\n                    \"click a.group-toggle\": \"toggle\"\n                },\n\n                initialize () {\n                    this.model.contacts.on(\"add\", this.addContact, this);\n                    this.model.contacts.on(\"change:subscription\", this.onContactSubscriptionChange, this);\n                    this.model.contacts.on(\"change:requesting\", this.onContactRequestChange, this);\n                    this.model.contacts.on(\"change:chat_status\", function (contact) {\n                        // This might be optimized by instead of first sorting,\n                        // finding the correct position in positionContact\n                        this.model.contacts.sort();\n                        this.positionContact(contact).render();\n                    }, this);\n                    this.model.contacts.on(\"destroy\", this.onRemove, this);\n                    this.model.contacts.on(\"remove\", this.onRemove, this);\n                    _converse.roster.on('change:groups', this.onContactGroupChange, this);\n                },\n\n                render () {\n                    this.el.setAttribute('data-group', this.model.get('name'));\n                    const html = tpl_group_header({\n                        label_group: this.model.get('name'),\n                        desc_group_toggle: this.model.get('description'),\n                        toggle_state: this.model.get('state')\n                    });\n                    this.el.innerHTML = html;\n                    return this;\n                },\n\n                addContact (contact) {\n                    let view = new _converse.RosterContactView({model: contact});\n                    this.add(contact.get('id'), view);\n                    view = this.positionContact(contact).render();\n                    if (view.mayBeShown()) {\n                        if (this.model.get('state') === _converse.CLOSED) {\n                            if (view.$el[0].style.display !== \"none\") { view.$el.hide(); }\n                            if (!this.$el.is(':visible')) { this.$el.show(); }\n                        } else {\n                            if (this.$el[0].style.display !== \"block\") { this.show(); }\n                        }\n                    }\n                },\n\n                positionContact (contact) {\n                    /* Place the contact's DOM element in the correct alphabetical\n                     * position amongst the other contacts in this group.\n                     */\n                    const view = this.get(contact.get('id'));\n                    const index = this.model.contacts.indexOf(contact);\n                    view.$el.detach();\n                    if (index === 0) {\n                        this.$el.after(view.$el);\n                    } else if (index === (this.model.contacts.length-1)) {\n                        this.$el.nextUntil('dt').last().after(view.$el);\n                    } else {\n                        this.$el.nextUntil('dt').eq(index).before(view.$el);\n                    }\n                    return view;\n                },\n\n                show () {\n                    this.$el.show();\n                    _.each(this.getAll(), function (view) {\n                        if (view.mayBeShown() && !view.isGroupCollapsed()) {\n                            view.$el.show();\n                        }\n                    });\n                    return this;\n                },\n\n                hide () {\n                    this.$el.nextUntil('dt').addBack().hide();\n                },\n\n                filter (q, type) {\n                    /* Filter the group's contacts based on the query \"q\".\n                     * The query is matched against the contact's full name.\n                     * If all contacts are filtered out (i.e. hidden), then the\n                     * group must be filtered out as well.\n                     */\n                    let matches;\n                    if (q.length === 0) {\n                        if (this.model.get('state') === _converse.OPENED) {\n                            this.model.contacts.each(\n                                (item) => {\n                                    const view = this.get(item.get('id'));\n                                    if (view.mayBeShown() && !view.isGroupCollapsed()) {\n                                        view.$el.show();\n                                    }\n                                }\n                            );\n                        }\n                        this.showIfNecessary();\n                    } else {\n                        q = q.toLowerCase();\n                        if (type === 'state') {\n                            if (this.model.get('name') === HEADER_REQUESTING_CONTACTS) {\n                                // When filtering by chat state, we still want to\n                                // show requesting contacts, even though they don't\n                                // have the state in question.\n                                matches = this.model.contacts.filter(\n                                    (contact) => utils.contains.not('chat_status', q)(contact) && !contact.get('requesting')\n                                );\n                            } else if (q === 'unread_messages') {\n                                matches = this.model.contacts.filter({'num_unread': 0});\n                            } else {\n                                matches = this.model.contacts.filter(\n                                    utils.contains.not('chat_status', q)\n                                );\n                            }\n                        } else  {\n                            matches = this.model.contacts.filter(\n                                utils.contains.not('fullname', q)\n                            );\n                        }\n                        if (matches.length === this.model.contacts.length) {\n                            // hide the whole group\n                            this.hide();\n                        } else {\n                            _.each(matches, (item) => {\n                                this.get(item.get('id')).$el.hide();\n                            });\n                            if (this.model.get('state') === _converse.OPENED) {\n                                _.each(this.model.contacts.reject(\n                                    utils.contains.not('fullname', q)),\n                                    (item) => {\n                                        this.get(item.get('id')).$el.show();\n                                    });\n                            }\n                            this.showIfNecessary();\n                        }\n                    }\n                },\n\n                showIfNecessary () {\n                    if (!this.$el.is(':visible') && this.model.contacts.length > 0) {\n                        this.$el.show();\n                    }\n                },\n\n                toggle (ev) {\n                    if (ev && ev.preventDefault) { ev.preventDefault(); }\n                    const $el = $(ev.target);\n                    if ($el.hasClass(\"icon-opened\")) {\n                        this.$el.nextUntil('dt').slideUp();\n                        this.model.save({state: _converse.CLOSED});\n                        $el.removeClass(\"icon-opened\").addClass(\"icon-closed\");\n                    } else {\n                        $el.removeClass(\"icon-closed\").addClass(\"icon-opened\");\n                        this.model.save({state: _converse.OPENED});\n                        this.filter(\n                            _converse.rosterview.$('.roster-filter').val() || '',\n                            _converse.rosterview.$('.filter-type').val()\n                        );\n                    }\n                },\n\n                onContactGroupChange (contact) {\n                    const in_this_group = _.includes(contact.get('groups'), this.model.get('name'));\n                    const cid = contact.get('id');\n                    const in_this_overview = !this.get(cid);\n                    if (in_this_group && !in_this_overview) {\n                        this.model.contacts.remove(cid);\n                    } else if (!in_this_group && in_this_overview) {\n                        this.addContact(contact);\n                    }\n                },\n\n                onContactSubscriptionChange (contact) {\n                    if ((this.model.get('name') === HEADER_PENDING_CONTACTS) && contact.get('subscription') !== 'from') {\n                        this.model.contacts.remove(contact.get('id'));\n                    }\n                },\n\n                onContactRequestChange (contact) {\n                    if ((this.model.get('name') === HEADER_REQUESTING_CONTACTS) && !contact.get('requesting')) {\n                        /* We suppress events, otherwise the remove event will\n                         * also cause the contact's view to be removed from the\n                         * \"Pending Contacts\" group.\n                         */\n                        this.model.contacts.remove(contact.get('id'), {'silent': true});\n                        // Since we suppress events, we make sure the view and\n                        // contact are removed from this group.\n                        this.get(contact.get('id')).remove();\n                        this.onRemove(contact);\n                    }\n                },\n\n                onRemove (contact) {\n                    this.remove(contact.get('id'));\n                    if (this.model.contacts.length === 0) {\n                        this.$el.hide();\n                    }\n                }\n            });\n\n            /* -------- Event Handlers ----------- */\n\n            const onChatBoxMaximized = function (chatboxview) {\n                /* When a chat box gets maximized, the num_unread counter needs\n                 * to be cleared, but if chatbox is scrolled up, then num_unread should not be cleared.\n                 */\n                const chatbox = chatboxview.model;\n                if (chatbox.get('type') !== 'chatroom') {\n                    const contact = _.head(_converse.roster.where({'jid': chatbox.get('jid')}));\n                    if (!_.isUndefined(contact) && !chatbox.isScrolledUp()) {\n                        contact.save({'num_unread': 0});\n                    }\n                }\n            };\n\n            const onMessageReceived = function (data) {\n                /* Given a newly received message, update the unread counter on\n                 * the relevant roster contact.\n                 */\n                const { chatbox } = data;\n                if (_.isUndefined(chatbox)) {\n                    return;\n                }\n                if (_.isNull(data.stanza.querySelector('body'))) {\n                    return; // The message has no text\n                }\n                if (chatbox.get('type') !== 'chatroom' &&\n                    utils.isNewMessage(data.stanza) &&\n                    chatbox.newMessageWillBeHidden()) {\n\n                    const contact = _.head(_converse.roster.where({'jid': chatbox.get('jid')}));\n                    if (!_.isUndefined(contact)) {\n                        contact.save({'num_unread': contact.get('num_unread') + 1});\n                    }\n                }\n            };\n\n            const onChatBoxScrolledDown = function (data) {\n                const { chatbox } = data;\n                if (_.isUndefined(chatbox)) {\n                    return;\n                }\n                const contact = _.head(_converse.roster.where({'jid': chatbox.get('jid')}));\n                if (!_.isUndefined(contact)) {\n                    contact.save({'num_unread': 0});\n                }\n            };\n\n            const initRoster = function () {\n                /* Create an instance of RosterView once the RosterGroups\n                 * collection has been created (in converse-core.js)\n                 */\n                _converse.rosterview = new _converse.RosterView({\n                    'model': _converse.rostergroups\n                });\n                _converse.rosterview.render();\n                _converse.emit('rosterViewInitialized');\n            };\n            _converse.api.listen.on('rosterInitialized', initRoster);\n            _converse.api.listen.on('rosterReadyAfterReconnection', initRoster);\n            _converse.api.listen.on('message', onMessageReceived);\n            _converse.api.listen.on('chatBoxMaximized', onChatBoxMaximized);\n            _converse.api.listen.on('chatBoxScrolledDown', onChatBoxScrolledDown);\n        }\n    });\n}));\n"]}