{"version":3,"sources":["../src/converse-singleton.js"],"names":["root","factory","define","converse","env","_","Strophe","hideChat","view","model","get","save","hide","plugins","add","optional_dependencies","overrides","ChatBoxes","createChatBox","jid","attrs","hidden","__super__","call","RoomsPanel","parseRoomDataFromEvent","ev","result","apply","arguments","isUndefined","ChatBoxViews","showChat","force","_converse","chatbox","getChatBox","connection","authenticated","each","chatboxviews","xget","ChatBoxView","_show","focus","RosterContactView","openChat"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASC,WAAUA,IAAV,EAAgBC,OAAhB,EAAyB;AACtBC,WACI,CAAC,eAAD,EAAkB,mBAAlB,CADJ,EAEID,OAFJ;AAGH,CAJA,aAIO,UAAUE,QAAV,EAAoB;AACxB;;AADwB,wBAEDA,SAASC,GAFR;AAAA,QAEhBC,CAFgB,iBAEhBA,CAFgB;AAAA,QAEbC,OAFa,iBAEbA,OAFa;;;AAIxB,aAASC,QAAT,CAAmBC,IAAnB,EAAyB;AACrB,YAAIA,KAAKC,KAAL,CAAWC,GAAX,CAAe,IAAf,MAAyB,YAA7B,EAA2C;AAAE;AAAS;AACtDF,aAAKC,KAAL,CAAWE,IAAX,CAAgB,EAAC,UAAU,IAAX,EAAhB;AACAH,aAAKI,IAAL;AACH;;AAEDT,aAASU,OAAT,CAAiBC,GAAjB,CAAqB,oBAArB,EAA2C;AACvC;AACA;AACA;AACA;AACA;AACAC,+BAAuB,CAAC,cAAD,EAAiB,qBAAjB,EAAwC,qBAAxC,CANgB;;AAQvCC,mBAAW;AACP;AACA;AACA;AACA;AACA;;AAEAC,uBAAW;AACPC,6BADO,yBACQC,GADR,EACaC,KADb,EACoB;AACvB;;AAEAA,4BAAQA,SAAS,EAAjB;AACAA,0BAAMC,MAAN,GAAe,IAAf;AACA,2BAAO,KAAKC,SAAL,CAAeJ,aAAf,CAA6BK,IAA7B,CAAkC,IAAlC,EAAwCJ,GAAxC,EAA6CC,KAA7C,CAAP;AACH;AAPM,aAPJ;;AAiBPI,wBAAY;AACRC,sCADQ,kCACgBC,EADhB,EACoB;AACxB;;;AAGA,wBAAMC,SAAS,KAAKL,SAAL,CAAeG,sBAAf,CAAsCG,KAAtC,CAA4C,IAA5C,EAAkDC,SAAlD,CAAf;AACA,wBAAIxB,EAAEyB,WAAF,CAAcH,MAAd,CAAJ,EAA2B;AACvB;AACH;AACDA,2BAAON,MAAP,GAAgB,KAAhB;AACA,2BAAOM,MAAP;AACH;AAXO,aAjBL;;AA+BPI,0BAAc;AACVC,wBADU,oBACAZ,KADA,EACOa,KADP,EACc;AACpB;;;;AADoB,wBAKZC,SALY,GAKE,KAAKZ,SALP,CAKZY,SALY;;AAMpB,wBAAMC,UAAU,KAAKC,UAAL,CAAgBhB,KAAhB,EAAuB,IAAvB,CAAhB;AACA,wBAAMC,SAAShB,EAAEyB,WAAF,CAAcV,MAAMC,MAApB,IAA8Bc,QAAQzB,GAAR,CAAY,QAAZ,CAA9B,GAAsDU,MAAMC,MAA3E;AACA,wBAAI,CAACY,SAAS,CAACZ,MAAX,KAAsBa,UAAUG,UAAV,CAAqBC,aAA/C,EAA8D;AAC1DjC,0BAAEkC,IAAF,CAAOL,UAAUM,YAAV,CAAuBC,IAAvB,CAA4BN,QAAQzB,GAAR,CAAY,IAAZ,CAA5B,CAAP,EAAuDH,QAAvD;AACA4B,gCAAQxB,IAAR,CAAa,EAAC,UAAU,KAAX,EAAb;AACH;AACD,2BAAO,KAAKW,SAAL,CAAeU,QAAf,CAAwBJ,KAAxB,CAA8B,IAA9B,EAAoCC,SAApC,CAAP;AACH;AAdS,aA/BP;;AAgDPa,yBAAa;AACTC,qBADS,iBACFC,KADE,EACK;AACV;;;;AAIA,wBAAI,CAAC,KAAKnC,KAAL,CAAWC,GAAX,CAAe,QAAf,CAAL,EAA+B;AAC3BL,0BAAEkC,IAAF,CAAO,KAAKjB,SAAL,CAAeY,SAAf,CAAyBM,YAAzB,CAAsCC,IAAtC,CAA2C,KAAKhC,KAAL,CAAWC,GAAX,CAAe,IAAf,CAA3C,CAAP,EAAyEH,QAAzE;AACA,+BAAO,KAAKe,SAAL,CAAeqB,KAAf,CAAqBf,KAArB,CAA2B,IAA3B,EAAiCC,SAAjC,CAAP;AACH;AACJ;AAVQ,aAhDN;;AA6DPgB,+BAAmB;AACfC,wBADe,oBACLpB,EADK,EACD;AACV;;;;AAIArB,sBAAEkC,IAAF,CAAO,KAAKjB,SAAL,CAAeY,SAAf,CAAyBM,YAAzB,CAAsCC,IAAtC,CAA2C,YAA3C,CAAP,EAAiElC,QAAjE;AACA,yBAAKE,KAAL,CAAWE,IAAX,CAAgB,EAAC,UAAU,KAAX,EAAhB;AACA,2BAAO,KAAKW,SAAL,CAAewB,QAAf,CAAwBlB,KAAxB,CAA8B,IAA9B,EAAoCC,SAApC,CAAP;AACH;AATc;AA7DZ;AAR4B,KAA3C;AAkFH,CAhGA,CAAD","file":"converse-singleton.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, JC Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global Backbone, define, window, document, JSON */\n\n/* converse-singleton\n/* ******************\n *\n * A non-core plugin which ensures that only one chat, private or group, is\n * visible at any one time. All other ongoing chats are hidden and kept in the\n * background.\n *\n * This plugin makes sense in mobile or fullscreen chat environments.\n */\n(function (root, factory) {\n    define(\n        [\"converse-core\", \"converse-chatview\"],\n        factory);\n}(this, function (converse) {\n    \"use strict\";\n    const { _, Strophe } = converse.env;\n\n    function hideChat (view) {\n        if (view.model.get('id') === 'controlbox') { return; }\n        view.model.save({'hidden': true});\n        view.hide();\n    }\n\n    converse.plugins.add('converse-singleton', {\n        // It's possible however to make optional dependencies non-optional.\n        // If the setting \"strict_plugin_dependencies\" is set to true,\n        // an error will be raised if the plugin is not found.\n        //\n        // NB: These plugins need to have already been loaded via require.js.\n        optional_dependencies: ['converse-muc', 'converse-controlbox', 'converse-rosterview'],\n\n        overrides: {\n            // overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // new functions which don't exist yet can also be added.\n\n            ChatBoxes: {\n                createChatBox (jid, attrs) {\n                    /* Make sure new chat boxes are hidden by default.\n                     */\n                    attrs = attrs || {};\n                    attrs.hidden = true;\n                    return this.__super__.createChatBox.call(this, jid, attrs);\n                }\n            },\n\n            RoomsPanel: {\n                parseRoomDataFromEvent (ev) {\n                    /* We set hidden to false for rooms opened manually by the\n                     * user. They should always be shown.\n                     */\n                    const result = this.__super__.parseRoomDataFromEvent.apply(this, arguments);\n                    if (_.isUndefined(result)) {\n                        return\n                    }\n                    result.hidden = false;\n                    return result;\n                }\n            },\n \n            ChatBoxViews: {\n                showChat (attrs, force) {\n                    /* We only have one chat visible at any one\n                     * time. So before opening a chat, we make sure all other\n                     * chats are hidden.\n                     */\n                    const { _converse } = this.__super__;\n                    const chatbox = this.getChatBox(attrs, true);\n                    const hidden = _.isUndefined(attrs.hidden) ? chatbox.get('hidden') : attrs.hidden;\n                    if ((force || !hidden) && _converse.connection.authenticated) {\n                        _.each(_converse.chatboxviews.xget(chatbox.get('id')), hideChat);\n                        chatbox.save({'hidden': false});\n                    }\n                    return this.__super__.showChat.apply(this, arguments);\n                }\n            },\n\n            ChatBoxView: {\n                _show (focus) {\n                    /* We only have one chat visible at any one\n                     * time. So before opening a chat, we make sure all other\n                     * chats are hidden.\n                     */\n                    if (!this.model.get('hidden')) {\n                        _.each(this.__super__._converse.chatboxviews.xget(this.model.get('id')), hideChat);\n                        return this.__super__._show.apply(this, arguments);\n                    }\n                }\n            },\n\n            RosterContactView: {\n                openChat (ev) {\n                    /* We only have one chat visible at any one\n                     * time. So before opening a chat, we make sure all other\n                     * chats are hidden.\n                     */\n                    _.each(this.__super__._converse.chatboxviews.xget('controlbox'), hideChat);\n                    this.model.save({'hidden': false});\n                    return this.__super__.openChat.apply(this, arguments);\n                },\n            }\n        }\n    });\n}));\n"]}