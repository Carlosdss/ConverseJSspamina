{"version":3,"sources":["../src/converse-vcard.js"],"names":["root","factory","define","converse","env","Strophe","_","moment","sizzle","plugins","add","overrides","RosterContacts","createRequestingContact","presence","_converse","__super__","bare_jid","getBareJidFromJid","getAttribute","getVCard","partial","createRequestingContactFromVCard","iq","jid","log","LogLevel","ERROR","initialize","api","settings","update","use_vcards","fullname","img","img_type","url","nick_el","NS","NICK","length","textContent","user_data","subscription","ask","requesting","image","image_type","vcard_updated","format","roster","create","emit","onVCardError","errback","contact","get","save","onVCardData","callback","vcard","querySelector","connection","on","disco","addFeature","VCARD","updateVCardForChatBox","chatbox","model","waitUntil","then","catch","FATAL","onContactAdd","fetchOwnVCard","xmppstatus","undefined"],"mappings":"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","file":"converse-vcard.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define */\n\n(function (root, factory) {\n    define([\"converse-core\", \"strophe.vcard\"], factory);\n}(this, function (converse) {\n    \"use strict\";\n    const { Strophe, _, moment, sizzle } = converse.env;\n\n    converse.plugins.add('converse-vcard', {\n\n        overrides: {\n            // Overrides mentioned here will be picked up by converse.js's\n            // plugin architecture they will replace existing methods on the\n            // relevant objects or classes.\n            //\n            // New functions which don't exist yet can also be added.\n\n            RosterContacts: {\n                createRequestingContact (presence) {\n                    const { _converse } = this.__super__;\n                    const bare_jid = Strophe.getBareJidFromJid(presence.getAttribute('from'));\n                    _converse.getVCard(\n                        bare_jid,\n                        _.partial(_converse.createRequestingContactFromVCard, presence),\n                        function (iq, jid) {\n                            _converse.log(\n                                `Error while retrieving vcard for ${jid}`,\n                                Strophe.LogLevel.ERROR\n                            );\n                            _converse.createRequestingContactFromVCard(presence, iq, jid);\n                        }\n                    );\n                }\n            }\n        },\n\n        initialize () {\n            /* The initialize function gets called as soon as the plugin is\n             * loaded by converse.js's plugin machinery.\n             */\n            const { _converse } = this;\n            _converse.api.settings.update({\n                use_vcards: true,\n            });\n\n            _converse.createRequestingContactFromVCard = function (presence, iq, jid, fullname, img, img_type, url) {\n                const bare_jid = Strophe.getBareJidFromJid(jid);\n                if (!fullname) {\n                    const nick_el = sizzle(`nick[xmlns=\"${Strophe.NS.NICK}\"]`, presence);\n                    fullname = nick_el.length ? nick_el[0].textContent : bare_jid;\n                }\n                const user_data = {\n                    jid: bare_jid,\n                    subscription: 'none',\n                    ask: null,\n                    requesting: true,\n                    fullname: fullname,\n                    image: img,\n                    image_type: img_type,\n                    url,\n                    vcard_updated: moment().format()\n                };\n                _converse.roster.create(user_data);\n                _converse.emit('contactRequest', user_data);\n            };\n\n            _converse.onVCardError = function (jid, iq, errback) {\n                const contact = _.get(_converse.roster, jid);\n                if (contact) {\n                    contact.save({ 'vcard_updated': moment().format() });\n                }\n                if (errback) { errback(iq, jid); }\n            };\n\n            _converse.onVCardData = function (jid, iq, callback) {\n                const vcard = iq.querySelector('vCard'),\n                    img_type = _.get(vcard.querySelector('TYPE'), 'textContent'),\n                    img = _.get(vcard.querySelector('BINVAL'), 'textContent'),\n                    url = _.get(vcard.querySelector('URL'), 'textContent'),\n                    fullname = _.get(vcard.querySelector('FN'), 'textContent');\n\n                if (jid) {\n                    const contact = _converse.roster.get(jid);\n                    if (contact) {\n                        contact.save({\n                            'fullname': fullname || _.get(contact, 'fullname', jid),\n                            'image_type': img_type,\n                            'image': img,\n                            'url': url,\n                            'vcard_updated': moment().format()\n                        });\n                    }\n                }\n                if (callback) {\n                    callback(iq, jid, fullname, img, img_type, url);\n                }\n            };\n\n            _converse.getVCard = function (jid, callback, errback) {\n                /* Request the VCard of another user.\n                 *\n                 * Parameters:\n                 *    (String) jid - The Jabber ID of the user whose VCard\n                 *      is being requested.\n                 *    (Function) callback - A function to call once the VCard is\n                 *      returned.\n                 *    (Function) errback - A function to call if an error occured\n                 *      while trying to fetch the VCard.\n                 */\n                if (!_converse.use_vcards) {\n                    if (callback) { callback(null, jid); }\n                } else {\n                    _converse.connection.vcard.get(\n                        _.partial(_converse.onVCardData, jid, _, callback),\n                        jid,\n                        _.partial(_converse.onVCardError, jid, _, errback));\n                }\n            };\n\n            /* Event handlers */\n            _converse.on('addClientFeatures', () => {\n                if (_converse.use_vcards) {\n                    _converse.connection.disco.addFeature(Strophe.NS.VCARD);\n                }\n            });\n\n            const updateVCardForChatBox = function (chatbox) {\n                if (!_converse.use_vcards || chatbox.model.get('type') === 'headline') {\n                    return;\n                }\n                _converse.api.waitUntil('rosterInitialized').then(() => {\n                    const jid = chatbox.model.get('jid'),\n                        contact = _converse.roster.get(jid);\n                    if ((contact) && (!contact.get('vcard_updated'))) {\n                        _converse.getVCard(\n                            jid,\n                            function (iq, jid, fullname, image, image_type, url) {\n                                chatbox.model.save({\n                                    'fullname' : fullname || jid,\n                                    'url': url,\n                                    'image_type': image_type,\n                                    'image': image\n                                });\n                            },\n                            function () {\n                                _converse.log(\n                                    \"updateVCardForChatBox: Error occured while fetching vcard\",\n                                    Strophe.LogLevel.ERROR\n                                );\n                            }\n                        );\n                    }\n                }).catch(_.partial(_converse.log, _, Strophe.LogLevel.FATAL));\n            };\n            _converse.on('chatBoxInitialized', updateVCardForChatBox);\n\n            const onContactAdd = function (contact) {\n                if (!contact.get('vcard_updated')) {\n                    // This will update the vcard, which triggers a change\n                    // request which will rerender the roster contact.\n                    _converse.getVCard(contact.get('jid'));\n                }\n            };\n            _converse.on('initialized', function () {\n                _converse.roster.on(\"add\", onContactAdd);\n            });\n\n            _converse.on('statusInitialized', function fetchOwnVCard () {\n                if (_converse.xmppstatus.get('fullname') === undefined) {\n                    _converse.getVCard(\n                        null, // No 'to' attr when getting one's own vCard\n                        function (iq, jid, fullname) {\n                            _converse.xmppstatus.save({'fullname': fullname});\n                        }\n                    );\n                }\n            });\n        }\n    });\n}));\n"]}