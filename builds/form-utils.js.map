{"version":3,"sources":["../src/form-utils.js"],"names":["root","factory","define","sizzle","_","u","tpl_field","tpl_select_option","tpl_form_select","tpl_form_textarea","tpl_form_checkbox","tpl_form_username","tpl_form_input","tpl_form_captcha","XFORM_TYPE_MAP","webForm2xForm","field","value","getAttribute","checked","tagName","filter","split","trim","stringToDOM","name","xForm2webForm","stanza","values","map","queryChildren","partial","get","options","option","querySelector","startsWith","isNil","join","text","el","textContent","domain","uri","replace"],"mappings":"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","file":"form-utils.js","sourcesContent":["// Converse.js (A browser based XMPP chat client)\n// http://conversejs.org\n//\n// This is the utilities module.\n//\n// Copyright (c) 2012-2017, Jan-Carel Brand <jc@opkode.com>\n// Licensed under the Mozilla Public License (MPLv2)\n//\n/*global define, escape, locales, Jed */\n(function (root, factory) {\n    define([\n        \"sizzle\",\n        \"lodash.noconflict\",\n        \"utils\",\n        \"tpl!field\",\n        \"tpl!select_option\",\n        \"tpl!form_select\",\n        \"tpl!form_textarea\",\n        \"tpl!form_checkbox\",\n        \"tpl!form_username\",\n        \"tpl!form_input\",\n        \"tpl!form_captcha\"\n    ], factory);\n}(this, function (\n        sizzle,\n        _,\n        u,\n        tpl_field,\n        tpl_select_option,\n        tpl_form_select,\n        tpl_form_textarea,\n        tpl_form_checkbox,\n        tpl_form_username,\n        tpl_form_input,\n        tpl_form_captcha\n    ) {\n    \"use strict\";\n\n    var XFORM_TYPE_MAP = {\n        'text-private': 'password',\n        'text-single': 'text',\n        'fixed': 'label',\n        'boolean': 'checkbox',\n        'hidden': 'hidden',\n        'jid-multi': 'textarea',\n        'list-single': 'dropdown',\n        'list-multi': 'dropdown'\n    };\n\n    u.webForm2xForm = function (field) {\n        /* Takes an HTML DOM and turns it into an XForm field.\n         *\n         * Parameters:\n         *      (DOMElement) field - the field to convert\n         */\n        let value;\n        if (field.getAttribute('type') === 'checkbox') {\n            value = field.checked && 1 || 0;\n        } else if (field.tagName == \"textarea\") {\n            value = _.filter(field.value.split('\\n'), _.trim);\n        } else {\n            value = field.value;\n        }\n        return u.stringToDOM(\n            tpl_field({\n                name: field.getAttribute('name'),\n                value: value\n            })\n        )[0];\n    };\n\n    u.xForm2webForm = function (field, stanza) {\n        /* Takes a field in XMPP XForm (XEP-004: Data Forms) format\n         * and turns it into an HTML field.\n         *\n         * Returns either text or a DOM element (which is not ideal, but fine\n         * for now).\n         *\n         *  Parameters:\n         *      (XMLElement) field - the field to convert\n         */\n        if (field.getAttribute('type') === 'list-single' ||\n            field.getAttribute('type') === 'list-multi') {\n\n            const values = _.map(\n                u.queryChildren(field, 'value'),\n                _.partial(_.get, _, 'textContent')\n            );\n            const options = _.map(\n                u.queryChildren(field, 'option'),\n                function (option) {\n                    const value = _.get(option.querySelector('value'), 'textContent');\n                    return tpl_select_option({\n                        'value': value,\n                        'label': option.getAttribute('label'),\n                        'selected': _.startsWith(values, value),\n                        'required': _.isNil(field.querySelector('required'))\n                    })\n                }\n            );\n            return tpl_form_select({\n                'name': field.getAttribute('var'),\n                'label': field.getAttribute('label'),\n                'options': options.join(''),\n                'multiple': (field.getAttribute('type') === 'list-multi'),\n                'required': _.isNil(field.querySelector('required'))\n            })\n        } else if (field.getAttribute('type') === 'fixed') {\n            const text = _.get(field.querySelector('value'), 'textContent');\n            const el = u.stringToDOM('<p class=\"form-help\">');\n            el.textContent = text;\n            return el;\n        } else if (field.getAttribute('type') === 'jid-multi') {\n            return tpl_form_textarea({\n                'name': field.getAttribute('var'),\n                'label': field.getAttribute('label') || '',\n                'value': _.get(field.querySelector('value'), 'textContent'),\n                'required': _.isNil(field.querySelector('required'))\n            })\n        } else if (field.getAttribute('type') === 'boolean') {\n            return tpl_form_checkbox({\n                'name': field.getAttribute('var'),\n                'type': XFORM_TYPE_MAP[field.getAttribute('type')],\n                'label': field.getAttribute('label') || '',\n                'checked': _.get(field.querySelector('value'), 'textContent') === \"1\" && 'checked=\"1\"' || '',\n                'required': _.isNil(field.querySelector('required'))\n            })\n        } else if (field.getAttribute('type') && field.getAttribute('var') === 'username') {\n            return tpl_form_username({\n                'domain': ' @'+this.domain,\n                'name': field.getAttribute('var'),\n                'type': XFORM_TYPE_MAP[field.getAttribute('type')],\n                'label': field.getAttribute('label') || '',\n                'value': _.get(field.querySelector('value'), 'textContent'),\n                'required': _.isNil(field.querySelector('required'))\n            })\n        } else if (field.getAttribute('type')) {\n            return tpl_form_input({\n                'name': field.getAttribute('var'),\n                'type': XFORM_TYPE_MAP[field.getAttribute('type')],\n                'label': field.getAttribute('label') || '',\n                'value': _.get(field.querySelector('value'), 'textContent'),\n                'required': _.isNil(field.querySelector('required'))\n            })\n        } else {\n            if (field.getAttribute('var') === 'ocr') { // Captcha\n                const uri = field.querySelector('uri');\n                const el = sizzle('data[cid=\"'+uri.textContent.replace(/^cid:/, '')+'\"]', stanza)[0];\n                return tpl_form_captcha({\n                    'label': field.getAttribute('label'),\n                    'name': field.getAttribute('var'),\n                    'data': _.get(el, 'textContent'),\n                    'type': uri.getAttribute('type'),\n                    'required': _.isNil(field.querySelector('required'))\n                })\n            }\n        }\n    }\n    return u;\n}));\n"]}