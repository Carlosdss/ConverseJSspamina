/**
 * @fileoverview Rule to ensure consistency of aliases of lodash methods
 */
'use strict';

/**
 * @fileoverview Rule to ensure consistency of aliases of lodash methods
 */
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = {
    meta: {},

    create: function create(context) {
        var _require = require('../util/lodashUtil'),
            getLodashMethodVisitors = _require.getLodashMethodVisitors;

        var _require2 = require('../util/methodDataUtil'),
            isMainAlias = _require2.isMainAlias,
            getMainAlias = _require2.getMainAlias;

        var has = require('lodash/has');

        return getLodashMethodVisitors(context, function (node, iteratee, _ref) {
            var method = _ref.method,
                version = _ref.version;

            if (!isMainAlias(version, method)) {
                var mainAlias = getMainAlias(version, method);
                if (mainAlias) {
                    context.report({
                        node: node,
                        message: 'Method \'' + method + '\' is an alias, for consistency prefer using \'' + mainAlias + '\''
                    });
                }
            }
        });
    }
};